第二章 算法

0、算法的定义：
	算法是解决特定问题求解步骤的描述，在计算机中为指令的有限序列，并且每条指令表示一个或多个操作。

1、函数的渐进增长：给定两个函数f(n)和g(n)，如果存在一个整数N，使得对所有n>N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐进快于g(n)。

2、算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。
表示随着问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称为时间复杂度。
其中f(n)是问题规模n的某个函数。

推导大O阶：
<1>用常数1取代运行时间中的所有加法常数。
<2>在修改后的运算次数函数中，只保留最高阶项。
<3>如果最高阶项存在且不是1，则去除与这个项目相乘的常数。

eg :
int count = 1;
while(count < n)
{
	count = count * 2;
}
//有多少个2相乘后大于n？ 结果是log2 n

O(1)      常数阶
O(n)      线性阶
O(n^2)    平方阶
O(log n)  对数阶
O(nlog n) nlog n阶
O(n^3)    立方阶
O(2^n)    指数阶

3、最坏情况与平均情况
<1>通常，除非特别指定，我们提到的运行时间都是最坏情况的运行时间。
<2>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。
				 另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。
一般没有特殊说明时，都是指最坏时间复杂度。

4、算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)=O(f(n))。
其中，n为问题规模，f(n)为语句关于n所占存储空间的函数。
<1>一般情况下，一个程序在机器上执行时，除了需要存储程序本身的指令、常数变量和输入数据外，还需要存储对数据操作的存储单元。
<2>当不用限定词地使用"复杂度"时，通常都是指时间复杂度。


第三章 线性表

0、线性表(List)
零个或多个数据元素的有限序列。 
<1>序列：元素之间是有顺序的。
<2>要是相同类型的元素。
<3>在较复杂的线性表中，一个数据元素可以由若干个数据项组成。

1、线性表的顺序存储结构
线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。  //数组

#define MAXSIZE 20     //存储空间初始分配量
typedef int ElemType;  //假定类型为int
typedef struct
{
	ElemType data[MAXSIZE];
	int length;   //线性表当前长度
}SqList;

<1>存取
1)该存储方式下，可以随时算出线性表中任意位置的地址：loc(ai) = loc(a1) + (i - 1) * c
不管是第一个还是最后一个，都是相同的时间。
2)该存储方式下，对每个线性表位置的存入或者取出数据，对于计算机来说都是相等时间，也就是一个常数。
即，它的存取时间复杂度为O(1)。把具有这种特点的存储结构称为随机存取结构。

<2>插入与删除
1)时间复杂度都是O(n)。

<3>线性表顺序存储结构的优缺点
1)适合元素个数不太变化，更多是存取数据的应用。

2)优点：无须为表示表中元素之间的逻辑关系而增加额外的存储空间；
		可以快速地存取表中任一位置的元素。
		
3)缺点：插入和删除操作需要移动大量元素；
		当线性表长度变化较大时，难以确定存储空间的容量；
		造成存储空间的"碎片"。

2、线性表的链式存储结构
用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的。

typedef int ElemType;  //假定类型为int
typedef struct Node
{
	ElemType data;
	struct Node *next;
}node;
typdef struct Node *LinkList; //定义LinkList   //typdef (struct Node *)LinkList;

<1>链式结构中，除了要存储数据元素信息外，还要存储它的后继元素的存储地址。
1)数据域：存储数据元素信息的域
2)指针域：存储直接后继位置的域
这两部分信息组成数据元素ai的存储映像，称为结点(Node)。

3)n个节点链结成一个链表，即为线性表的链式存储结构。因为此链表的每个结点中只包含一个指针域，所以叫做单链表。

<2>头指针
1)头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。
2)头指针具有标识作用，所以常常用以头指针冠以链表的名字。
3)无论链表是否为空，头指针均不为空。头指针是链表的必要元素。

<3>头结点
1)头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义(也可以存储线性表的长度等附加信息)；
2)有了头结点，对第一个元素结点前插入结点和删除第一个结点，其操作与其他结点的操作就统一了。
3)头结点不一定是链表必须要素。

<4>线性链表的最后一个节点指针为空(NULL)。

<5>单链表的读取
需要从头开始找，时间复杂度为O(n)。

<6>单链表的插入和删除
时间复杂度为O(n)。由两部分组成：遍历查找到第i个元素；插入和删除元素。

对于插入或删除数据越频繁的操作，单链表的效率优势越明显。

3、单链表结构与顺序存储结构优缺点
<1>存储分配方式：
1)顺序存储结构用一段连续的存储单元依次存储线性表的数据元素；
2)单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素。

<2>时间性能
1)查找：
	顺序存储结构 O(1)
	单链表		 O(n)

2)插入和删除
	顺序存储结构需要平均移动表长一半的元素 O(n)
	单链表在先找到某位置的指针后O(n)，插入和删除时间仅为 O(1)

<3>空间性能
1)顺序存储结构需要预分配存储空间，分太大，浪费；分太小，溢出
2)单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制


4、静态链表

5、循环链表

6、双向链表
typedef int ElemType;  //假定类型为int
typedef struct DulNode
{
	ElemType data;
	struct DulNode *prior;
	struct DulNode *next;
}dulNode, *DuLinkList;

第四章  栈和队列
4.2 栈的定义
1、栈(stack)是限定仅在表尾进行插入和删除操作的线性表。
<1>允许插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)，不含任何数据元素的栈称为空栈。
<2>栈又称为后进先出的线性表。LIFO(Last in first out)结构。
<3>栈底是固定的，最先进栈的只能在栈底。
<4>栈的插入操作，叫做进栈、压栈、入栈。
	栈的删除操作，叫做出栈、弹栈。

<5>栈是线性表，具有线性关系，即前驱后继关系。

2、进栈出栈变化形式
<1>栈对线性表的插入和删除的位置进行了限制，并没有对元素进出的时间进行限制。
也就是说，不是所有元素都进栈的情况下，事先进去的元素也可以出栈，只要保证栈顶元素出栈即可。
<2>eg：3个整数1、2、3依次进栈，会有哪些出栈次序？
1 2 3进     3 2 1出
1进1出 2进2出 3进3出
...

4.3 栈的抽象数据类型
理论上线性表的操作特性它都具备。插入和删除，改名为push和pop。

4.4 栈的顺序存储结构及实现
1、结构定义：
typedef int SElemType;  //SElemType类型根据实际情况而定，这里假定为int
typedef struct
{
	SElemType data[MAXSIZE];
	int top; //用于栈顶指针
}SqStack;

<1>数组下标为0的一端作为栈底。top变量用来指示栈顶元素在数组中的位置。
<2>当栈存在一个元素时，top等于0。通常把空栈的判断条件定位top等于-1。

4.5 两栈共享空间
1、栈的顺序存储结构不存在线性表插入和删除时需要移动元素的问题。不过它必须事先确定数组存储空间的大小。
对于两个相同类型的栈，我们可以做到最大限度地利用其事先开辟的存储空间来进行操作。
<1>两个相同类型的栈，有可能一个栈已经满了，而另一个栈还有很多存储空间空闲。我们可以用一个数组来存储两个栈。

<2>让一个栈的栈底为数组的始端(下标为0处)，另一个栈的栈底为数组的末端(下标为n-1处)。
栈1为空时，top1等于-1；栈2为空时，top2等于n。

<3>top1+1等于top2时表示栈满。
极端情况：栈2为空，top1等于n-1时，栈1满；栈1为空，top2等于0时，栈2满。

2、两栈共享空间的结构：
typedef int SElemType;  
typedef struct
{
	SElemType data[MAXSIZE];
	int top1; 
	int top2; 
}SqDoubleStack;

3、使用这样的结构，通常都是在当两个栈的空间需求有相反关系时。并且两个栈的数据类型必须相同。


4.6 栈的链式存储结构及实现
1、比较好的办法是将栈顶放在单链表的头部。同时，对于链栈来说，是不需要头结点的。链栈的空栈就是top=NULL时。

2、数据结构
typedef int SElemType;  //SElemType类型根据实际情况而定，这里假定为int
typdedef struct StackNode
{
	SElemType data;
	struct StackNode *next;
}StackNode, *LinkStackPtr;

typdedef struct LinkStack
{
	LinkStackPtr top;
	int count;
}LinkStack;

3、链栈的push和pop操作都很简单，时间复杂度均为O(1)。同样顺序栈push和pop的时间复杂度也均为O(1)。

4、如果栈的使用过程中元素量变化不可预料，有时很少，有时非常大，那么最好用链栈；反之，如果变化在可控范围内，建议使用顺序栈。


4.8 栈的应用 -- 递归
1、裴波拿契数列(Fibonacci)
1 1 2 3 5 8 13 ... //前面相邻两项之和，构成后一项

2、函数实现
int Fbi(int i)
{
	if(i < 2)
		return i == 0 ? 0 : 1;
	return Fbi(i - 1) + Fbi(i - 2);
}

int main()
{
	int i;
	for(i = 0; i < 40; i++)
		printf("%d", Fbi(i));
	return 0;
}

3、在高级语言中，调用自己和调用其他函数没有本质的不同。把一直调用自己或通过一系列的调用语句间接地调用自己的函数，称为递归函数。
<1>每个递归定义必须至少有一个条件，满足条件时递归不再进行。eg：上例中的条件i<2。

<2>递归与迭代
- 迭代使用循环结构(for\while)，递归使用选择结构；
- 递归能使程序的结构更加清晰、简洁、容易让人理解；
- 大量的递归调用会建立函数的副本，消耗大量的时间和内存；
- 迭代则不需要反复调用函数和占用额外内存。

因此应该视不同情况选择不同的代码实现方式。

<3>递归与栈
- 递归过程退回的顺序是前行顺序的逆序。在退回过程中，可能要执行某些动作，包括恢复在前行过程中存储起来的某些数据。
- 这种存储某些数据，并在后面又以存储的逆序恢复这些数据，已提供之后使用的需求，显然很符合栈这样的数据结构。
- 因此编译器使用栈实现递归。
简单来说，在前行阶段，对于每一层递归，函数的局部变量、参数值以及返回地址都被压入栈中。
在退回阶段，位于栈顶的局部变量、参数值和返回地址被弹出，用于返回调用层次中执行代码的其余部分，也就恢复了调用的状态。

4.9 栈的应用 -- 四则运算表达式求值
1、后缀表示法定义    也称为逆波兰(Reverse Polish Notation,RPN)
所有符号都是在要运算数字的后面出现。
eg:  9 + (3 - 1) * 3 + 10 / 2 的后缀表达式：  9 3 1 - 3 * + 10 2 / +

2、规则：
从左到右遍历后缀表达式的每个数字和符号，遇到数字就进栈，遇到符号就将处于栈顶的两个数字出栈并进行运算，运算结果进栈，一直到最终获得结果。

3、中缀表达式转后缀表达式
<1>把平时所用的标准四则运算表达式，即 9 + (3 - 1) * 3 + 10 / 2 称为中缀表达式。因为所有运算符号都在数字的中间。
<2>转换规则： 
从左到右遍历中缀表达式的每个数字和符号： //符号进栈，数值不进栈
1)若是数字就输出，即称为后缀表达式的一部分；
2)若是符号，就判断其与栈顶符号的优先级，是右括号，则栈中相邻左括号间的符号依次出栈，并将左右一对括号舍弃；
                                        是优先级低于或等于栈顶符号时，则栈顶(连续的且优先级低于或等于当前符号的)符号依次出栈并输出，并将当前符号进栈。
直到最终输出后缀表达式为止。

注意：<1>每个符号对应左右两个运算值；
      <2>中缀转后缀表达式时，栈内的括号具有分隔作用。优先级比较时不能与括号相比，不能认为加减乘除的优先级比括号低，且左括号只有遇到右括号才能出栈。
      
4、总结：
要让计算机具有处理我们通常的标准(中缀)表达式的能力，分为两步：
<1>将中缀表达式转化为后缀表达式(栈用来进出符号)；
<2>将后缀表达式进行运算得出结果(栈用来进出数字)。

4.10 队列的定义
1、队列(queue)是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。
<1>先进先出FIFO(First In First Out)。
<2>允许插入的一端称为队尾，允许删除的一端称为对头。

4.11 队列的抽象数据类型


4.12 循环队列
1、队列顺序存储的不足
<1>入队列操作，不需要移动任何元素，时间复杂度为O(1)。
   出队列操作，为了保证下标为0的位置不为空，队列中所有元素都要向前移动，时间复杂度为O(n)。
   
<2>不限制队列的元素必须存储在数组的前n个单元这一条件，出队的性能会大大增加。   

<3>引入front指针指向队头元素；rear指针指向队尾元素的下一个位置。
当front等于rear时，为空队列。
   
<4>数组越界，出现假溢出的现象。

2、循环队列定义
把队列这种头尾相接的顺序存储结构称为循环队列。

<1>空队列时，front等于rear；满队列时，front也等于rear。为了区分：
1)设置一个标志变量flag，当front等于rear且flag等于0时，队列为空；当front等于rear且flag等于1时，队列为满。

2)当队列为满时，修改其条件，保留一个元素空间。也就是说，队列满时，数组中还有一个空闲单元。

<2>讨论第二种方法：
由于队列满时，rear可能比front大，也可能比front小。
那么队列满的条件是：(rear+1)%QueueSize == front     //QueueSize为队列的最大尺寸
    计算队列长度是：(rear-front+QueueSize)%QueueSize
	
3、循环队里的顺序存储结构代码：
typedef int QElemType；
typedef struct
{
	QElemType data[MAXSIZE];
	int front;
	int rear;  //尾指针，若队列不为空，指向队列尾元素的下一个位置
}SqQueue;
	
4.13 队列的链式存储结构及实现
1、将队头指针指向链队列的头结点；队尾指针指向终端结点。
<1>空队列时，front和rear都指向头结点。

2、链队列的结构：
typedef int QElemType；
typedef struct QNode
{
	QElemType data;
	struct QNode *next;
}QNode, *QueuePtr;
typedef struct
{
	QueuePtr front,rear;
}LinkQueue;

3、循环队列和链队列
出列和入列，两者的时间复杂度都是O(1)。
在确定队列长度最大值的情况下，建议使用循环队列。无法预测队列的长度时，则用链队列。


第5章 串

5.2 串的定义
1、串(string)是由零个或多个字符组成的有限序列，又叫字符串。
<1>子串和主串，串中任意个数的连续字符组成的子序列称为该串的子串，相应地包含子串的串称为主串。
<2>子串在主串中的位置就是子串的第一个字符在主串中的序号。

5.3 串的比较
1、串的比较是通过组成串的字符之间的编码来进行的。字符的编码指的是字符在对应字符集中的序号。
2、标准的ASCII编码：由7位二进制数表示一个字符，总共可以表示128个字符；
   扩展的ASCII编码：由8位二进制数表示一个字符，总共可以表示256个字符；
   Unicode编码：由16位的二进制数表示一个字符，总共可以表示2^16个字符。Unicode的前256个字符与ASCII码完全相同。

5.4 串的抽象数据类型

5.5 串的存储结构
1、串的顺序存储结构

2、串的链式存储结构

5.6 朴素的模式匹配算法
1、子串的定位操作通常称为串的模式匹配。

2、就是对主串的每一个字符作为子串开头，与要匹配的字符串进行匹配。
<1>最好情况：一开始就匹配成功  时间复杂度O(1)
<2>          每次都是首字母就不匹配  时间复杂度O(n+m)    n-主串长度  m-子串长度
<3>最坏情况：每次不成功的匹配都发生在子串的最后一个字符。  时间复杂度O((n-m+1)*m)

5.7 KMP模式匹配算法


































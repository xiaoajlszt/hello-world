第11章 线程
11.2 线程概念
1、每个线程都包含有表示执行环境所必须的信息，其中包含：
进程标识线程的线程ID、一组寄存器值、栈、调度优先级和策略、信号屏蔽字、errno变量以及线程私有数据。

2、进程的所有信息对该进程的所有线程都是共享的，包括：
可执行程序的代码、程序的全局内存、堆内存、栈、文件描述符等。

//堆是所有线程共享的；栈是每个线程独立的，是线程安全的。
操作系统在切换线程的时候会自动的切换栈，就是切换SS/ESP寄存器。

11.3 线程标识
1、进程ID(pid_t)是整个系统唯一的；线程ID(pthread_t)只在所属进程的上下文中才有意义。

2、线程可以通过调用pthread_self函数获取自身的线程ID。
pthread_equal函数比较两个线程ID。

11.4 线程创建
1、新增线程可以通过pthread_create函数创建。
#include <pthread.h>
int pthread_create(pthread_t *restrict tidp, const pthread_attr_t *restrict attr, 
void *(*start_rtm)(void *), void *restrict arg);

<1>线程创建时并不能保证哪个线程会先运行：是新创建的线程还是调用线程。
<2>新创建的线程可以访问进程的地址空间，且继承调用线程的浮点环境和信号屏蔽字，但是该线程的挂起信号集会被清除。
<3>函数通过第一个参数tidp返回新建线程的线程ID。


2、eg
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>

pthread_t ntid;

void printids(const char *s)
{
    pid_t pid;
    pthread_t tid;

    pid = getpid();
    tid = pthread_self();
    printf("%s pid %lu tid %lu (0x%lx)\n",
            s, (unsigned long)pid, (unsigned long)tid, (unsigned long)tid);
}

void *thr_fn(void *arg)
{
    printids("new thread: ");
    return ((void *)0);
}

int main(void)
{
    int err;
    err = pthread_create(&ntid, NULL, thr_fn, NULL);
    if(err != 0)
        printf("can not create thread!");
    printids("main thread:");
    sleep(1);
    exit(0);
}

[root@opencos apue]# ./thread1 
main thread: pid 11039 tid 139926979872576 (0x7f4349ee0740)
new thread:  pid 11039 tid 139926971586304 (0x7f43496f9700)

<1>undefined reference to ‘pthread_create’
原因：pthread不是linux下的默认的库，也就是在链接的时候，无法找到phread库中函数的入口地址，于是链接会失败。
解决：在gcc编译的时候，附加要加 -lpthread参数即可。

<2>主线程需要休眠，否则可能新线程还没有机会运行，整个进程就已经终止了。

<3>新线程通过调用pthread_self函数获取自己的线程ID，而不是从共享内存，或从线程的启动例程(pthread_create)中以参数形式获取。
本例中，主线程把新线程ID存放在ntid中，但是新线程却不能安全使用它，
因为如果新线程在主线程调用pthread_create返回之前就运行，那么ntid中的内容将是未初始化的。

11.5 线程终止
1、如果进程中的任意线程调用了exit、_EXIT、_exit，那么整个进程就会终止。

2、单个线程可以通过3中方式退出：
<1>线程可以简单地从启动例程中返回，返回值是线程的退出码；
<2>线程可以被同一进程中的其他线程取消。
<3>线程调用pthread_exit。

void pthread_exit(void *rval_ptr);

3、进程中的其他线程也可以通过pthread_join函数访问到rval_ptr。
int pthread_join(pthread_t thread, void **rval_ptr);
调用线程将一直阻塞，直到指定的线程调用pthread_exit、从启动例程中返回、被取消。
<1>如果线程简单地从启动例程返回或调用pthread_exit退出时，rval_ptr就包含退出状态；
<2>如果线程被取消，由rval_ptr指定的内存单元就设置为PTHREAD_CANCELED。
<3>如果对线程的返回值不感兴趣，那么可以把rval_ptr设置为NULL。
这样，调用pthread_join的线程只等待线程终止，并不获取线程的终止状态。

4、eg
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>

void *thr_fn1(void *arg)
{
    printf("thread 1 returning!\n");
    return ((void *)1);
}

void *thr_fn2(void *arg)
{
    printf("thread 2 exiting!\n");
    pthread_exit((void *)2);
}

int main(void)
{
    int err;
    pthread_t tid1, tid2;
    void *tret;

    err = pthread_create(&tid1, NULL, thr_fn1, NULL);
    if(0 != err)
        printf("can't create thread1!");

    err = pthread_create(&tid2, NULL, thr_fn2, NULL);
    if(0 != err)
        printf("can't create thread2!");

    err = pthread_join(tid1, &tret);
    if(0 != err)
        printf("can't join with thread1!");
    printf("thread 1 exit code is %ld.\n", (long)tret);

    err = pthread_join(tid2, &tret);
    if(0 != err)
        printf("can't join with thread2!");
    printf("thread 2 exit code is %ld.\n", (long)tret);

    exit(0);
}

[root@opencos apue]# ./thread2
thread 1 returning!
thread 2 exiting!
thread 1 exit code is 1.
thread 2 exit code is 2.

5、pthread_create和pthread_exit函数的无类型指针参数可以传递的值不止一个，这个指针可以传递复杂信息的结构地址。
但要注意，这个结构所使用的内存在调用者完成调用以后必须仍然是有效的。
eg：
<1>在调用pthread_create的线程的栈上分配了该结构，那么其他线程在使用这个结构时内存内容可能已经改变。
<2>线程在自己的栈上分配了该结构，然后把指向结构的指针传给pthread_exit，那么调用pthread_join的线程
试图使用该结构时，这个栈可能已经被撤销，内存已作他用。

为了解决这个问题，可以使用全局结构或者malloc函数分配结构。

6、线程可以通过调用pthread_cancel函数来请求取消同一进程中的其他线程。
int pthread_cancel(pthread_t tid);
<1>默认情况下，pthread_cancel函数会使得由tid标识的线程的行为表现为如同调用了参数为PTHREAD_CANCELED的pthread_exit函数。
<2>pthread_cancel并不等待线程终止，只是提出请求。

7、线程可以安排它退出时需要调用的函数，这与进程在退出时可以用atexit函数安排退出是类似的。
<1>这样的函数成为线程清理处理程序。
<2>一个线程可以建立多个清理处理程序。处理程序记录在栈中，执行顺序与注册顺序相反。
void pthread_cleanup_push(void (*rtm)(void *), void *arg);
void pthread_cleanup_pop(int execute);

8、默认情况下，线程的终止状态会保存直到对该线程调用pthread_join。
如果线程已经被分离，线程的底层存储资源可以在线程终止时立即被收回。
在线程被分离后，我们不能用pthread_join函数等待它的状态，此时会产生未定义行为。

<1>可以调用pthread_detach分离线程。
int pthread_detach(pthread_t tid);
也可以通过pthread_create设置线程属性，创建一个处于分离状态的线程。

11.6 线程同步
1、互斥量(mutex)
通过pthread的互斥接口来保护数据，确保同一时间只有一个线程访问数据。
<1>互斥量本质上是一把锁，在访问共享资源之前对互斥量进行设置(即加锁)，访问完成后释放(解锁)互斥量。
<2>对互斥量加锁后，任何其他试图再次对互斥量加锁的线程都会被阻塞，直到当前线程释放该互斥锁。

2、互斥变量用pthread_mutex_t数据类型表示。使用互斥变量之前，必须首先对它进行初始化。
<1>可以把它设置为常量PTHREAD_MUTEX_INITIALIZER(只是用于静态分配的互斥量)；
<2>也可以通过调用pthread_mutex_init函数进行初始化；
<3>如果动态分配互斥量(如malloc)，在释放内存前需要调用pthread_mutex_destory。

3、对互斥量进行加锁，需要调用pthread_mutex_lock;
<1>如果线程不希望被阻塞，可以使用pthread_mutex_trylock尝试对互斥量进行加锁。
<2>对互斥量进行解锁，需要调用pthread_mutex_unlock。   

2、避免死锁
<1>如果线程试图对同一个互斥量加锁两次，那么自身就会陷入死锁状态。
<2>程序中使用一个以上的互斥量时，如果允许一个线程一直占有第一个互斥量，并且试图锁住第二个互斥量时处于阻塞状态；
而拥有第二个互斥量的线程也在试图锁住第一个互斥量，就会产生死锁。
1)通过仔细控制互斥量加锁的顺序来避免死锁的发生。
2)如果涉及了太多的锁和数据结构，可用的函数并不能把它转换成简单的层次。这种情况下，可以先释放占有的锁，然后过一段时间再试。
可以使用pthread_mutex_trylock接口避免死锁，如果返回成功，就可以前进；如果不能获取锁，可以先释放已经占有的锁，做好清理工作，一段时间后再试。

<3>多线程软件设计，如果锁的粒度太粗，就会出现很多线程阻塞等待相同的锁，这样会影响并发性；
如果锁的粒度太细，那么过多的锁开销会使系统性能受到影响，并且代码会很复杂。需要在两者之间找到正确的平衡。

3、函数pthread_mutex_timedlock
当线程试图获取一个已加锁的互斥量时，该函数允许绑定线程阻塞时间。当达到超时时间时，函数不会对互斥量进行加锁，而是返回错误码ETIMEOUT。
#include <pthread.h>
#include <time.h>
int pthread_mutex_timelock(pthread_mutex_t *restrict mutex, const struct timespec *restrict tsptr);
//超时使用的是绝对时间(而不是如愿意阻塞Y秒这样的相对时间)，用秒和纳秒来描述时间。

4、读写锁
读写锁与互斥量类似，读写锁允许更高的并行性。读写锁有3种状态：读模式下加锁状态、写模式下加锁状态、不加锁状态。
<1>一次只有一个线程可以占有写模式的读写锁，但是有多个线程可以同时占有读模式的读写锁。
<2>当读写锁是写加锁状态时，所有试图对这个锁加锁的线程都会被阻塞；
   当读写锁是读加锁状态时，所有试图以读模式对它进行加锁的线程都可以得到访问权，试图以写模式进行加锁的线程都会阻塞；
   当存在试图以写模式和读模式加锁的线程同时阻塞时，读写锁通常会优先让写模式加锁线程执行。
<3>读写锁非常适用于读次数远大于写次数的情况。

读写锁也叫共享互斥锁。读模式锁住称为以共享模式锁住；写模式锁住称为以互斥模式锁住。
<1>读写锁在使用之前必须初始化；释放它们底层的内存之前必须销毁。
int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);
int pthread_rwlock_destory(pthread_rwlock_t *rwlock);
读写锁通常用pthread_rwlock_init进行初始化，如果希望读写锁有默认的属性，可以传入NULL指针给attr。
如果默认属性足够的话，也可用PTHREAD_RWLOCK_INITIALIZER常量初始化静态分配的读写锁。

<2>
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock); //在读模式下锁定读写锁
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock); //在写模式下锁定读写锁
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock); //解(读/写模式)锁

<3>各种实现可能会对共享模式下可获取的读写锁的次数进行限制，所以要检查pthread_rwlock_rdlock的返回值。

<4>读写锁原语的条件版本：
#include <pthread.h>
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
//可以获取锁时，返回0；否则，返回错误EBUSY。这两个函数可用于遵守某种锁层次但还不能完全避免死锁的情况。

5、带有超时的读写锁
与互斥量一样，SUS提供了带有超时的读写锁加锁函数，避免应用程序在获取读写锁时陷入永久阻塞状态。
#include <pthread.h>
#include <time.h>
int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict rwlock, const struct timespec *restrict tsptr);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict rwlock, const struct timespec *restrict tsptr);
//如果超时不能获取锁，这两个函数将返回ETIMEDOUT错误。超时时间是绝对时间，而不是相对时间。

6、条件变量(pthread_cond_t)
http://blog.csdn.net/hiflower/article/details/2195350

<1>条件变量给多个线程提供了一个会和的场所。条件变量和互斥量一起使用时，允许线程以无竞争的方式等待特定的条件发生。
1)条件本身是由互斥量保护的。线程在改变条件状态之前必须首先锁住互斥量，其他线程在获得互斥量之前不会察觉到这种改变。
2)使用条件变量之前必须先对它进行初始化:
静态分配的条件变量可以使用常量PTHREAD_COND_INITIALIZER初始化；
动态分配的条件变量需要使用pthread_cond_init函数进行初始化。
3)释放条件变量的底层内存空间之前，可以使用pthread_cond_destory函数对条件变量进行反初始化。

<2>等待条件变量变为真：
#include <pthread.h>
int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);
int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict tsptr);

1)互斥量对条件进行保护。调用者把锁住的互斥量传给函数，函数然后自动把调用线程放在等待条件的线程列表上，对互斥量解锁。
这就关闭了条件检查和线程进入休眠状态等待条件改变这两个操作之间的时间通道，线程不会错过条件的任何变化。
//等待条件的线程处于休眠状态

2)pthread_cond_wait返回时，互斥量再次被锁住。

3)从pthread_cond_wait或者pthread_cond_timedwait调用成功返回时，线程需要重新计算条件，因为另一个线程可能已经在运行并改变了条件。

<3>通知线程条件已经满足
#include <pthread.h>
int pthread_cond_signal(pthread_cond_t *cond);	  //唤醒一个等待该条件的线程
int pthread_cond_broadcast(pthread_cond_t *cond); //唤醒等待该条件的所有线程
一定要在改变条件状态之后再给线程发信号！

7、自旋锁(pthread_spinlock_t)
<1>自旋锁和互斥量类似，但它不是通过休眠使进程阻塞，而是在获取锁之前一直处于忙等(自旋)状态。
//当线程自旋等待时，CPU不能做其他的事情。
1)自旋锁使用场景：锁被持有的时间短，而且线程并不希望在重新调度上花费太多的成本。
			      自旋锁通常作为底层原语用于实现其他类型的锁。

2)自旋锁在非抢占式内核中非常有用；但在用户层并不是很有用(除非运行在不允许抢占的实时调度类中)。				  
//运行在分时调度类中(通常情况)的用户层线程在两种情况下可以被取消：
//它们的时间片到期 或者 具有更高优先级的线程就绪变为可执行状态。
//这些情况下，如果线程持有自旋锁，它就会进入休眠状态，阻塞在锁上的其它线程自旋的时间可能比预期的时间更长。

3)加上现代处理器的进步，使得上下文切换越来越快，也使得自旋锁只在某些特定的情况下有用。

<2>pthread_spin_init函数对自旋锁进行初始化；pthread_spin_destory函数进程自旋锁的反初始化。
#include <pthread.h>
int pthread_spin_init(pthread_spinlock_t *lock, int pshared);
int pthread_spin_destory(pthread_spinlock_t *lock);

1)只有一个属性是自旋锁特有的，这个属性只在支持线程进程共享同步(Thread Process-Shared Synchronization)选项(SUS中强制支持)的平台上可用。
pshared表示进程共享属性。如果设置为PTHREAD_PROCESS_SHARED，则自旋锁能被可访问锁底层内存的线程锁获取，即使该线程属于不同的进程。
						 否则设置为PTHREAD_PROCESS_PRIVATE，则自旋锁只能被初始化该锁的进程内部的线程访问。
						 
<3>加锁和解锁
#include <pthread.h>
int pthread_spin_lock(pthread_spinlock_t *lock);	//获取锁之前一直自旋
int pthread_spin_trylock(pthread_spinlock_t *lock); //如果不能获取锁，不自旋，立即返回EBUSY错误
int pthread_spin_unlock(pthread_spinlock_t *lock);

8、屏障(pthread_barrier_t)
<1>屏障(barrier)是用户协调多个线程并行工作的同步机制。屏障允许每个线程等待，直到所有的合作线程都到达某一点，然后从该点继续执行。
1)pthread_join函数就是一种屏障，允许一个线程等待，直到另一个线程退出。

<2>初始化和反初始化
#include <pthread.h>
int pthread_barrier_init(pthread_barrier_t *restrict barrier, const pthread_barrierattr_t *restrict attr, unsigned int count);
int pthread_barrier_destory(pthread_barrier_t *barrier);

初始化屏障时，使用count指定在允许所有线程继续运行之前，必须达到屏障的线程数目。

<3>可以使用pthread_barrier_wait函数表明，线程已经完成工作，准备等其他线程赶上来。
#include <pthread.h>
int pthread_barrier_wait(pthread_barrier_t *barrier);

1)调用该函数的线程，在屏障计数未满足条件时，会进入休眠状态。如果该线程是最后一个调用该函数的线程，那所有线程都被唤醒。

2)对于任意一个线程，函数返回了PTHREAD_BARRIER_SERIAL_THREAD，其他线程返回值都是0。
这使得一个线程可以作为主线程，它可以工作在其他所有线程已完成的工作结果上。

<4>一旦达到屏障计数，且线程处于非阻塞状态，屏障就可以被重用。


第12章 线程控制
12.2 线程限制
<1>PTHREAD_DESTRUCTOR_ITERATIONS	//线程退出时操作系统实现试图销毁线程特定数据的最大次数 4
<2>PTHREAD_KEYS_MAX					//进程可以创建的键的最大数目						   1024
<3>PTHREAD_STACK_MIN				//单个线程的栈可用的最小字节数						   16384 
<4>PTHREAD_THREADS_MAX				//进程可以创建的最大线程数							   无限制

12.3 线程属性
1、pthread接口允许我们通过设置每个对象关联的不同属性来细调线程和同步对象的行为。
<1>每个对象与它自己类型的属性对象进行关联。一个属性对象可以代表多个属性。
<2>有一个初始化函数，把属性设置为默认值。
<3>有一个销毁属性对象的函数。如果初始化函数分配了与属性对象关联的资源，销毁函数负责释放这些资源。
<4>每个属性都有一个从属性对象中获取属性值的函数。
<5>每个属性都有一个设置属性值的函数。

2、属性
#include <pthread.h>
int pthread_attr_init(pthread_attr_t *attr);   //初始化之后，结构中所包含的就是操作系统实现支持的所有线程属性的默认值
int pthread_attr_destory(pthread_attr_t *attr);

<1>detachstate	线程的分离状态属性
int pthread_attr_getdetachstate(const pthread_attr_t *restrict attr, int *detachstate);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate); 
1)如果对现有的某个进程的终止状态不感兴趣，可以使用pthread_detach函数让操作系统在线程退出时收回它所占用的资源。
2)可以使用pthread_attr_setdetachstate函数把线程属性detachstate设置成：PTHREAD_CREATE_DETACHED或者PTHREAD_CREATE_JOINABLE。

<2>guardsize	线程栈末尾的警戒缓冲区大小(字节数)

<3>stackaddr	线程栈的最低地址
<4>stacksize	线程栈的最小长度(字节数)
#include <pthread.h>
int pthread_attr_getstack(const pthread_attr_t *restrict attr, void **restrict stackaddr, size_t *restrict stacksize);
int pthread_attr_setstack(pthread_attr_t *addr, void *stackaddr, size_t stacksize); //stacksize不能小于PTHREAD_STACK_MIN

int pthread_attr_getstacksize(const pthread_attr_t *restrict attr, size_t *restrict stackszie);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize); //stacksize不能小于PTHREAD_STACK_MIN

1)对于进程来说，虚拟地址空间大小是固定的。因为进程只有一个栈，所以它的大小通常不是问题。
对于线程来说，同样大小的虚拟地址空间必须被所有线程栈共享。如果应用程序使用了许多线程，
以致这些线程栈的累计大小超过了可用的虚拟地址空间，就需要减少默认的线程栈大小。

2)另一方面，如果线程调用的函数分配了大量的自动变量，或者调用的函数涉及许多很深的栈帧(stack frame)，那么需要的栈大小可能要比默认的大。

3)如果线程栈的虚地址空间都用完了，那么可以使用malloc或者mmap来为可替代的栈分配空间，并用pthread_attr_setstack来改变新建线程的栈位置。
如果希望改变默认栈的大小，又不想自己处理线程栈的分配问题，可以使用pthread_attr_setstacksize函数。

12.4 同步属性
1、互斥量属性
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_destory(pthread_mutexattr_t *attr);

12.6 线程的特定数据
1、线程特定数据也称为线程私有数据，是存储和查询某个线程相关数据的一种机制。不需要担心与其他线程的同步访问问题。
进程中的所有线程都可以访问这个进程的整个地址空间。除非使用寄存器，线程无法阻止其他线程访问它的数据。线程特定数据也不例外。
虽然底层实现部分并不能阻止这种访问能力，但管理线程特定数据的函数可以提高线程间的数据独立性，使得线程不太容易访问到其他线程的线程特定数据。

2、在分配线程特定数据之前，需要创建与该数据关联的键。
#include <pthread.h>
int pthread_key_create(pthread_key_t *keyp, void (*destructor)(void *));
<1>创建的键存储在keyp指向的内存单元中，这个键可以被进程中的所有线程使用，但每个线程把这个键与不同的线程特定数据地址进行关联。
创建新键时，每个线程的数据地址设为空值。

<2>除了创建键以外，pthread_key_create可以为该键关联一个可选择的析构函数。
当线程退出时，如果数据地址已经被置为非空，那么析构函数就会被调用，它唯一的参数就是该数据地址。
如果传入的析构函数为空，表明没有析构函数与该键关联。

<3>线程可以为线程特定数据分配多个键，每个键都可以有一个析构函数与它关联。
每个键的析构函数可以互不相同，所有键也可以使用同一个析构函数。

3、取消键与线程特定数据值之间的关联关系
#include <pthread.h>
int pthread_key_delete(pthread_key_t key);
调用pthread_key_delete并不会激活与键关联的析构函数。要释放任何与键关联的线程特定数据值的内存，需要在应用程序中采取额外的步骤。

4、解决竞争pthread_once



12.7 取消选项


12.8 线程与信号


12.9 线程和fork


12.10 线程和I/O
























































































第七章、进程环境
7.2 main函数
1、main函数原型
int main(int argc, char *argv[]) / int main(int argc, char **argv)
argc: 命令行参数的数目
argv：指向参数的各个指针所构成的数组。其中第0个参数是程序的全名。
说明：当内核执行C程序时，在调用main之前首先调用一个特殊的启动例程。
可执行程序文件将此启动例程指定为程序的起始地址。(这是由连接编辑器设置的，而连接编辑器则由C编译器调用)
启动例程从内核取得命令行参数和环境变量值，然后为按上述方式调用的main函数做好安排。

2、注：启动例程
<1>启动例程是这样编写的：使得从main返回后立即调用exit函数。
如果将启动例程以C代码形式表示(常常用汇编语言编写)，则他调用main函数的形式可能是：
exit(main(argc,argv));


7.3 进程终止
1、有8中方式使进程终止，其中5种为正常终止：
<1>从main返回(return)
<2>调用exit
<3>调用_exit或_Exit
<4>最后一个线程从启动例程返回(return)
<5>从最后一个线程调用pthread_exit

异常终止有3种方式：
<1>调用abort
<2>接到一个信号
<3>最后一个线程对取消请求做出响应

2、退出函数
3个函数用于正常终止一个程序：_exit和_Exit立即进入内核；exit则先执行一些清理处理，然后返回内核。

<1>由于历史原因，exit函数总是执行一个标准I/O库的清理关闭操作：
对于所有打开的流调用fclose函数。造成所有输出缓存中的所有数据都被冲洗(写到文件上)。

<2>3个退出函数都带一个整型参数，称为终止状态。大多数UNIX系统shell都提供检查进程终止状态的方法。(echo $?)
如果出现下面的任意一种情况，则该进程的终止状态是未定义的。
1)调用这些函数时不带终止状态；
2)main执行了一个无返回值的return；
3)main没有声明返回类型为整数。

但是，若main的返回类型是整型，并且main执行到最后一条语句时返回(隐式返回)，那么该进程的终止状态为0。//C99标准引入
编译时加上 -std=c99 选项。
(历史上，若main函数终止时没有显式使用return语句或调用exit函数，那么进程终止状态是未定义的。)

eg:

<3>main函数返回一个整型值与用该值调用exit是等价的。即exit(0)等价于return 0。




























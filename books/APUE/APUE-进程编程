第七章、进程环境
7.2 main函数
1、main函数原型
int main(int argc, char *argv[]) / int main(int argc, char **argv)
argc: 命令行参数的数目
argv：指向参数的各个指针所构成的数组。其中第0个参数是程序的全名。
说明：当内核执行C程序时，在调用main之前首先调用一个特殊的启动例程。
可执行程序文件将此启动例程指定为程序的起始地址。(这是由连接编辑器设置的，而连接编辑器则由C编译器调用)
启动例程从内核取得命令行参数和环境变量值，然后为按上述方式调用的main函数做好安排。

2、注：启动例程
<1>启动例程是这样编写的：使得从main返回后立即调用exit函数。
如果将启动例程以C代码形式表示(常常用汇编语言编写)，则他调用main函数的形式可能是：
exit(main(argc,argv));


7.3 进程终止
1、有8中方式使进程终止，其中5种为正常终止：
<1>从main返回(return)
<2>调用exit
<3>调用_exit或_Exit
<4>最后一个线程从启动例程返回(return)
<5>从最后一个线程调用pthread_exit

异常终止有3种方式：
<1>调用abort
<2>接到一个信号
<3>最后一个线程对取消请求做出响应

2、退出函数
3个函数用于正常终止一个程序：_exit和_Exit立即进入内核；exit则先执行一些清理处理，然后返回内核。

<1>由于历史原因，exit函数总是执行一个标准I/O库的清理关闭操作：
对于所有打开的流调用fclose函数。造成所有输出缓存中的所有数据都被冲洗(写到文件上)。

<2>3个退出函数都带一个整型参数，称为终止状态。大多数UNIX系统shell都提供检查进程终止状态的方法。(echo $?)
如果出现下面的任意一种情况，则该进程的终止状态是未定义的。
1)调用这些函数时不带终止状态；
2)main执行了一个无返回值的return；
3)main没有声明返回类型为整数。

但是，若main的返回类型是整型，并且main执行到最后一条语句时返回(隐式返回)，那么该进程的终止状态为0。//C99标准引入
编译时加上 -std=c99 选项。
(历史上，若main函数终止时没有显式使用return语句或调用exit函数，那么进程终止状态是未定义的。)

<3>main函数返回一个整型值与用该值调用exit是等价的。即exit(0)等价于return 0。

3、函数atexit
按照ISO C(ANSI C是ISO C的前生，两者都是标准C)的规定，一个进程可以登记至多32个函数，这些函数将由exit自动调用。
称这些函数为终止处理程序，并调用atexit函数来登记这些函数。
<1>函数说明
int atexit(void (*func)(void)); //成功返回0
其中，atexit的参数是一个函数地址，当调用此函数时无需向它传递任何参数，也不期望它返回某个值。
exit调用这些函数的顺序和登记顺序相反。若多次登记同一个函数，也会被多次调用。

<2>根据ISO C和POSIX.1，exit首先调用各终止处理程序，然后关闭(通过fclose)所有打开流。

4、一个C程序如何启动和终止的
<1>内核使程序执行的唯一方法是调用一个exec函数。
<2>进程自愿终止的唯一方法是显式或隐式地(通过调用exit)调用_exit或_Exit。
<3>进程也可以非自愿地由一个信号使其终止。

7.4 命令行参数
1、当执行一个程序时，调用exec的进程可以将命令行参数传递给该新程序。这是UNIX shell的一部分常规操作。
2、ISO C和POSIX.1都要求argv[argc]是一个空指针。因此遍历操作可以：
for(loop=0;loop<argc;loop++)
for(loop=0;NULL!=argv[loop])

7.5 环境表
1、每个程序都接收到一张环境表。
<1>与参数表类似，环境表也是一个字符指针数组，其中每个指针包含一个C字符串的地址。
<2>全局变量environ则包含了该指针数组的地址: extern char ** environ;
称environ为环境指针，指针数组为环境表，其中各个指针指向的字符串为环境字符串。

2、通常用getenv和putenv函数来访问特定的环境变量，而不是用environ变量。
如果要看整个环境，则必须使用environ指针。

7.6 C程序的存储空间布局
1、C程序由下列部分组成：

高地址 ----------------------------------------------- 低地址

命令行参数和环境变量 -> 栈 -> 堆 -> BSS -> 初始化数据 -> 正文

对于32位Inter X86处理器，正文段从0x08048000单元开始，栈底则在0xC0000000之下开始。
(在这种特定结构中，栈从高地址向低地址方向增长)
堆顶和栈顶之间未用的虚地址空间很大。

<1>正文段。这是由CPU执行的机器指令部分。
通常正文段是可以共享的，即使是频繁执行的程序(文本编辑器、C编译器、shell等)在存储器中也只需要一个副本。
通常正文段是只读的，以防止程序由于意外而修改其指令。

<2>初始化数据段
通常将此段称为数据段，它包含了程序中需要明确初始化的全局变量。

<3>未初始化数据段
通常称为BSS段。在程序开始执行之前，内核将此段中的全局数据初始化为0或者空指针。

<4>栈
自动变量以及每次函数调用时所需保存的信息都存放在此段中。

<5>堆
通常在堆中进行动态存储分配。

2、a.out中还有若干其他类型的段，如包含符号表的段、包含调试信息的段以及包含动态共享库链接的段等。
这部分并不装载到进程执行的程序映像中。

3、未初始化数据段的内容并不存放在磁盘程序文件中。其原因是，内核在程序开始运行之前将它们都设为0。
需要存放在磁盘程序文件中段只有正文段和初始化数据段。

4、size(1)命令显示正文段、数据段、bss段的长度(以字节为单位)
$ size termination1.exe 
text    data     bss     dec     hex filename
1184     552       8    1744     6d0 termination1.exe
其中，第4、5列分别以十进制和十六进制表示3段总长度。

















第3章 文件I/O
3.1 引言
1、本章描述的函数经常被称为不带缓冲的I/O(与第5章中的标准I/O函数相对)。
<1>不带缓冲是指每个read和write都调用内核中的一个系统调用。
<2>这些不带缓冲的I/O函数不是ISO C的组成部分。它们是POSIX(可移植操作系统接口)的组成部分。

3.2 文件描述符
1、对于内核而言，所有打开的文件都通过文件描述符引用。
<1>文件描述符是一个非负整数，当打开一个现有文件或创建一个新文件时，内核向进程返回一个文件描述符。

<2>UNIX系统shell把文件描述符0(STDIN_FILENO )与进程的标准输入关联；	
				            1(STDOUT_FILENO)与      标准输出关联；	
                            2(STDERR_FILENO)与      标准错误关联。
这些常量在头文件<unistd.h>中。

<3>文件描述符的范围0~OPEN_MAX-1。
OPEN_MAX是允许每个进程最多打开的文件数。目前内核中已经没有这个参数，而是通过资源限制(/etc/security/limits.conf)来限制最大文件描述符数目。

3.3 函数open和openat
1、调用open或openat函数打开或创建一个文件
#include <fcntl.h>
int open(const char *path, int oflag, ... /*mode_t mode*/);
int openat(int fd, const char *path, int oflag, ... /*mode_t mode*/);
<1>说明
1)...表示余下的参数的数量及其类型是可变的。
2)对于open而言仅当创建新文件时才使用mode参数。

<2>参数：
oflag：通过|运算组合：

O_RDONLY	只读打开
O_WRONLY	只写打开
O_RDWR		读写打开
O_EXEC		只执行打开
O_SEARCH	只搜索打开(应用于目录)

以上五个必须指定且只能指定一个。下面常量是可选的：

O_APPEND	每次写时都追加到文件的尾端
O_CLOEXEC	把FD_CLOEXEC常量设置为文件描述符标志
O_CREAT		若文件不存在则创建它。
			使用此选项时，open/openat函数需同时说明参数mode，用于指明该新文件的访问权限。
O_DIRECTORY	如果path引用的不是目录，则出错
O_EXCL		如果同时指定了O_CREAT，且文件已经存在，则报错。
			用于测试一个文件是是否存在，如果不存在，则创建该文件，这使测试和创建两者称为一个原子操作。
eg：ret = open("/home/xiaopeng/python/1", O_RDONLY | O_EXCL | O_CREAT); 存在返回负数，不存在返回正数。

O_NOCTTY	如果path引用中端设备，则不讲该设备分配作为此进程的控制中端。
O_NOFOLLOW	如果path引用的是一个符号链接，则出错。
O_NONBLOCK	如果path引用的是一个FIFO、一个块特殊文件或一个字符特殊文件，则此选项为文件的本次打开操作和后续的I/O操作设置非阻塞方式。

O_SYNC		使每次write等待物理I/O操作完成，包括由该write操作引起的文件属性更新所需的I/O。
O_TRUNC		如果此文件存在，而且为只写或读-写成功打开，则将其长度截断为0。
O_TTY_INIT	如果打开一个还未打开的中端设备，设置非标准termios参数值。

O_DSYNC		使每次write要等待物理I/O操作完成，但是如果该写操作不影响读取刚写入的数据，则不需要等待文件属性被更新。
            O_DSYNC和O_SYNC标志有微妙的区别，仅当文件属性需要更新以反映文件数据变化时，
            O_DSYNC标志才影响文件属性，而设置O_SYNC标志后，数据和属性总是同步更新。
O_RSYNC     使每一个以文件描述符作为参数进行的read操作等待，直至所有对文件同一部分挂起的写操作都完成。

2、由open和openat函数返回的文件描述符一定是最小的未用描述符数值。
这一点被某些应用程序用来在标准输入、标准输出、标准错误上打开新的文件。(先关闭标准输出，然后在打开另一个文件)

3、fd参数区分open和openat
<1>path参数指定的是绝对路径，这种情况下，fd参数被忽略，openat函数就相当于open函数;
<2>path参数指定的是相对路径，fd参数指出了相对路径名在文件系统中的开始地址。fd参数是通过打开相对路径名所在的目录来获取的;
<3>path参数指定的是相对路径，fd参数具有特殊值AT_FDCWD，这种情况下，路径名在当前工作目录中获取。

openat希望解决：
<1>让线程可以使用相对路径名打开目录中的文件，而不再只能打开当前工作目录。
<2>可以避免TOCTTOU错误。(time-of-check-to-time-of-use)
如果两个基于文件的函数调用，其中第二个调用依赖于第一个调用的结果，那么程序是脆弱的。
因为这两个调用并不是原子操作，在两个函数调用之间文件可能改变了，这样也就造成了第一个调用结果不再有效。





















一、操作系统的基本特征
并发、共享、虚拟、异步，其中并发特征是操作系统最重要的特征，是其他三个特征的前提。
1、并发性：
<1>并发与并行
-并发性是指两个或多个事件在同一时间间隔内发生。
 在单处理系统中，宏观上一段时间内有多个程序在同时运行；微观上每一时刻却仅有一道程序执行，分时交替执行。
-并行性是指两个或多个事件在同一时刻发生。
 倘若在计算机系统中有多个处理机，则这些可以并发执行的程序便可以被分配到多个处理机上，实现并行执行。
 
<2>引入进程
为了使多个程序能够并发执行，系统必须分别为每个程序建立进程。
进程是指在系统中能独立运行并作为资源分配的基本单元，它由一组机器指令、数据和堆栈组成的，是一个能独立运行的活动实体。

<3>引入线程
-当一个进程因故不能继续运行时，操作系统变调度另一个进程运行。由于进程拥有自己的资源，故调度付出的开销较大。
-通常一个进程可以包含若干个线程，它们可以利用进程所拥有的资源。
-通常把进程作为分配资源的基本单元，把线程作为独立运行和独立调度的基本单元。
-线程调度所付出的开销比进程小很多，能高效地提高系统内多个程序间并发执行的程度，以便进一步提高系统的并发性。

2、共享性
所谓共享，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用。这些资源成为共享资源。

3、虚拟技术
所谓虚拟，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物(虚的)。
如果说时分复用技术是利用处理机的空闲时间来运行其他的程序，提高处理机的利用率；那么空分复用技术则是利用存储器的空闲空间来存放其他的程序，提高内存利用率。

<1>时分复用技术(分时使用方式)
<2>空分复用技术

如果虚拟的实现是通过时分复用的方法，即对某一物理设备进行分时使用，设N是某物理设备所对应的虚拟的逻辑设备数，则每台虚拟设备的平均速度必然等于或低于物理设备速度的1/N;
如果虚拟的实现是通过空分复用的方法，此时一台虚拟设备平均占用的空间必然也等于或低于物理设备所拥用空间的1/N。

4、异步性
-在多道程序环境下允许多个进程并发执行，但只有进程在获得所需资源后方能执行。
-进程以不可预知的速递向前推进，此即进程的异步性。但只要在操作系统中配置完善的进程同步机制，且运行环境相同，作业经过多次运行都会获得完全相同的结果。因此异步运行方式是允许的。


二、操作系统的主要功能
1、处理机管理
创建和撤销进程(线程)、对所有进程(线程)的运行进行协调、实现进程(线程)之间的信息交换、按照一定的算法把处理机分配给进程(线程)
<1>进程控制
要是作业运行，必须先为它创建一个或几个进程，并为之分配必要的资源；当进程运行结束时，立即撤销该进程，以便能及时回收进程所占用的各类资源。
创建进程(线程)、撤销已结束的进程(线程)、控制进程在运行过程中的状态转换。

<2>进程同步
进程是以异步方式运行的，并以人们不可预知的速度向前推进，为了使多个进程能够有条不紊地运行，系统中必须设置进程同步机制。
1)进程互斥方式(加锁)
对临界资源的访问

2)进程同步方式(信号量)
在相互合作完成共同任务的各个进程(线程)间，由同步机构对他们执行顺序加以协调。

<3>进程通讯
当相互合作的进程(线程)处于同一计算机系统时，通常在它们之间是采用直接通讯的方式，即由源进程利用发送命令直接将消息挂到目标进程的消息队列上，由目标进程利用接收命令从消息队列中取出消息。

<4>调度
在后备队列上等待的每个作业多需要经过调度才能执行。
1)作业调度

2)进程调度

2、存储器管理功能
1)内存分配
静态分配：作业的内存空间在装入时确定，装入后的运行期间不允许作业在申请新的内存空间，也不允许作业在内存中“移动”；
动态分配：作业所要求的基本内存空间也是在装入时确定的，但允许作业在运行过程中继续申请新的附加内存空间，也允许作业在内存中“移动”。

2)内存保护
确保每道用户程序都只在自己的内存空间内运行，彼此互不干扰。不允许用户程序访问操作系统的程序和数据。

3)地址映射
每个程序的地址都是从"0"开始的，程序中的其他址都是相对于起始地址计算的。"地址空间"、"逻辑地址/相对地址"
                                                                       "内存空间"、"物理地址"
存储器管理必须提供地址映射功能，将地址空间中的逻辑地址转换为内存空间中与之对应的物理地址。

4)内存扩充
存储器管理中的内存扩充并非是扩大物理内存的容量，而是借助虚拟存储技术，从逻辑上去扩充内存容量。

3、设备管理功能

	
1、进程的特征与状态
<1>进程的特征
为了使程序能并发执行(执行结果不出错)，且为了对并发执行的程序加以描述和控制，引入了进程的概念。
1)结构特征
通常程序是不能并发执行的，为了使程序能独立运行，要配置一进程控制块PCB，程序段、数据段和PCB三部分构成了进程的实体。
许多情况下所说的进程，实际上是指进程实体，所谓创建/撤销进程，实质上是创建/撤销进程实体中的PCB。

2)动态性
进程的实质是进程实体的一次执行过程，因此进程具有一定的生命周期。动态性表现在，它由创建而产生、由调度而执行、由撤销而消亡。

3)并发性
指多个进程实体同存于内存中，且能在一段时间内同时运行。而程序(没有建立PCB)是不能并发执行的。

4)独立性
指进程实体是一个能独立运行、独立分配资源和独立接受调度的基本单元。

5)异步性


第二章 进程管理
2.5 进程通信
进程间的互斥和同步，由于其所交换的信息量少而被归结为低级通信。
高级进程通信，用户可以直接利用操作系统所提供的一组通信命令高效地传递大量数据的一种通信方式。操作系统隐藏了进程间通信的实现细节(对用户是透明的)。

2.5.1 进程通信的类型
一、共享存储器系统
相互通信的进程共享某些数据结构或共享存储区，进程之间通过这些空间进行通信。
1、基于共享数据结构的通信方式
要求进程公用某些数据结构，来实现进程间的信息交换。  //低效，只适合传递少量的数据          

2、基于共享存储区的通信方式
为了传输大量数据，在存储器中划出了一块共享存储区，各个进程可通过对共享存储区中数据的读写来实现通信。  //属于高级通信
进程在通信前，先向系统申请获得共享存储区中的一个分区。

二、消息传递系统
是当前应用最为广泛的一种进程间通信机制，通过格式化的消息为单元实现进程间消息交换。
程序员直接利用操作系统提供的一组通信命令(原语)，不仅能实现大量数据的传递，而且还隐藏了通信的实现细节，使通信过程对用户是透明的。
//是一种高级通信方式，又因其实现方式的不同分为直接通信方式和间接通信方式两种。

三、管道通信
用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件，又叫pipe文件。

2.5.2 消息传递通信的实现方法
一、直接通讯方式
发送进程利用OS所提供的发送命令，直接把消息发送给目标进程。此时要求发送进程和接收进程都以显示方式提供对方的标识符。

二、间接通信方式
指进程之间的通信需要通过作为共享数据结构的实体。该实体用来暂存消息，接收进程则从该实体中取出对方发送给自己的消息。通常把这种中间实体称为信箱。
1、利用信箱通信方式，既可以实时通信，又可实现非实时通信。
2、系统为信箱通信提供了若干条原语，分别用于信箱创建、撤销和消息发送、接收等。

2.5.3 消息传递系统实现中的若干问题
一、通信链路
1、单机系统：发送进程无须明确提出建链请求，只需利用系统提供的发送命令(原语)，系统会在佛那个地为之建立一条链路。
2、网络通信：发送进程在通信之前要显示的建立链接的命令(原语)请求系统为之建立一条通信链路；在链路使用完后，也用显示方式拆除。

连接方式：
<1>点到点连接通信链路
<2>多点连接链路

通信方式：
<1>单向通信链路
<2>双向链路

通信链路容量的不同：
<1>无容量通信链路：链路上没有缓冲区，因而不能暂存任何消息
<2>有容量通信链路：链路上设置了缓冲区，能够暂存消息。缓冲区数目越多，通信链路的容量越大。

二、消息的格式
通常把一个消息分为消息头和消息正文两部分。消息头包含消息在传输中所需的控制信息。

三、进程同步方式

2.5.4 消息缓冲队列通信机制
//广泛应用于本地进程之间的通讯中。

2.6 线程(Threads)
一、线程的基本概念
1、线程的引入
操作系统引入进程的目的是为了多个程序能并发执行，以提高资源利用率和系统吞吐量；
操作系统引入线程的目的是为了减少程序在并发执行时所付出的时空开销，使得操作系统具有更好的并发性。

进程切换付出较大的时空开销，因此，系统中所设置的进程数目不宜过多，进程切换频率不宜过高。

2、线程与进程的比较
传统进程相当于只有一个线程的任务；引入进程后的操作系统中，通常一个进程都拥有若干个线程。

<1>调度
线程作为调度和分派资源的基本单元；进程作为拥有资源的基本单元。
把传统进程的两个属性分开，使线程基本上不拥有资源，从而就可以显著地提高系统的并发程度。

在同一进程中，线程的切换不会引起进程的切换；但从一个进程中的线程切换到另一个进程中的线程时，将会引起进程的切换。

<2>并发性

<3>拥有资源
线程自己不拥有系统资源(也有一点必不可少的资源)，但它可以访问其隶属进程的资源(进程的代码段、数据段、所拥有的系统资源)。

<4>系统开销
线程切换仅需保存和设置少量寄存器内容，不涉及存储器管理方面的操作。
/**********************************************************************************/
？？？(CPU有多少个寄存器，够给这些线程保存数据？？？)
补充说明：
如何理解"每个线程都有它自己的一组CPU寄存器和它自己的堆栈"???

这里说的一组寄存器不是物理上的，而是逻辑上的。
每个线程都需要有一块地址用来做线程让出CPU所有权时保存cpu各个寄存器的值;在线程重新拥有cpu的时候用于恢复运行状态。

CPU是只有一组，不过切换到自己的时候就把堆栈中保存的之前的值又放到寄存器中。

/**********************************************************************************/
一个进程中的多个线程具有相同的地址空间，在同步和通信的实现方面线程也比进程容易。

3、线程的属性
<1>轻型实体。线程只有一点保证其独立运行的资源，如：
用于控制线程运行的线程控制块TCB；
指示被执行指令序列的程序计数器PC；
保留局部变量、少数状态参数、返回地址等的一组寄存器和堆栈。

4、线程的状态
<1>寄存器状态
<2>堆栈：堆栈中通常保存有局部变量和返回地址
<3>线程运行状态

5、线程的创建和终止

6、多线程OS中的进程
进程拥有多个线程并未它们提供资源，但此时的进程就不再作为一个执行的实体。
因此，所谓的进程处于执行状态，实际上是指该进程中的某线程正在执行。
对进程施加的与进程状态相关的操作，也对其线程起作用。

二、线程间的同步和通信
1、互斥锁(mutex)
操作互斥锁的时间和空间开销都比较低，因而适合于高频率使用的关键共享数据和程序段。
unlock  lock  
Trylock

2、条件变量  //为了解决互斥锁的死锁问题
每一个条件变量通常都与一个互斥锁一起使用。单纯的互斥锁用于短期锁定，主要保证对临界区的互斥进入；而条件变量则用于线程的长期等待，直到所等待的资源成为可用资源。

3、信号量机制
<1>私用信号量  //属于某个特定进程，OS并不知道其存在
当某线程需要利用信号量来实现同一进程中各线程之间的同步时，可调用创建信号量的命令来创建一个私用信号量。

<2>公用信号量  //供所有进程使用，由OS分配空间并进行管理，也称为系统信号量
公用信号量为实现不同进程间或不同进程中各个线程之间的同步而设置的。

相对于私用信号量，公用信号量是一种较为安全的同步机制。

三、线程同步的实现方式
1、内核支持线程
无论是用户进程还是系统进程，它们的创建、撤销、切换，都是在操作系统内核的支持下运行的，与内核紧密相关的。
主要缺点是：对于用户线程切换而言，其模式切换的开销较大，在同一个进程中，从一个线程切换到另一个线程时，需要从用户态转到内核态进行。

2、用户级线程
仅存在于用户空间中，对于这种线程的创建、撤销、线程间的同步与通信等功能，都无需利用操作系统调用来实现。
























































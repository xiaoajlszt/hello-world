re(regex)

一、re模块函数
compile(pattern, flags=0) //使用任何可选的标记来编译正则表达式的模型，然后返回一个正则表达式对象

二、re模块函数和正则表达式对象的方法
1、match(pattern，string，flags=0) 
尝试使用带有可选的标记的正则表达式的模式来匹配字符串。如果匹配成功，就返回匹配对象；如果失败，就返回None。

2、search(pattern，string，flags=0) 
使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果失败，则返回None。

3、findall(pattern，string [, flags])
查找字符串中所有（非重复）出现的正则表达式模式，并返回一个匹配列表。

---------------------------------------------------------------------------------------

1.1 简介和动机
1、当设计模式时，全部使用术语“匹配”，按照python如何完成模式匹配的方式来区分“搜索”和“匹配”：
<1>搜索(searching)：在字符串任意部分中搜索匹配的模式；使用search()函数
<2>匹配(matching)：判断一个字符串能否从起始处全部或者部分地匹配某个模式。使用match()函数

1.2 特殊符号和字符
re1|re2  匹配正则表达式re1或者re2
.      匹配任何除\n之外的单一字符
[...]  匹配来自字符集的任意单一字符
[^...] 不匹配此字符集中出现的任何一个字符
(*|+|?|{})?  用于匹配上面频繁出现/重复出现符号的非贪婪版本
(...)  匹配封闭的正则表达式，然后另存为子组
\d     匹配任何十进制数，同[0-9]
\w     匹配任何字母数字字符，同[A-Za-z0-9_]
\s     匹配任何空格字符，同[\n\t\r\v\f]
\b     匹配任何单词边界     \bThe\b
\N     匹配以保存的子组N
\c     逐字匹配任何特殊字符c，即按照字面匹配，不匹配特殊含义
\A(\Z) 匹配字符串的起始(结束),与^ $一致

http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html
(?:...)   表示一个匹配不用保存的分组
(?P<name>...)   分组，除了原有的编号外再指定一个额外的别名   (?P<id>abc){2}      abcabc
(?P=name)    引用别名为<name>的分组匹配到的字符串         (?P<id>\d)abc(?P=id)   1abc1
(?#...)   #后的内容将作为注释被忽略                       abc(?#comment)123      abc123

不消耗字符串内容：
(?=...)   之后的字符串内容需要匹配表达式才能成功          a(?=\d)                后面是数字的a
(?!...)   之后的字符串内容需要不匹配表达式才能成功        a(?!\d)                后面不是数字的a
(?<=...)  之前的字符串内容需要匹配表达式才能成功          (?<=\d)a               前面是数字的a
(?<!...)  之前的字符串内容需要不匹配表达式才能成功        (?<!\d)a               前面不是数字的a

(?(id/name)Y|N)  如果编号为id/name的组匹配到字符，则需要匹配Y，否则需要匹配N    (\d)abc(?(1)\d|abc)     1abc、abcabc

1、使用择一匹配符号匹配多个正则表达式模式
at | home 匹配的字符串 at、home
|使得正则表达式能够匹配多个字符串。

2、匹配任意单个字符
.可以匹配除了换行符\n之外的任何字符。
要显示匹配一个点号本身，可以使用\.

3、从字符串起始或这结尾或者单词边界匹配









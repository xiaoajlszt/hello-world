6.1 简介
1、Python中数据库是通过适配器的方式进行访问的。
适配器是一个Python模块，使用它可以与关系数据库的客户端库接口相连。

2、Python ORM
访问数据库包括直接数据库接口访问和ORM访问两种。其中ORM访问方式不需要显示给出SQL命令。

Python应用(少量或没有SQL) -> Python ORM -> Python数据库适配器 -> RDBMS客户端库

6.2 Python的DB-API
DB-API是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性的访问。
该API为不同的关系数据库提供了一致性的接口，并且是不同数据库间移植代码变得更加简单。

1、模块属性
<1>一个兼容DB-API的模块必须定义以下全局属性：
apilevel		该字符串指明了模块需要兼容的DB-API最高版本
threadsafety	该整型值指明了模块的线程安全级别
				0- 不支持线程安全：线程间不能共享模块
				1- 最小化线程安全支持：线程间可以共享模块，但是不能共享连接
				2- 适度的线程安全支持：线程间可以共享模块和连接，但是不能共享游标
				3- 完整的线程安全支持：线程间可以共享模块、连接和游标
paramstyle		该字符串指明如何将参数与SQL语句进行整合，并最终传递给服务器中执行。
				该参数用于指定构建查询行或命令时使用的字符串替代形式。
connect()		connect()函数通过Connection对象访问数据库。兼容模块必须实现connect()函数，该函数创建并返回一个Connection对象。
				user 		用户名
				passwd		密码
				host		主机名
				database	数据库名
				dsn			数据源名
		可以使用包含多个参数的字符串(DSN)来传递数据库连接信息；也可以按照位置传递每个参数，或者使用关键字参数的形式传入。
		比如，使用ODBC/JDBC的API，需要使用DSN；如果直接使用数据库，则更倾向于使用独立的登录参数。很多数据库适配器不支持DSN。	
各种异常		

2、Connection对象
应用与数据库之间进行通信需要建立数据库连接。只有通过数据库连接才能把命令传递到服务器，并得到返回的结果。
当一个连接(连接池)建立后，可以创建一个游标，向数据库发送请求，然后从数据库中接收回应。

<1>Connection对象方法
Connection对象不需要包含任何数据属性，不过应当定义如下方法：
close()			关闭数据库连接
commit()		提交当前事务
rollback()		取消当前事务
cursor()		使用该连接创建(并返回)一个游标或类游标的对象
errorhandler()	作为给定连接的游标的处理程序

<2>如果数据库不支持事务处理，或启用了自动提交功能，commit()/rollback()方法都将无法使用。
对于不支持事务处理的数据库而言，只需要在方法中实现"pass"即可。

<3>如果RDBMS不支持游标，那么cursor()仍会返回一个尽可能模仿真实游标的对象。

<4>当完成数据库连接并关闭游标时，需要对所有操作执行commit()，并对连接执行close()。

3、Cursor对象
游标可以让用户提交数据库命令，并获得查询结果行。
Python DB-API游标对象总能提供游标的功能，即使是那些不支持游标的数据库。此时，如果你创建了一个数据库适配器，还必须要实现cursor对象。

<1>cursor的对象属性和方法
arraysize		使用fetchmany()方法时，一次取出的结果行数，默认为1
connection		创建此游标的连接(可选)
description		返回游标活动状态(7元组,只有name和typecode是必须的)
lastrowid		上次修改的行ID(可选，如果不支持行ID，则返回None)
lowcount		上次execute*()方法处理或影响的行数
callproc(func[,args])	调用存储过程
close()					关闭游标
execute(op[,args])		执行数据库查询或命令
。。。

4、类型对象和构造函数

5、关系数据库

6、数据库和Python：适配器
<1>对于每种支持的数据库，Python都有一个或多个适配器用于连接Python中的目标数据库系统。
我们需要做的事情就是挑选出最合适的适配器。
我们需要负责编写更高级别的代码，比如线程管理和数据库连接池管理等。

<2>如果不希望有太多的交互操作，比如希望少写一些SQL语句或者尽可能少地参与数据库管理的细节，可以考虑ORM。

7、使用数据适配器的示例
cxn = MySQLdb.connect(user='root',passwd='root123') 
cxn.query('CREATE DATABASE test')
...
cxn.commit()		//commit()方法是可选的，因为MySQL默认开启了自动提交。
cxn.close()

8、数据库适配器示例应用
<1>移植到Python3
1)Python2和Python3最大的一个区别是print。2中它是一条语句；3中它是一个内置函数。
作为两者的替代，可以使用distutils.log.warn()函数。该函数在2和3中是一致的，我们将其重命名为printf()。

2)2中的内置函数raw_input()，在3中变更为input()。
比较麻烦的是2中也有一个input()函数，但是因为存在安全风险被3移除了。
我们将使用scanf()来调用该函数。

3)异常的变化
2： except Exception,instance
3:	except Exception as instance

4)基于C语言编写的主要MySQL-Python适配器(包名为MySQLdb)还没有移植到Python3中。
我们需要另一个MySQL适配器，称为MySQL Connection/Python，其包名为mysql.connector。
//需要pip3.6 install mysql-connector或者安装mysql-connector-python-2.1.6-1.el7.x86_64.rpm


6.3 ORM
如果你更愿意操纵Python对象而不是SQL查询，并且仍希望使用关系型数据库，那么你可能更倾向于使用ORM。

1、考虑对象，而不是SQL
将SQL语句进行了抽象化处理，将其实现为Python中的对象。
数据库表被转化为Python类，其中数据列作为属性，而数据库操作则会作为方法。

2、Python和ORM
















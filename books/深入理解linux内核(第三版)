1.5 Unix文件系统概述
一、Unix的每个进程都有一个当前工作目录，它属于进程执行上下文，标识出进程所用的当前目录。

二、硬链接和软链接
1、硬链接：
包含在目录中的文件名就是一个文件的硬链接，或简称链接。在同一目录或不同目录中，同一文件可以有几个链接，因此对应几个文件名。
<1>ln P1 P2 //创建一个新的硬链接，由路径名P1标识的文件创建一个路径名为P2的硬链接。
<2>限制：
- 不允许给目录创建硬链接。因为这可能把目录数变为环形图，从而就不可能通过名字定位一个文件；
- 只有在同一个文件系统中的文件之间才能创建链接。
Unix系统可能包含了多种文件系统，这些文件系统位于不同的磁盘或分区，用户也许无法知道它们之间的物理划分。

2、软链接(符号链接)
符号链接是短文件，这些文件包含有另一个文件的任意一个路径名。
路径可以指向位于任意一个文件系统的任意文件或目录，甚至可以指向一个不存在的文件。
<1>ln -s P1 P2  //创建一个路径名为P2的软链接，P2指向路径名P1。
当这个命令执行时，文件系统抽出P2的目录部分，并在那个目录下创建一个名为P2的符号链接类型的新项。
这个新文件包含路径名P1。这样，任何对P2的引用都可以被自动转成指向P1的一个引用。

3、保存在磁盘分区中的文件不管是什么类型都会给它分配一个称为索引节点的编号。
<1>硬链接就是多个文件名指向同一个索引节点，允许一个文件拥有多个有效的路径名。这样用户就可以建立硬链接到重要文件，防止误删等。
<2>只删除一个链接不会影响索引节点和其他链接，只有当最后一个链接被删除后，索引节点才会被删除。
<3>软链接类似与windows的快捷方式，它实际上是一个特殊的文本文件，其中包含另一个文件的位置信息。
删除原文件，会导致软链接失效。

4、ls -li   //-i显示文件的inode节点信息
35625 -rw-r--r--. 2 root root 0 11月  6 10:27 f1
35625 -rw-r--r--. 2 root root 0 11月  6 10:27 f2
13923544 lrwxrwxrwx. 1 root root 2 11月  6 10:27 f3 -> f1

可见，硬链接文件f2与目标文件f1的索引节点相同，软链接文件f3与目标文件的索引节点不相同。

三、文件描述符与索引节点
1、Unix对文件的内容和描述文件的信息给出了清楚的区分。除了设备文件和特殊文件系统文件外，每个文件都由字符序列组成。
<1>文件内容不包含任何控制信息，如文件长度或文件结束符等。
<2>文件系统处理文件需要的所有信息包含在一个名为索引节点(inode)的数据结构中。
每个文件都有自己的索引节点，文件系统用索引节点来标识文件。

2、索引节点提供如下属性：
- 文件类型
- 与文件相关的硬链接个数
- 以字节为单位的文件长度
- 设备标识符(即包含文件的设备的标识符)
- 在文件系统中标识文件的索引节点号
- 文件拥有者的UID
- 文件的用户组ID
- 几个时间戳(索引状态改变的时间、最后访问时间、最后修改时间)
- 访问权限和文件模式

四、访问权限和文件模式
1、用三种附加的标记：suid、sgid、sticky 来定义文件的模式。  

2、当文件由一个进程创建时，文件拥有者的ID就是该进程的UID；其用户组ID可以是进程创建者的ID，也可以是父母了的ID，取决于sgid标志位的值。

五、文件操作的系统调用


1.6 Unix内核概述



第12章 虚拟文件系统
1、虚拟文件系统所隐含的思想：
是把表示很多不同种类文件系统的共同信息放入内核；其中有一个字段或函数来支持Linux所支持的所有实际文件系统所提供的任何操作。
对所调用的每个读、写或其他函数，内核都能把它们替换成本地Linux文件系统、NTFS文件系统，或者文件所在的任何其他文件系统的实际函数。

2、几乎所有的Linux系统都使用了Ext2(第二扩展文件系统)。

12.1 虚拟文件系统的作用
1、虚拟文件系统也称为虚拟文件交换，是一个内核软件层，用来处理与Unix标准文件系统相关的所有系统调用。
其健壮性表现在能为各种文件系统提供一个通用的接口。
<1>VFS是用户的应用程序与文件系统实现之间的抽象层。
eg：cp /floppy/test /tmp/test  用户应用程序cp直接与VFS交互，不需要知道操作的文件系统类型。

2、VFS支持的文件系统可以划分为三种主要类型：
<1>磁盘文件系统
	这些文件系统管理在本地磁盘分区中可用的存储空间或者其他可以起到磁盘作用的设备。
<2>网络文件系统
	这些文件系统允许轻易地访问属于其他网络计算机的文件系统所包含的文件。
<3>特殊文件系统
	这些文件系统不管理本地或者远程磁盘空间。/proc文件系统是特殊文件系统的一个典型范例。

3、Unix的目录建立了一颗根目录为"/"的树，根目录包含在根文件系统中。其他所有的文件系统都被安装在跟文件系统的子目录中。
在Linux中这个根文件系统通常就是Ext2或Ext3类型。

12.2 通用文件模型(common file model)
1、VFS所隐含的主要思想在于引入了一个通用文件模型，这个模型能够表示所有支持的文件系统。
要实现每个具体的文件系统，必须将其物理组织结构转换为虚拟文件系统的通用文件模型。

2、通用文件模型由下列对象类型组成：
<1>超级块对象 superblock object
存放已安装文件系统的有关信息。对于基于磁盘的文件系统，这类对象通常对应于存放在磁盘上的文件系统控制块(filesystem control block)。
<2>索引节点对象 inode object
存放关于具体文件的一般信息。对于基于磁盘的文件系统，这类对象通常对应于存放在磁盘上的文件控制块(file control block)。
每个索引节点对象都有一个索引节点号，这个节点号唯一标识文件系统中的文件。
<3>文件对象 file object
存放打开文件与进程之间进行交互的有关信息。这类信息仅当进程访问文件期间存在于内核内存中。
<4>目录项对象 dentry object
存放目录项(也就是文件的特定名称)与对应文件进行链接的有关信息。每个磁盘文件系统都已自己特有的方式将该类信息存在磁盘上。
每个硬链接对应一个目录项对象。

3、VFS除了能为所有文件系统的实现提供一个通用的接口外，还具有另一个与系统性能相关的重要作用。
最近最常使用的目录项对象被放在所谓目录项高速缓存(dentry cache)的磁盘高速缓存中，以加速从文件路径名到路径分量的索引节点的转换过程。
<1>磁盘高速缓存(disk cache)属于软件机制，它允许内核将原本存在磁盘上的某些信息保存在RAM中，以便对这些数据的进一步访问能快速进行，不必慢速访问磁盘本身。
<2>磁盘高速缓存不同于硬件高速缓存或内存高速缓存，后两者都与磁盘或其他设备无关。
1)硬件高速缓存是一个快速静态RAM，它加快了直接对慢速动态RAM的请求。
2)内存高速缓存是一种软件机制，引入它是为了绕过内核内存分配器(slab分配器)。
<3>除了目录项高速缓存和索引节点高速缓存外，Linux还使用其他磁盘高速缓存。其中最重要的一种就是页高速缓存。

12.3 VFS的数据结构
每个VFS对象都存放在一个适当的数据结构中，其中包括对象的属性和指向对象方法表的指针。
1、超级块对象 super_block


第十八章 Ext2和Ext3文件系统
18.1 Ext2的一般特征
一、Ext2的特点：
1、当创建Ext2文件系统时，系统管理员可以根据预期的文件平均长度来选择最佳块大小(1024B--4096B)。
注：mke2fs格式化磁盘时可以设定block的大小。

2、当创建Ext2文件系统时，系统管理员可以根据在给定大小的分区上预计存放的文件数来选择给该分区分配多少个索引节点。有效利用磁盘空间。
注：mke2fs格式化磁盘时可以设置多少容量分配一个inode。

3、文件系统把磁盘分为组。每组包含存放在相邻磁道上的数据块和索引节点。
正是这种结构，使得可以用较少的磁盘平均寻道时间对存放在一个单独块组中的文件进行访问。

4、在磁盘数据块被实际使用之前，文件系统就把这些块预分配给普通文件。
因此，当文件大小增加时，因为物理上相邻的几个块已被保留，这就减少了文件的碎片。

5、支持快速符号链接。如果符号链接表示一个短路径名(小于等于60字符)，就把它存放在索引节点中，而不是通过读一个数据块进行转换。

6、inode的大小是128byte。

7、文件更新策略的谨慎实现将系统崩溃的影响减到最少。

8、在启动时支持对文件系统的状态进行自动的一致性检查。

9、支持不可变的文件和仅追加的文件。

10、块片(block fragmentation)
计算机应用常常处理大文件，系统管理员对磁盘的访问通常也选择较大的块。因此，在大块上存放小文件就会浪费很多磁盘空间。
可以通过把几个文件存放在同一块的不同片上来解决。

11、透明地处理压缩和加密文件
这些选项将允许用户透明地在磁盘上存放压缩和加密文件版本。

12、逻辑删除
一个undelete选项将允许用户在必要时很容易恢复以前已删除的文件内容。

13、日志
日志避免文件系统在被突然卸载时对其自动进行的耗时检查。

18.2 Ext2磁盘数据结构
1、任何Ext2分区中的第一个块从不受Ext2文件系统的管理，因为这一块是为分区的引导扇区所保留的。

2、Ext2分区的其与部分分成块组(block group)。
<1>块组结构：
	
	超级块   组描述符     索引节点表   数据块
    一个块     n个块      一个块        一个块         n个块     n个块

可见，一些数据结构正好可以放在一块中，而另一些可能需要更多的块。

<2>所有块组大小相同，并被顺序存放。

<3>内核尽可能把属于一个文件的数据库存放在同一块组中，所以块组减少了文件的碎片。

<4>可见，超级块与组描述符(一组块组描述符的拷贝)被复制到每个块组中。
只有块组0中所包含的超级块和组描述符才由内核使用。

<5>块组的个数取决于分区大小和块的大小。
1)主要限制在于块位图，因为块位图必须存放在一个单独的块中。块位图用来标识一个组中块的占用情况。
所以每个组中至多可以有8*b个块，b是以字节为单位的块大小。 //eg b=1024byte,那么块位图能表示8*1024个块的占用情况。每一位表示一个块。
因此，块组的总数大约是 s/(8*b) ,s是分区所包含的总块数。

eg： 32GB的Ext2分区，块大小为4KB。因此每个块能描述8*4KB个数据块，也就是32KB*4KB(128M)磁盘空间。
因此，块组数=32G/128M = 256个

3、超级块
<1>Ext2在磁盘上的超级块存放在一个ext2_super_block结构中。
<2>字段：
文件系统中索引节点个数
          块的个数
		  块的大小
		  每个块组中 块的个数，片数，索引节点数
		  一些磁盘块保留给超级用户。即使普通用户没有空闲块可用时，系统管理员也可以用这些块继续使用Ext2文件系统。
		  系统启动时自动检测Ext2文件系统。
		  
4、组描述符合位图
<1>每个块都有自己的组描述符，它是一个ext2_group_desc结构。当分配新索引节点和数据块时，确保在最合适的块中给每个数据结构进行分配。
<2>位图是位的序列，0值表示对应的索引节点块或数据块是空闲的；1表示占用。

5、索引节点表
<1>由一连串连续的块组成，其中每个块包含索引节点的一个预定义号。
索引节点表的第一个块的块号存放在组描述符的bg_inode_table字段中。

<2>所有索引节点的大小相同，即128字节。一个1024字节的块可以包含8个索引节点。

<3>一个组中索引节点的总数存放在超级块的s_inodes_per_group字段中。
索引节点表占用的块数 = s_inodes_per_group / 每块中索引节点数

<4>每个Ext2索引节点为ext2_innode结构。

6、各种文件类型如何使用磁盘块
Ext2所认可的文件类型(普通文件、管道文件等)以不同的方式使用数据块。有些文件不存放数据，因此根本不需要数据块。
0 未知
1 普通文件
2 目录
3 字符设备
4 块设备
5 命名管道
6 套接字
7 符号链接

<1>普通文件
普通文件只有在开始有数据时才需要数据块。普通文件刚创建时是空的，并不需要数据块。

<2>目录
Ext2以一种特殊的文件实现了目录，这种文件的数据块把文件名和相应的索引节点号存放在一起。




18.3 各种文件类型如何使用磁盘块






















11.1 什么是可扩展性
1、性能：响应时间。

2、容量：一定时间内能够完成的工作量。
系统的最大吞吐量不等同于容量。如果达到最大吞吐量，则性能会下降。
系统的真实容量定义为在保证可接受的性能的情况下能够达到的吞吐量。

3、可扩展性
划算的等同提升。
可扩展性是当增加资源以处理负载和增加容量时系统能够获得的投资产出率。

<1>可扩展性定律(USL)
线性扩展的偏差可以通过两个因素来建立模型:无法并发执行的一部分工作;需要交互的另一部分工作。

<2>可扩展型的重要原则:在系统内尽量避免串行化和交互。

<3>当工作负载和其所运行的系统存在微妙的关系时，USL理论可能失效。
有保留地使用模型，并且在使用中验证你的发现。

11.2 扩展MySQL
垂直扩展/向上扩展:购买更过强悍的机器。
水平扩展/向外扩展:将任务分配到多台计算机上。
向内扩展:清理、归档一些很少或者不需要的数据。

1、规划可扩展性
<1>应用的功能完成了多少？
<2>预期的最大负载是多少？
<3>如果依赖系统的每个部分来分担负载，在某个部分失效时会发生什么？

2、为扩展赢得时间
<1>性能优化
<2>购买性能更强的硬件

3、向上扩展
<1>从复杂性的成本来说，向上扩展比向外扩展更简单：
1)单台服务器比多台服务器更加容易维护和开发，能显著节省开销。
2)单台服务器上备份和恢复同样很简单，因为无需关心一致性或者哪个数据更权威。

<2>向上扩展不是无限的，单服务器应用通常会首先达到读限制，特别是执行复杂的读查询时。
类似这样的查询在MySQL内部是单线程的。

<3>如果系统确实有可能碰到可扩展性的天花板，并且会导致严重的业务问题，那就不要无限制地做向上扩展的规划。

4、向外扩展
向外扩展策略可以划分为：复制、拆分、数据分片。

<1>





































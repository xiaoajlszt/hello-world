一、Makefile介绍
Makefile文件告诉make命令需要怎样去编译和链接程序:
<1>如果这个工程没有编译过，那么所有的c文件都要编译并链接；
<2>如果这个工程的某几个c文件被修改，那么只编译被修改的c文件，并链接目标程序；
<3>如果这个工程的某几个头文件被修改，那么需要编译引用了这几个头文件的c文件，并链接目标程序。

1. Makefile的规则
target... : prerequisites ...
	command
	...
	...

target 可以是一个目标文件(.o)，也可以是一个可执行文件，还可以是一个标签(label)。
prerequisites 是要生成target所需要的文件或目标。
command 是make需要执行的任意linux命令。一般来说，make会以UNIX的标准Shell，也就是/bin/sh来执行命令。

<1>这是一个文件的依赖关系，也就是说，target依赖于prerequisites，target的生成规则定义在command中。
<2>如果prerequisites中存在比target新的文件，command所定义的命令就会被执行。

2. 一个示例
edit : main.o kbd.o command.o display.o \
		insert.o search.o files.o utils.o
	cc -o edit main.o kbd.o command.o display.o \
		insert.o search.o files.o utils.o

main.o : main.c defs.h
	cc -c main.c
kbd.o : kbd.c defs.h command.h
	cc -c kbd.c
command.o : command.c defs.h command.h
	cc -c command.c
display.o : display.c defs.h buffer.h
	cc -c display.c
insert.o : insert.c defs.h buffer.h
	cc -c insert.c
search.o : search.c defs.h buffer.h
	cc -c search.c
files.o : files.c defs.h buffer.h command.h
	cc -c files.c
utils.o : utils.c defs.h
	cc -c utils.c
clean :
	rm edit main.o kbd.o command.o display.o insert.o \
		search.o files.o utils.o

<1>反斜杠用于换行。
<2>command必须要以Tab键作为开头。
<3>依赖关系的是指就是说明目标文件是由哪些文件生成的。
make会比较target和prerequisites文件的修改日期，如果prerequisites文件的日期比target新，或者target不存在的话，make就会执行command。
<4>clean不是一个文件，它只是一个动作名称，冒号之后没有依赖文件。make不会自动去找他的依赖性，也就不会自动执行其后所定义的命令。
如果需要执行其后的命令，就要在make命令中显式地指出这个lable的名字。
这样，我们可以在Makefile中定义不用编译或是编译无关的命令，比如：程序打包、程序备份等。

3. make是如何工作的
<1>make会在当前目录下找名称叫"Makefile"或"makefile"的文件。
<2>找到第一个target作为最终的target。eg:edit。
<3>如果edit不存在，或是edit所依赖.o文件比edit新，就会执行command重新生成edit。
<4>如果edit所依赖的.o不存在，或是.o所依赖的文件比.o新，就会找到target为.o，执行command重新生成.o文件。
<5>像clean这种，没有被第一个target直接或间接关联，它的command将不会被自动执行。

于是在我们编程中，如果这个工程已被编译过了，当修改了其中一个源文件，比如file.c，
那么根据依赖性，file.o会被重编译，于是file.o文件是最新的，file.o文件的修改时间要比edit要新，所以edit也会被重新链接了。

而如果改变了command.h，那么，kdb.o、command.o和files.o都会被重编译，并且，edit会被重新链接。

4. Makefile中使用变量
<1>Makefile的变量可以理解成C语言中的宏。
<2>eg: 
objects = main.o kbd.o command.o display.o \
	insert.o search.o files.o utils.o
于是，就可以很方便地在Makefile中用$(objects)/${objects}来使用这个变量了。

5. 让make自动推导
<1>GNU的make可以自动推导文件以及 文件依赖关系后面的命令(command)。
只要make看到一个.o文件，它就会自动把.c文件加入依赖关系中，并且cc -c XX.c也会被推导出来。
//-c 编译或汇编源文件，但是不作链接。编译器输出对应于源文件的目标文件。

<2>新的Makefile
objects = main.o kbd.o command.o display.o \
	insert.o search.o files.o utils.o

edit : $(objects)
	cc -o edit $(objects)

main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h

.PHONY : clean
clean :
	rm edit $(objects)

<3>这种方法，也就是make的隐晦规则。

6. 另类风格的Makefile

7. 清空目标文件(target)的规则
<1>每个Makefile中都应该写一个清空target(.o文件和可执行文件)的规则。不仅便于重编译，也利于保持文件的清洁。
<2>eg:
.PHONY : clean
clean :
    -rm edit $(objects)
<3>clean放在Makefile的末尾。

8. Makefile里有什么？
<1>显示规则。
<2>隐晦规则。
<3>变量。当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。
<4>文件指示。在一个Makefile中引用另一个Makefile；指定Makefile中有效部分；定义一个多行的命令。
<5>注释。#，如果需要在Makefile中使用#，可以使用反斜杠转义。\#
<6>Makefile中的命令必须以Tab键开始。

9. Makefile的文件名
<1>默认的情况下，make命令会在当前目录下按顺序找寻文件名为"GNUmakefile"、"makefile"、"Makefile"的文件。
最好使用"Makefile"这个文件名，因为，这个文件名第一个字符为大写，这样有一种显目的感觉。
最好不要用"GNUmakefile"，这个文件是GNU的make识别的。
有另外一些make只对全小写的"makefile"文件名敏感，但是基本上来说，大多数的make都支持"makefile"和"Makefile"这两种默认文件名。

<2>可以使用别的文件名来书写 Makefile，如果要指定特定的Makefile，可以使用make的-f和--file参数。
eg: make -f Make.Linux 或 make --file Make.AIX。

10. 引用其他Makefile
<1>在Makefile中使用include关键字可以把其他的Makefile包含进来，被包含的Makefile会展开在包含位置。
<2>include filename //filename可以包含路径和通配符。
<3>make命令开始时，会寻找include所指出的其他Makefile。如果文件都没有指定绝对路径或是相对路径的话，make的寻找顺序：
- 当前目录
- make的-I/--include-dir参数指定的目录
- <prefix>/include。一般是/usr/local/bin或/usr/include。

11. 环境变量MAKEFILES
<1>如果定义了环境变量MAKEFILES，那么，make会把这个变量中的值做一个类似于include的动作。这个变量中的值是其它的Makefile，用空格分隔。
它和include不同的是：
- 从这个环境变量中引入的Makefile的"目标"不会起作用；
- 如果环境变量中定义的文件发现错误，make也会不理。

<2>建议不要使用这个环境变量，因为只要这个变量一被定义，所有的Makefile都会受到它的影响，这绝不是你想看到的。
在这里提这个事，只是为了告诉大家，也许有时候你的Makefile出现了怪事，那么你可以看看当前环境中有没有定义这个变量。

12. make的工作方式
<1>读入所有的Makefile;
<2>读入被include的其它Makefile;
<3>初始化文件中的变量。
<4>推导隐晦规则，并分析所有规则。
<5>为所有的目标文件创建依赖关系链。
<6>根据依赖关系，决定哪些目标要重新生成。
<7>执行生成命令。

1-5 步为第一个阶段， 6-7 为第二个阶段。
第一个阶段中，如果定义的变量被使用了，那么，make会把其展开在使用的位置。
但make并不会完全马上展开，make使用的是拖延战术。如果变量出现在依赖关系的规则中，那么仅当这条依赖被决定要使用了，变量才会在其内部展开。

二、书写规则
1. 规则举例

2. 规则语法

3. 在规则中使用通配符
<1>make支持三个通配符，和Unix相同：
*
?
~	~/test 当前用户的$HOME下的test目录。~allen/test 用户allen宿主目录下的test目录。
$?

4. 文件搜索

5. 伪目标
<1>伪目标不是一个文件，只是一个标签，所以make无法生成它的依赖关系和决定它是否要执行。只有通过显式地指明这个目标才能让它生效。
//伪目标取名不能喝文件名重复，否则就失去了伪目标的意义了。

<2>为了避免和文件名重复的情况，可以使用特殊标记".PHONY"来显式地声明一个目标是"伪目标"。
- 向make说明，不管是否有这个文件，这个目标就是"伪目标"。
- 只要有这个声明，不管是否有clean文件，要运行clean这个目标，只能通过make clean。

eg 1:
clean:
	@echo "test" 

如果存在clean文件，输出：make: “clean”是最新的。//这是比较make和依赖文件的结果。

eg 2:
.PHONY clean
clean:
	@echo "test" 

如果存在clean文件，输出：test

//显然eg 2中的结果是符合预期的。

<3>伪目标一般没有依赖文件。但是，也可以为伪目标指定所依赖的文件。
伪目标同样可以作为"默认目标"，只要将其放在第一个。

一个示例就是，如果你的 Makefile 需要一口气生成若干个可执行文件，但你只想简单地敲一个 make 完事，并且，所有的目标文件都写在一个 Makefile 中，那么你可以使用“伪目标”这个特性:
all : prog1 prog2 prog3
.PHONY : all

prog1 : prog1.o utils.o
	cc -o prog1 prog1.o utils.o

prog2 : prog2.o
	cc -o prog2 prog2.o

prog3 : prog3.o sort.o utils.o
	cc -o prog3 prog3.o sort.o utils.o

Makefile中的第一个目标会被作为其默认目标。我们声明了一个"all"的伪目标，其依赖于其它三个目标。
由于默认目标的特性是，总是被执行的，但由于"all"又是一个伪目标，伪目标只是一个标签不会生成文件，所以不会有"all"文件产生。
于是，其它三个目标的规则总是会被决议。也就达到了我们一口气生成多个目标的目的。

".PHONY : all"声明了"all"这个目标为"伪目标"。显式写出是一个好习惯。
注：这里的显式".PHONY : all"不写的话一般情况也可以正确的执行，这样 make 可通过隐式规则推导出，"all"是一个伪目标，
执行 make 不会生成"all"文件，而执行后面的多个目标。

<4>从上面的例子我们可以看出，目标也可以成为依赖。所以，伪目标同样也可成为依赖。
.PHONY : cleanall cleanobj cleandiff

cleanall : cleanobj cleandiff
	rm program

cleanobj :
	rm *.o

cleandiff :
	rm *.diff

可以输入make cleanall\make cleanobj\makecleandiff达到清除不同种类文件的目的。


一、基础
0. 报错"Makefile:1: *** 遗漏分隔符 。 停止。"
每个shell命令的开头必须是tab，不能用空格。

1. make命令的选项
<1>-n / --just-print
make执行时，带入make参数"-n"或"--just-print"，那么其只是显示命令，但不会执行命令。用于调试makefile。

<2>-s / --slient
全面禁止命令的显示。

<3>-i / --ignore-errors
忽略Makefile中所有命令的错误。

<4>-k / --keep-going
如果某规则中命令出错了，那么就终止该规则的执行，但继续执行其他规则。

2. Makefile控制显示的选项
通常make会把其要执行的命令行在执行前输出到屏幕上。

<1> @
当我们用@字符在命令行前，那么，这个命令将不被make显示出来。

eg: @echo 正在编译XXX模块...
输出：
"正在编译XXX模块..."，但不会输出命令；
     
eg: echo 正在编译XXX模块...
输出：
"echo 正在编译XXX模块..." 
"正在编译XXX模块..."

<2> -
命令前加-  //忽略该命令的出错

3. 命令执行
当依赖目标新于目标时，需要更新当前规则的目标，make会一条一条执行其后的命令。

<1>如果要让上一条命令的结果应用在下一条时，需要使用分号分隔这两条命令。
cd 命令 ; XX 命令 //写在一行上，用分号隔开

exec:
    cd /home/123
    pwd

//cd 没有作用，pwd打印出当前的makefile目录

exec:
    cd /home/123; pwd

//cd 起作用，pwd打印出/home/123

4. 命令出错
make会检查每条命令的返回码，如果有一个规则的某个命令出错了(命令退出码非零)，那么make就终止执行当前规则，这就有可能终止所有规则的执行。

<1>忽略命令的出错
makefile命令前加-  //表示不管命令出不出错都认为是成功的

<2>全局方法
make -i / make --ignore-errors
Makefile中所有命令都会忽略错误。

<3>如果一个规则是以.IGNORE作为目标的，那么这个规则中的所有命令将会忽略错误。

<4>make -k / make --keep-going
如果某规则中命令出错了，那么就终止该规则的执行，但继续执行其他规则。

5. 嵌套执行make
大型工程中，把不同模块或是不同功能的源文件放在不同的目录中，并在每个目录中都书写该目录的Makefile，这样有利于让makefile变得简洁。

<1>总控Makefile
subsystem:
    cd subdir && $(MAKE)

其等价于：
subsystem:
    $(MAKE) -C subdir  // -C subdir 转到subdir目录下，执行那里的Makefile。

总控Makefile的变量可以传递到下级的Makefile中(上层的变量会以系统环境变量的方式传递到下层的Makefile中，如果你显示的声明)，
但是不会覆盖下层的makefile中所定义的变量，除非指定了-e参数。

<2>传递变量到下级的makefile中
export <variable ...>;
export ;//传递所有变量

<3>不让某些变量传递到下级的makefile中
unexport <variable ...>;

<4>系统变量SHELL、MAKEFLAGS 不管是否export，总是会被传递到下层makefile中的。
MAKEFLAGS:包含了make的参数信息。

<5>系统变量MAKELEVEL
如果make有一个嵌套执行的动作，这个变量会记录我们当前Makefile的调用层数。

二、变量的使用
1. 变量中的变量
<1> = 
左侧是变量，右侧是变量的值，右侧变量的值可以定义在文件的任何一处，也就是说，右侧中的变量不一定非要是已定义好的值，其也可以使用后面定义的值。

eg:
foo = $(bar)
bar = $(ugh)
ugh = Huh?

all:
	echo $(foo)
我们执行“make all”将会打出变量 $(foo) 的值是“Huh?”

<2> :=
这种方法，前面的变量不能使用后面的变量，只能使用前面已定义好了的变量。

eg: 
y := $(x) bar
x := foo
那么， y 的值是“bar”，而不是“foo bar”。



2. 文件名操作函数
<1> $(addprefix <prefix>,<names...>)
• 名称：加前缀函数——addprefix。
• 功能：把前缀 <prefix> 加到 <names> 中的每个单词。
• 返回：返回加过前缀的文件名序列。
• 示例： $(addprefix src/,foo bar) 返回值是“src/foo src/bar”。

<2> $(addsuffix <suffix>,<names...>)
• 名称：加后缀函数——addsuffix。
• 功能：把后缀 <suffix> 加到 <names> 中的每个单词后面。
• 返回：返回加过后缀的文件名序列。
• 示例： $(addsuffix .c,foo bar) 返回值是“foo.c bar.c”。

<3> $(basename <names...>)
• 名称：取前缀函数——basename。
• 功能：从文件名序列 <names> 中取出各个文件名的前缀部分。
• 返回：返回文件名序列 <names> 的前缀序列，如果文件没有前缀，则返回空字串。
• 示例： $(basename src/foo.c src-1.0/bar.c hacks) 返回值是“src/foo src-1.0/bar hacks”。

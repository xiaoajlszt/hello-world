一、标准函数
1、标准I/O函数fgets
2、fork：调用fork创建一个新进程，新进程是调用进程的一个副本，调用进程为父进程。fork对父进程返回子进程的进程ID，对子进程返回0。
         也就是说fork 被调用一次，但返回两次。
3、execlp：
4、waitpid:父进程调用waitpid实现等待子进程终止，其参数指定要等待的进程。函数返回子进程的终止状态（status变量）。

5、不带缓冲的I/O函数：open\read\write\lseek\close。不带缓冲值的是每个read和write都调用内核中的一个系统调用。
<1>每个打开文件都有一个与其关联的“当前文件偏移量”（非负整数），用以度量从文件开始处计算的字节数。通常，读写操作都是从当前文件偏移量处开始，
   并使偏移量增加所读写的字节数。可以调用lseek显式地为一个打开文件设置偏移量。
   * 打开文件时，默认偏移量为0
   * 对于普通文件，写操作从文件的当前偏移量处开始。如果打开该文件时指定了O_APPEND选项，则每次写操作之前，将文件偏移量设置文件的当前结尾处。
   在一次成功写之后，该文件偏移量增加实际写的字节数。文件偏移量可以大于文件的当前长度，在这种情况下，对该文件的下一次写将加长该文件。
   * 读操作从文件的当前偏移量处开始，在成功返回前，该偏移量将增加实际读到的字节数。
   *
   
二、程序&进程&线程
1、进程：实例
   线程：uc/ua等app
2、线程：一个进程内的所有线程共享同一地址空间、文件描述符、栈以及与进程相关的属性。因为它们能访问同一存储区，所以各线程在访问共享数据时需要采取同步措施以避免不一致性。
         与进程相同，线程也用ID标识。线程ID只在它所属的进程内起作用。
		 控制线程的函数与控制进程的函数类似，但另有一套。
		 
三、
1、文件描述符：file descriptor 通常是一个小的非负整数，内核用以标识一个特性进程正在访问的文件。
               当内核打开一个现有文件或创建一个新文件时，它都会返回一个文件描述符。在读、写文件时使用该描述符。
			   当运行一个新程序（新进程）时，所有的shell都为其打开3个文件描述符，即标准输入0、标准输出1、标准错误2。
2、出错处理：errno

3、OPENMAX：进程最大打开文件数，文件描述符的范围 0--OPENMAX-1

4、时间：
<1>日历时间：1970.01.01:00:00:00以来的所经历的秒数。
<2>进程时间：也叫CPU时间，用以度量进程使用的中央处理器资源。进程时间以始终滴答计算，每秒曾经取为50/60/100个时钟滴答。
 * 时钟时间：也叫墙上时钟时间，它是进程运行的时间总量，与系统中同时运行的进程数有关。（本书默认没有其他进程）
 * 用户CPU时间：执行用户指令所用的时间量。
 * 系统CPU时间：该进程执行内核程序所经历的时间。
 
5、文件共享：
UNIX系统支持在不同进程间共享打开文件。内核使用3种数据结构表示打开文件：
<1>每个进程在进程表中都有一个记录项，记录项中包含一张打开文件描述符表，可将其视为一个矢量，每个描述符占用一项。
<2>内核为所有打开文件维持一张文件表。
<3>每个打开文件（或设备）都有一个v节点结构。v节点包含了文件类型和对此文件进行各种操作函数的指针。这些信息在打开文件时从磁盘读入内存。

---------------------------------------------------------------------------------------------------------------------------------------------------

3.11 原子操作：
原子操作指由多步组成的一个操作。如果该操作原子地执行，那么要么执行完所有步骤，要么一步也不执行，不可能只执行所有步骤的一个子集。

1、任何要求多于一个函数调用的操作都不是原子操作。在这两个函数调用之间，内核可能会临时挂起（进程切换）。
UNXI系统为这样的操作提供了一种原子操作方法，即在打开文件时设置O_APPEND标志。这样使得内核在每次写操作之前，都将进程的当前偏移量设置到该文件的尾端。

2、函数pread和pwrite //原子性的定位并执行I/O

ssize_t read(int fd,void *buf, size_t nbytes);
ssize_t pread(int fd,void *buf, size_t nbytes,off_t offset);
//* pread相当于lseek后调用read；* 调用pread时，无法中断定位和读操作；* 不更新当前文件偏移量。

3.12 函数dup和dup2//复制一个现有的文件描述符
int dup(int fd);   int dup2(int fd,int fd2);
<1>返回新的文件描述符，dup返回的新的文件描述符一定是当前可用描述符中的最小值；dup2可以用fd2参数指定新的描述符值，如果fd2已经打开，则先将其关闭，
如若fd等于fd2，则dup2返回fd2并不关闭它。否则，fd2的FD_CLOEXEC文件描述符标志就被清除，这样fd2在进程调用exec时是打开状态。
   返回的新文件描述符与参数fd共享一个文件表项。
   
close-on-exec 执行时关闭

3.13 函数sync、fsync、fdatasync

3.14 函数fcntl//改变已经打开文件的属性

第十章：信号
1、信号是软件中断，信号提供了一种处理异步时间的方法，如终端用户键入终端键。


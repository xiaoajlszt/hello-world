1、在进程的整个生命期中，系统总是通过PCB对进程进行控制的。
   系统根据进程的PCB感知进程的存在，PCB是进程存在的唯一标志。
   系统创建新进程时，就为它创建一个PCB；进程结束时又回收其PCB。

2、PCB经常被操作系统访问，尤其是被运行频率很高的进程及分派程序访问，故PCB应常驻内存。
   系统将所有的PCB组织成若干链表(或队列)，存放在操作系统中专门开辟的PCB区内。
   
3、进程控制块中的信息：
<1>进程标识符  //唯一标识一个进程
1)内部标识符：系统使用，通常是一个进程的序号
2)外部标识符：创建者提供，由用户在访问该进程是使用

<2>处理机状态
处理机状态信息主要是由处理机的各种寄存器中的内容组成的。处理机在运行时，许多信息都放在寄存器中。
当处理机被中断时，所有这些信息都必须保存在PCB中，以便在该进程重新执行时，能从断点继续执行。

<3>进程调度信息

<4>进程控制信息

2.2进程的控制
进程控制一般由OS内核中的原语来实现的。
原语(Primitive)是由若干条指令组成的，用于完成一定功能的一个过程。它是原子操作。

block() //自我阻塞，放弃处理机
wakeup() //唤醒等待进程


2.2.1进程的创建
子进程可以继承父进程所拥有的资源。(如：继承父进程打开的文件；继承父进程所分配到的缓冲区等)
当子进程被撤销时，应将其从父进程获得的资源归还给父进程。
撤销父进程时，也必须同时撤销其所有的子进程。
PCB中设置了家族关系表项，用以标明自己的父进程及所有的子进程。

2.3进程同步
对多个相关进程在执行次序上进行协调，使并发执行的各个进程之间能有效共享资源和相互合作，从而使程序的执行具有可在再现性。
2.3.1进程同步的基本概念
1、两种形式的制约关系
<1>间接相互制约关系  //争抢资源
<2>直接相互制约关系  //进程间合作

2、临界资源
互斥访问

3、临界区
把在每个进程中访问临界资源的那段代码称为临界区。
若能保证各个进程互斥地进入自己的临界区，便可以实现对临界资源的互斥访问。
每个进程在进入临界区之前，应先对要访问的临界资源进行检查，如果未被访问，进程便可进入临界区，并设置它正被访问的标志。

4、同步机制遵循的原则
<1>空闲让进
<2>忙则等待
<3>有限等待
<4>让权等待

2.3.2信号量(Semaphores)机制  //一种卓有成效的进程同步工具
1、整型信号量  //一个用于表示资源数目的整型量S
初始化之后，只能通过两个标准的原子操作 wait(S)和signal(S)来访问。
wait(S)和signal(S)是两个原子操作，它们在执行时是不可中断的。当一个进程在修改某信号量时，没有其他进程可同时修改该信号量。

整型信号量机制中的wait操作，只要是信号量S<=0，就会不断测试。因此，该机制并未遵循"让权等待"的准则，而是使进程处于"忙等"状态。

2、记录型信号量  //是由于采用记录型的数据结构而得名的
采取"让权等待"的策略。一个用于代表资源数目的整型变量value；一个进程链表指针L(链接所有等待的进程)。
如果value初始值为1，表示只允许一个进程访问临界资源，此时信号量转化为互斥信号量，用于进程互斥。

3、AND型信号量  //一个进程需要先获得两个或更多的共享资源
基本思想：将进程在整个运行过程中所需要的所有资源，一次性全部分配给进程，待进程使用完后再一起释放。
也就是对若干临界资源的分配采用原子操作方式。这样可以避免死锁情况发生。
也称为AND同步或同时wait操作。

4、信号量集
当一次需要N个某类型临界资源时，需要N次wait(S)操作，很低效。对AND信号量机制加以扩充。
Swait(S,d,d)
Swait(S,1,1)
Swait(S,1,0)

2.3.4管程机制  //另一种进程同步工具
1、管程(Monitors)的定义
系统中的各种硬件资源和软件资源，均可用数据结构抽象地描述其资源特性，
即用少量信息和对该资源所执行的操作来表征该资源，而忽略它们的内部结构和实现细节。

利用共享数据结构抽象地表示系统中的共享资源，而把对该共享数据结构实施的操作定义为一组过程，
如资源的请求request和释放release过程。

代表共享资源的数据结构，以及由对该共享数据结构实施操作的一组过程所组成的资源管理程序，
共同构成了一个操作系统的资源管理模块，我们称子为管程。

一个管程定义了一个数据结构和能为并发进程所执行(在该数据结构上)的一组操作，这组操作能同步进程和改变管程中的数据。


第三章 处理机调度和死锁
3.1处理机调度层次
一、高级调度(high level scheduling)
又称为作业调度和长程调度，其主要功能是根据某种算法将外存上处于后备队列中的那些作业调入内存。
它的操作对象是作业(job)。
1、作业
概念比程序更为广泛，不仅包含通常的程序和数据，而且还应配有一份作业说明书，系统根据该说明书控制程序运行。

2、作业步
在作业运行期间，每个作业都必须经过若干个相对独立，又相互关联的顺序加工步骤才能得到结果，每一个加工步骤称为一个作业步。

3、作业流
若干个作业进入系统后，被依次放在外存上，这便形成了输入的作业流。

















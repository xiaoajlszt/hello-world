一、构造函数
1、类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做构造函数。
<1>构造函数的任务是初始化类对象的数据成员
<2>无论何时只要类的对象被创建，就会执行构造函数
<3>构造函数的名字与类名相同
<4>构造函数没有返回类型
<5>类可以有多个构造函数，和其他重载函数差不多，不同构造函数之间必须在参数数量或参数类型上区别
<6>构造函数不能被声明为const，但它仍然可用于初始化常量对象

2、合成的默认构造函数
<1>如果类中没有显式地定义构造函数，那么编译器就会为我们隐式地定义一个默认构造函数。
编译器创建的构造函数又被称为合成的默认构造函数。按照如下规则初始化类对象：
1)如果存在类内的初始值，用它来初始化成员
2)否则，默认初始化该成员

<2>无任何实参
<3>只有当类没有声明任何构造函数时，编译器才会自动地生成默认构造函数。
<3>如果类包含有内置类型或复合类型的成员，只有当这些成员全都被赋予了类内的初始值时，这个类才适合于使用合成的默认构造函数。

3、自定义构造函数
<1>Sales_data() = default;  //自定义默认构造函数
<2>构造函数初始值列表
Sales_data(const std::string &s): bookNo(s) {}
Sales_data(const std::string &s, unsigned n, double p): bookNo(s), units_sold(n), revenue(p*n) {}
当数据成员被构造函数初始值列表忽略时，它将以与合成默认构造函数相同的方式隐式初始化。

<3>构造函数不应该轻易覆盖掉类内的初始值。


二、拷贝、赋值和析构
如果我们不主动定义这些操作，编译器将替我们合成它们。



























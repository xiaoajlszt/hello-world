2.2 变量
1. 变量提供了一个具名的、可供程序操作的存储空间。
<1>每个变量都具有数据类型，数据类型决定着变量所占内存空间的大小和布局方式、该空间能存储的值的范围，以及变量能参与的运算。
<2>对C++程序员来说，变量和对象一般可以互换使用。

2. 何为对象?
<1>通常情况下，对象是指一块能存储数据并具有某种类型的内存空间。
<2>一些人仅在与类有关的场景下才使用"对象"这一词汇。另一些人则把已命名的对象和未命名的对象区分开，把已命名的对象叫做变量。
还有一些人把对象和值区分开，其中对象是指能被程序修改的数据，而值指的是只读的数据。
<3>本书认为对象是具有某种数据类型的内存空间。并不严格区分是类还是内置类型，也不区分是否命名或是否只读。

2.2.1 变量定义
1. 初始值
<1>当对象在创建时获得了一个特定的值，我们说这个对象被初始化了。

<2>C++中，初始化和赋值是两个完全不同的操作。
初始化不是赋值，初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦掉，而以一个新值来替代。

2. 列表初始化
<1>C++语言定义了初始化的好几种不同形式：
int a = 0;
int a = {0};
int a{0};
int a(0);

作为C++11新标准的一部分，用花括号来初始化变量得到了全面应用。这种初始化的形式也称为列表初始化。
无论是初始化对象还是某些时候为对象赋值，都可以使用这样一组花括号括起来的初始值了。

<2>当用于内置类型的变量时，这种初始化形式有一个重要特点：如果使用列表初始化且初始值存在丢失信息的风险，编译器将报错：
long double ld = 3.1415;
int a{ld}, b = {ld};		//错误：转换未执行，因为存在丢失信息的危险
int c(ld), d = ld;			//正确：转换执行，且确实丢失了部分值

3. 默认初始化
<1>如果定义变量时没有指定初值，则变量被默认初始化。

<2>默认值到底是什么由变量类型决定，同时定义变量的位置也会对此有影响。如果是内置类型的变量未被显式初始化，它的值由定义的位置决定。
- 定义于任何函数体之外的变量被初始化为0；
- 定义在函数体内部的内置类型变量将不被初始化。
//一个未被初始化的内置类型变量的值是未定义的，如果试图拷贝或以其他形式访问此类值将引发错误。

<3>每个类各自决定其初始化对象的方式。而且，是否允许不经初始化就定义对象也由类自己决定。
- 绝大多数类都支持无须显式初始化而定义对象，这样的类提供了一个合适的默认值。
- 一些类要求每个对象都显式初始化，否则将引发错误。


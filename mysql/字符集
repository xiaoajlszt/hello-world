mysql字符集

1、常见的字符集
<1>1960年代初期，美国标准化组织ANSI发布了第一个计算机字符集ASCII，后来进一步变成了国际标准ISO-646。
ASCII采用7位编码，定义了包括大小写英文字母、阿拉伯数字和标点符号，以及33个控制符号等。

<2>国际标准化组织ISO的一些成员国于1984年发起指定新的国际字符集标准，以容纳全世界各种语言和符号。
这个标准最后叫做"Universal Multiple-Octet Coded Character Set"，简称OCS，标准编号则定为ISO-10646。
ISO-10646标准采用4字节编码，因此简称UCS-4。

<3>SO-10646发布以后，遭到了部分美国计算机公司的反对。1988年Xerox公司提议制定新的以16位编码的统一字符集Unicode，
并联合Apple、IBM、DEC、Sun、Microsoft、Novell等公司成立Unicode协会（The Unicode Consortium），
并成立Unicode技术委员会（Unicode Technical Committee），专门负责Unicode文字的搜集、整理和编码，并于1991年推出了Unicode 1.0。

<4>经过双方谈判，1991年10月达成协议，ISO将Unicode编码并入ISO-10646的0组0字面，叫作基本多语言文字面（Basic Multi-lingual Plane, BMP），共有65,534个码位，
并根据不同用途分为若干区域。除BMP外的32767个字面又分为辅助字面（supplementary planes）和专用字面（private use planes）两部分，
辅助字面用以收录ISO-10646后续搜集的各国文字，专用字面供使用者自定义收录ISO-10646未收录的文字符号。

其实，大部分用户只使用BMP字面就足够了，早期的ISO-10646-1标准也只要求实现BMP字面，这样只需要2字节来编码就足够了，
Unicode也正是这么做的，这叫作ISO-10646编码的基本面形式，简称为UCS-2编码。
UCS-2编码转换成UCS-4编码也很容易，只要在前面加两个取值为0的字节即可。

<5>Unicode在节省内存和处理时间上都具有优势，这也是Unicode编码方式更流行的原因。但如果万一要使用ISO-10646 BMP字面以外的文字怎么办呢？
Unicode提出了名为UTF-16或代理法（surrogates）的解决方案，UTF是UCS/Unicode Transformation Format 的缩写。
UTF-16的解决办法是：对BMP字面的编码保持二字节不变，对其他字面的文字按一定规则将其32位编码转换为两个16位的Unicode编码，
其两个字节的取值范围分别限定为0xD800～0xDBFF和0xDC00～0xDFFF，因此，UTF-16共有（4×256）×（4×256）＝1048576个码位。

<6>但当时的计算机和网络世界还是ASCII的天下，只能处理单字节数据流，UTF-16在离开Unicode环境后，在传输和处理中都存在问题。
于是Unicode又提出了名为UTF-8的解决方案，UTF-8按一定规则将一个ISO-10646或Unicode字元码转换成1至4个字节的编码，
其中将ASCII码（0～0x7F）转换成单字节编码，也就是严格兼容ASCII字符集；
UTF-8的2字节编码，用以转换ISO-10646标准0x0080～0x07FF的UCS-4原始码；
UTF-8的3字节编码，用以转换ISO-10646标准0x0800～0xFFFF的UCS-4原始码；
UTF-8的4字节编码，用以转换ISO-10646标准0x00010000～0001FFFF的UCS-4原始码。

<7>最后要说的是，UTF-16和UTF-32因字节序的不同，又有了UTF-16BE（Big Endian）、UTF-16LE（Little Endian）和UTF-32BE（Big Endian）、UTF-32LE（Little Endian）等。


	字符集 			是否定长 			编码方式 			     其他说明
ACSII 			       是 			单字节 7 位编码 	   最早的奠基性字符集
ISO-8859-1/latin1 	   是           单字节 8 位编码        西欧字符集，经常被一些程序员用来转码
GB2312-80              是           双字节编码             早期标准，不推荐再使用
GBK                    是           双字节编码             虽然不是国标，但支持的系统不少
GB18030                否           2 字节或 4 字节编码    开始有一些支持，但数据库支持的还少见
UTF-32                 是           4 字节编码             UCS-4 原始编码，目前很少采用
UCS-2                  是           2 字节编码             Windows 2000 内部用 UCS-2
UTF-16                 否           2 字节或 4 字节编码    Java 和 Windows XP/NT 等内部使用 UTF-16
UTF-8                  否           1 至 4 字节编码        互联网和 UNIX/Linux 广泛支持的 Unicode 字符集；MySQLServer 也使用 UTF-8


2、选择合适的字符集
MySQL 5.0 目前支持几十种字符集，UTF-8 是 MySQL 5.0 支持的唯一 Unicode 字符集，但版本是 3.0，不支持 4 字节的扩展部分。

<1>满足应用支持语言的需求，如果应用要处理各种各样的文字，或者将发布到使用不同语言的国家或地区，就应该选择 Unicode 字符集。对 MySQL 来说，目前就是 UTF-8。

<2>如果应用中涉及已有数据的导入，就要充分考虑数据库字符集对已有数据的兼容性。
假如已有数据是 GBK 文字，如果选择 GB2312-80 为数据库字符集，就很可能出现某些文字无法正确导入的问题。

<3>如果数据库只需要支持一般中文，数据量很大，性能要求也很高，那就应该选择双字节定长编码的中文字符集，比如 GBK。
因为，相对于 UTF-8 而言，GBK 比较“小” ，每个汉字只占 2 个字节， 而 UTF-8 汉字编码需要 3 个字节， 这样可以减少磁盘 I/O、 数据库 cache，以及网络传输的时间，从而提高性能。

相反，如果应用主要处理英文字符，仅有少量汉字数据，那么选择 UTF-8 更好，因为 GBK、UCS-2、UTF-16 的西文字符编码都是 2 个字节，会造成很大不必要的开销。

<4>如果数据库需要做大量的字符运算，如比较、排序等，选择定长字符集可能更好，因为定长字符集的处理速度要比变长字符集的处理速度快。

<5>如果所有客户端程序都支持相同的字符集，应该优先选择该字符集作为数据库字符集。这样可以避免因字符集转换带来的性能开销和数据损失。


3、MySQL支持的字符集简介
MySQL 服务器可以支持多种字符集，在同一台服务器、同一个数据库、甚至同一个表的不同字段都可以指定使用不同的字符集，
相比 Oracle 等其他数据库管理系统，在同一个数据库只能使用相同的字符集，MySQL 明显存在更大的灵活性。

<1>查看所有可用字符集
show character set;

<2>查看所有字符集和该字符集默认的校对规则
1)MySQL的字符集包括字符集(character)和校对规则(collation)两个概念。
字符集是用来定义 MySQL 存储字符串的方式，校对规则则是定义了比较字符串的方式。
字符集和校对规则是一对多的关系，MySQL 支持 30 多种字符集的 70 多种校对规则。

2)每个字符集至少对应一个校对规则。可以用SHOW COLLATION LIKE '***';命令查看相关字符集的校对规则。

mysql> SHOW COLLATION LIKE '%gbk%';
+----------------+---------+----+---------+----------+---------+
| Collation      | Charset | Id | Default | Compiled | Sortlen |
+----------------+---------+----+---------+----------+---------+
| gbk_chinese_ci | gbk     | 28 | Yes     | Yes      |       1 |
| gbk_bin        | gbk     | 87 |         | Yes      |       1 |
+----------------+---------+----+---------+----------+---------+
2 rows in set (0.00 sec)

校对规则命名约定：它们以其相关的字符集名开始，通常包括一个语言名，并且以_ci（大小写不敏感）、 _cs （大小写敏感） 或_bin （二元，即比较是基于字符编码的值而与language无关）结束。


4、MySQL字符集设置
MySQL 的字符集和校对规则有 4 个级别的默认设置：服务器级、数据库级、表级和字段级。

<1>服务器级
1)服务器字符集和校对，在MySQL服务启动时确定。

可以在 my.cnf 中设置：
[mysqld]
default-character-set=gbk
或者在启动选项中指定：
mysqld --default-character-set=gbk
或者在编译的时候指定：
./configure --with-charset=gbk

//以上三种方式，如果要使用该字符集的非默认校对规则，则需要在指定字符集的同时指定校对规则。

2)show variables like 'character_set_server';  //查询当前服务器的字符集

3)show variables like 'collation_server'	   //查询当前服务器的校对规则

<2>数据库级
1)数据库的字符集和校对规则在创建数据库的时候指定，也可以在创建完数据库后通过“alter database”命令进行修改。
如果数据库里已经存在数据，因为修改字符集并不能将已有的数据按照新的字符集进行存放，所以不能通过修改数据库的字符集直接修改数据的内容。

如果指定了字符集和校对规则，则使用指定的字符集和校对规则；
如果指定了字符集没有指定校对规则，则使用指定字符集的默认校对规则；
如果没有指定字符集和校对规则，则使用服务器字符集和校对规则作为数据库的字符集和校对规则。

2)show variables like 'character_set_database'; //查询当前数据库的字符集

3)show variables like 'collation_database';		//查询当前数据库的校对规则

<3>表级
1)表的字符集和校对规则在创建表的时候指定，可以通过 alter table 命令进行修改。
同样，如果表中已有记录，修改字符集对原有的记录并没有影响，不会按照新的字符集进行存放。表的字段仍然使用原来的字符集。

如果指定了字符集和校对规则，使用指定的字符集和校对规则；
如果指定了字符集没有指定校对规则，使用指定字符集的默认校对规则；
如果没有指定字符集和校对规则，使用数据库字符集和校对规则作为表的字符集和校对规则。

2)show create table tablename;   //查询当表的字符集和校对规则

<4>字段级
使用几率较小。
列字符集和校对规则的定义可以在创建表时指定，或者在修改表时调整，如果在创建表的时候没有特别指定字符集和校对规则，则默认使用表的字符集和校对规则。

<5>连接字符集和校对规则
上面 4 种设置方式，确定的是数据保存的字符集和校对规则，对于实际的应用访问来说，还存在客户端和服务器之间交互的字符集和校对规则的设置。

1)character_set_client、character_set_connection 和 character_set_results，分别代表客户端、连接和返回结果的字符集。
通常情况下，这 3 个字符集应该是相同的， 才可以确保用户写入的数据可以正确地读出，特别是对于中文字符，不同的写入字符集和返回结果字符集将导致写入的记录不能正确读出。

2)修改连接字符集
- SET NAMES ***; 
设置连接的字符集和校对规则，这个命令可以同时修改这 3 个参数的值。
使用这个方法修改连接的字符集和校对规则，需要应用每次连接数据库后都执行这个命令。

- 在 my.cnf 中设置以下语句：
[mysql]
default-character-set=gbk
这样服务器启动后，所有连接默认就是使用 GBK 字符集进行连接的，而不需要在程序中再执行 set names 命令。

3)字符串常量的字符集也是由 character_set_connection 参数来指定的。
可以通过“[_charset_name]'string' [COLLATE collation_name]”命令强制字符串的字符集和校对规则。
例如：
select _gbk '字符集';
select _latin1 '字符集';
通常情况下，基本不需要用户强制指定字符串字符集。


5、使用示例
eg：GBASE中PolicyId VARCHAR(100)字段能够导入最长100长度的字符(不管是汉字还是字母100位长度都能成功导入)，显然这超出了100字节的长度。
因此，想测试验证MySQL中是否也能导入100长度的汉字？

建表zh_test;     create table zh_test(value varchar(10));
设置中文字符集   alter table zh_test convert to character set gbk;
导入中文         insert into zh_test (value) VALUES("小小小小小小小小小小小");  //发现能够导入最长10长度的字符，显然结果与GBASE一致。

mysql> desc zh_test;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| value | varchar(10) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
1 row in set (0.00 sec)

mysql> select * from zh_test;
+--------------------------------+
| value                          |
+--------------------------------+
| 小小小                         |
| 小小小小小                     |
| 小小小小小小小小小小           |
+--------------------------------+
3 rows in set (0.00 sec)


6、参考资料
深入浅出MySQL
http://www.cnblogs.com/HondaHsu/p/3640180.html
第10章 索引的设计和使用
10.1 索引概述
1、简介：
<1>MyISAM和InnoDB存储引擎的表默认创建的都是BTREE索引。
<2>MySQL目前还不支持函数索引，但是支持前缀索引，即对索引字段的前N个字符创建索引。
<3>MySQL还支持全文本(FULLTEXT)索引，该索引可以用于全文搜索。仅限于MyISAM存储引擎。
<4>也可以为空间列类型创建索引，但只有MyISAM存储引擎支持空间类型索引，且索引字段必须非空。
<5>默认情况下MEMORY存储引擎使用HASH索引。

2、创建表时可以同时创建索引，也可以随时增加新的索引。
create index cityname on city (city(10));  //为city表创建了10个字节的前缀索引

3、删除索引
drop index index_name on tbl_name;

10.2 索引的设计原则
1、搜索的索引列，不一定是所要选择的列。
最适合索引的列是出现在WHERE子句中的列，或连接子句中指定的列，而不是出现在SELECT关键字后的选择列表中的列。

2、使用唯一索引
考虑某列中值的分布，索引列的基数越大，索引效果越好。

3、使用短索引
如果要对字符串列进行索引，应该指定一个前缀长度。只要有可能就应该这样做。
这样能够节省大量索引空间，也可能使查询更快。
较小的索引涉及的磁盘IO较少，较短的值比较起来更快。
更为重要的是，对于较短的键值，索引高速缓存中的块能容纳更多的键值。

4、利用最左前缀

5、不要过度索引
每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能。

6、对于InnoDB存储引擎的表，记录默认会按照一定的顺序保存。
如果有明确定义的主键，则按照主键顺序保存；
如果没有主键，但是有唯一索引，那么就是按照唯一索引的顺序保存。
如果既没有主键又没有唯一索引，那么表中会自动生成一个内部列，按照这个列的顺序保存。

InnoDB表的普通索引都会保存主键的键值，所以主键要尽可能选择较短的数据类型，可以有效地较少索引的磁盘占用，提高索引的缓存效果。

10.3 BTREE索引与HASH索引
InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；
MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；
Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；
NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；
Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；


第11章 视图



























































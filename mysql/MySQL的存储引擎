一、概述
1、在文件系统中，MySQL将每个数据库(也称为schema)保存为数据目录下的一个目录。
建表时，MySQL会在数据库子目录下创建一个和表同名的.frm文件保存表的定义。
<1>因为MySQL使用文件系统的目录和文件来保存数据库和表的定义，因此大小写敏感性和具体的平台相关。
1)windows中，大小写不敏感
2)类Unix中，大小写敏感

<2>不同的存储引擎保存数据和索引的方式不同，但表的定义则是在MySQL服务层统一处理的。

<3>可以使用SHOW TABLE STATUS命令显示表的相关信息：
mysql> SHOW TABLE STATUS LIKE 'mytest1'\G
*************************** 1. row ***************************
           Name: mytest1				//表名
         Engine: InnoDB					//存储引擎类型
        Version: 10						
     Row_format: Dynamic				//行的格式
           Rows: 6						//表中的行数(记录条目)，对于InnoDB该值是估计值。
 Avg_row_length: 2730					//平均每行包含的字节数。
    Data_length: 16384					//表数据的大小(单位：字节)
Max_data_length: 0						//表数据的最大容量，与存储引擎有关。
   Index_length: 0						//索引的大小(单位：字节)
      Data_free: 0						
 Auto_increment: NULL					//下一个AUTO_INCREMENT的值
    Create_time: 2017-06-23 07:04:40	//表的创建时间
    Update_time: 2017-06-23 07:26:48	//表数据的最后修改时间
     Check_time: NULL					//使用CHECK TABLE命令最后一次检查表的时间
      Collation: latin1_swedish_ci		//表的默认字符集和字符列排序规则
       Checksum: NULL					//如果启用，保存整个表的实时校验和
 Create_options: 						//创建表时指定的其他选项
        Comment: 
1 row in set (0.00 sec)

1)Row_format
行的格式。Dynamic的行长度是可变的，一般包含可变长度的字段(eg：VARCHAR、BLOB)。
		  Fixed的行长度是固定的，只包含固定长度的列。
		  Compressed的行只在压缩表中存在。

2)data_free
对于MyISAM表，表示已分配但目前没有使用的空间。包括：之前删除的行，以及后续可以被INSERT利用的空间。

3)commit
包含一些额外信息。
对于MyISAM表，保存的是表在创建时带的注释。
对于InnoDB表，保存的是InnoDB表空间的剩余空间信息。
如果是视图，保存"VIEW"的文本字样。

2、相关命令
<1>查询当前默认的存储引擎
SHOW VARIABLES LIKE 'table_type';	

<2>查询当前数据库支持的存储引擎
SHOW ENGINES;	
   或者
SHOW VARIBALES LIKE 'have%';

<3>若要修改默认存储引擎，可以在参数文件中设置default-table-type。

二、InnoDB存储引擎
1、InnoDB是MySQL的默认事务型引擎，也是最重要、使用最广泛的存储引擎。
<1>它被设计用来处理大量的短期(short-lived)事务。短期事务大部分情况下是正常提交的，很少会被回滚。
<2>它的性能和自动崩溃恢复特征，使得它在非事务型存储的需求中也很流行。
<3>除非有非常特别的原因，否则应优先考虑使用InnoDB。

2、InnoDB的数据存储在表空间中，表空间是由InnoDB管理的一个黑盒子，由一系列的数据文件组成。
<1>InnoDB可以将每个表的数据和索引存放在单独的文件中。

3、InnoDB采用MVCC来支持高并发，并且实现了四个标准的隔离级别。
其默认级别是REPEATABLE READ，并且通过间隙锁(next-key locking)策略防止幻读的出现。

4、InnoDB表是基于聚簇索引建立的。聚簇索引对主键查询有很高的性能。
不过它的二级索引(非主键索引)中必须包含主键列。所以，如果主键列很大，其他的所有索引都会很大。

5、InnoDB内部做了很多优化：
包括从磁盘读取数据时采用的可预测性读取；
能够自动在内存中创建hash索引以加速读操作的自适应哈希索引；
能够加速插入操作的插入缓冲区等。

6、InnoDB行为非常复杂，不易理解。
如果使用了InnoDB引擎，建议阅读官方手册中的"InnoDB事务模型和锁"一节。
如果应用程序基于InnoDB构建，则要事先了解MVCC架构带来的一些微妙和细节之处。

7、InnoDB通过一些机制和工具支持真正的热备，MySQL其他的存储引擎不支持热备。


三、MyISAM存储引擎
MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，
但MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃之后无法安全恢复。

1、存储
MySIAM会将表存储在两个文件中：数据文件和索引文件，分别以.MYD和.MYI为扩展名。



五、选择合适的引擎
1、优先使用InnoDB。
2、除非万不得已，否则不要混合使用多种存储引擎，可能带来一系列复杂的问题。

3、优先考虑一下因素：
<1>事务
如果应用需要事务支持，那么InnoDB(或者XtraDB)是目前最稳定并且经过验证的选择。
如果应用不需要事务，并且主要是SELECT和INSERT操作，那么MyISAM是不错的选择。一般日志型应用比较符合这一特性。

<2>备份
如果可以定期以关闭服务器来执行备份，那么备份的因素可以忽略。
如果需要在线热备，那么选择InnoDB就是基本要求。

<3>崩溃恢复
数据量较大时，系统如何快速崩溃恢复是一个需要考虑的问题。
MyISAM崩溃后发生损坏的概率要比InnoDB高很多，而且恢复速度也要慢。
因此，即使不需要事务支持，很多人也选择InnoDB引擎。

<4>特有的特性

4、日志型应用



























实际生产环境中，需要对前台的应用进行优化，以减小前台访问数据库的压力。

一、使用连接池
1、对于访问数据库来说，建立连接的代价比较昂贵，有必要建立连接池以提高访问性能。
具体来说，可以把连接当做对象或者设备，同一放在一个“池子”里面。
本来需要直接访问数据库的地方，都改成从“池子”中同一获取连接来使用。
“池子”中的连接已预先建好，可以直接分配给应用程序使用，因此大大减小了创建连接所耗费的资源。
连接返回后，本次访问将连接交换给“池子”，供新访问使用。

二、减少对MySQL的访问
1、避免对同一数据做重复检索
应用中需要理清对数据库的访问逻辑，能够一次连接获取出所有结果，就不要两次连接。

2、使用查询缓存
<1>查询缓存的作用是存储SELECT查询的文本以及相应的结果。
如果随后收到一个相同的查询，服务器会从查询缓存中重新得到查询结果，而不需要解析和执行查询。

<2>查询缓存适用于更新不频繁的表，当表更改(表结构或表数据)后，查询缓存值的相关条目被清空。
mysql> show variables like '%query_cache%';
+------------------------------+---------+
| Variable_name                | Value   |
+------------------------------+---------+
| have_query_cache             | YES     |
| query_cache_limit            | 1048576 |
| query_cache_min_res_unit     | 4096    |
| query_cache_size             | 0       |
| query_cache_type             | OFF     |
| query_cache_wlock_invalidate | OFF     |
+------------------------------+---------+
6 rows in set (Elapsed: 00:00:00.01)

其中：
have_query_cache：服务器在安装是是否已配置高速缓存
query_cache_size：缓存区大小，单位M
query_cache_type：0(off)-缓存关闭  1(on)-缓存打开  2(demand)-只有带SQL_CACHE的SELECT语句提供高速缓存

mysql> show status like '%Qcache%'; //监视查询缓存的使用情况
+-------------------------+-------+
| Variable_name           | Value |
+-------------------------+-------+
| Qcache_free_blocks      | 0     |
| Qcache_free_memory      | 0     |
| Qcache_hits             | 0     | 
| Qcache_inserts          | 0     | //被加入到缓存中的查询数目
| Qcache_lowmem_prunes    | 0     |
| Qcache_not_cached       | 0     | 
| Qcache_queries_in_cache | 0     |	//在缓存中已注册的查询数目
| Qcache_total_blocks     | 0     |
+-------------------------+-------+
8 rows in set (Elapsed: 00:00:00.00)

3、增加CACHE层
比如：在应用端创建一个二级数据库，把访问频度非常大的数据放到二级库上。设定一个机制与主数据库同步。
这样主要操作都在二级库上进行，大大降低了主库的压力。

三、负载均衡


















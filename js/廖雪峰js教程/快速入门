1. JavaScript代码可以直接嵌在网页的任何地方，通常把JavaScript代码放到<head>中。
<html>
<head>
  <script>
    alert('Hello, world');
  </script>
</head>
<body>
  ...
</body>
</html>

由<script>...</script>包含的代码就是JavaScript代码，它将直接被浏览器执行。

2. 第二种方法是把JavaScript代码放到一个单独的js文件中，然后在HTML中通过<script src="..."></script>引入这个文件。
<html>
<head>
  <script src="/static/js/abc.js"></script>
</head>
<body>
  ...
</body>
</html>

这样，/static/js/abc.js就会被浏览器执行。

3. 把JavaScript代码放入一个单独的js文件中更利于维护代码，并且可以被多个网页引用。
可以在同一个页面中引入多个js文件。
可以在页面中多次编写<script> js代码... </script>，浏览器按照顺序依次执行。

4. 有些时候<script>标签还设置了一个type属性：
<script type="text/javascript">
  ...
</script>

但这是没有必要的，因为默认的type就是JavaScript，所以不必显式地把type指定为JavaScript。

5. 如何编写JavaScript
可用任何文本编辑器编写JS代码。eg: Visual Studio Code、Sublime Text、Notepad++

不可以用Word或写字板来编写JavaScript或HTML，因为带格式的文本保存后不是纯文本文件，无法被浏览器正常读取。
也尽量不要用记事本编写，它会自作聪明地在保存UTF-8格式文本时添加BOM头。

6. 如何运行JS
要让浏览器运行JS，必须先有一个HTML页面，在HTML中引入JS，然后浏览器加载该HTML页面，执行JS代码。

你也许会想，直接在我的硬盘上创建好HTML和JavaScript文件，然后用浏览器打开，不就可以看到效果了吗？
这种方式运行部分JavaScript代码没有问题，但由于浏览器的安全限制，以file://开头的地址无法执行如联网等JavaScript代码。
最终，你还是需要架设一个Web服务器，然后以http://开头的地址来正常执行所有JavaScript代码。

7. 调试
Chrome - 开发者工具(F12) - 控制台(Console)
这里可以直接输入JS代码，回车后执行。
<1> 要查看一个变量的内容，在Console中输入console.log(a);，回车后显示的值就是变量的内容。
使用console.log()代替alert()的好处是可以避免弹出烦人的对话框。

<2> 如果你对自己还有更高的要求，可以研究开发者工具的“源码(Sources)”，掌握断点、单步执行等高级调试技巧。

一、基本语法
1. JavaScript的语法和Java语言类似，每个语句以;结束，语句块用{...}。
但是，JavaScript并不强制要求在每个语句的结尾加;，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上;。
(让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致。)

2. 注释
<1>以//开头直到行末的字符被视为行注释，注释是给开发人员看到，JavaScript引擎会自动忽略。
<2>另一种块注释是用/*...*/把多行字符包裹起来，把一大“块”视为一个注释。

3. 大小写
JavaScript严格区分大小写，如果弄错了大小写，程序将报错或者运行不正常。

二、数据类型和变量
1. Number
JS不区分整数和浮点数，统一用Number表示。

<1>以下都是合法的Number类型：
123
-99
NaN //表示Not a Number，当无法计算结果时用NaN表示
Infinity //表示无穷大，当数值超过了JS的Number所能表示的最大值时，用Infinity表示

<2>Number可以直接做四则运算：
1 + 2; // 3
(1 + 2) * 5 / 2; // 7.5
2 / 0; // Infinity
0 / 0; // NaN
10 % 3; // 1
10.5 % 3; // 1.5

2. 字符串
以单引号'或双引号"括起来的任意文本。

3. 布尔值
一个布尔值只有true、false两种值，要么是true，要么是false，可以直接用true、false表示布尔值，也可以通过布尔运算计算出来。
2 > 1; // 这是一个true值
2 >= 3; // 这是一个false值

<1> && || !

<2> 比较运算符
JS允许对任意数据类型做比较。
7 == 7; // true
7 === 7; // true
false == 0; // true
false === 0; // false

1) JS中有两种比较运算符：
 ==	会自动转换数据类型再比较。
 ===	不会自动转换数据类型。如果数据类型不一致，返回false；如果一致再比较。
由于JS这个设计缺陷，不要使用 == 比较，坚持使用 === 比较。

2) NaN这个特殊的Number与所有其他值都不相等，包括它自己。
NaN == NaN //false
NaN === NaN //false

唯一能判断NaN的方法是通过isNaN()函数。
isNaN(NaN); // true

3) 浮点数的相等比较
1/3 === (1-2/3); // false
这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。

要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：
Math.abs(1/3 - (1-2/3)) < 0.0000001; // true

注：1. 这里的1/3不是整除运算，得到值为0.3333333...
    2. python等中也有类似情况
	
>>> if 1.0/3.0 == 1.0-2.0/3.0:
...     print 1

并不输出1，因为：
>>> 1.0/3.0
0.3333333333333333
>>> 1-2.0/3.0
0.33333333333333337

4. null和undefined
<1> null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”。
在其他语言中，也有类似JavaScript的null的表示，例如Java也用null，Swift用nil，Python用None表示。
但是，在JavaScript中，还有一个和null类似的undefined，它表示“未定义”。

<2>JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。
事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。
undefined仅仅在判断函数参数是否传递的情况下有用。

5. 数组
数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。
数组的元素可以通过索引来访问。索引的起始值为0。

<1> [1, 2, 3.14, 'Hello', null, true];

<2> 另一种创建数组的方法是通过Array()函数实现：
new Array(1, 2, 3); // 创建了数组[1, 2, 3]

6. 对象
JS的对象是一组由键(对象的属性)值对的无序集合。eg:
var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
};

<1> JS对象的键都是字符串类型，值可以是任意数据类型。

<2>要获取一个对象的属性，可以使用 对象.属性名 的方式：
person.name; // 'Bob'
person.zipcode; // null

7. 变量
<1> 变量名是大小写英文、数字、$和_的组合，且不能用数字开头。
变量名也不能是JavaScript的关键字，如if、while等。
申明一个变量用var语句。同一个变量只能声明一次。

<2> 使用 = 对变量进行赋值
可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的数据。
这种变量本身类型不固定的语言称为动态语言。

8. strict模式
<1>JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：
如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：
i = 10; // i现在是全局变量

在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。

<2>使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内，同名变量在不同的函数体内互不冲突。

<3>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。
启用strict模式的方法是在JavaScript代码的第一行写上：'use strict';
这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。

<4>为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式。

三、字符串
1. 转义符 \
\x##	十六进制
'\x41'; // 完全等同于 'A'

\u####	unicode字符
'\u4e2d\u6587'; // 完全等同于 '中文'

2. 多行字符串
由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号`...`表示。

eg：
`这是一个
多行
字符串`;

3. 模板字符串
<1>要把多个字符串连接起来，可以使用+
var name = '小明';
var age = 20;
var message = '你好, ' + name + ', 你今年' + age + '岁了!';
alert(message);

<2>如果有很多变量需要连接，用+号就比较麻烦。
ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：
var name = '小明';
var age = 20;
var message = `你好, ${name}, 你今年${age}岁了!`;
alert(message);

4. 操作字符串
<1>s.length

<2>s[i]	//要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始

需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：
var s = 'Test';
s[0] = 'X';
alert(s); // s仍然为'Test'

<3>JavaScript为字符串提供了一些常用方法，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串。
1) toUpperCase()把一个字符串全部变为大写
2) toLowerCase()把一个字符串全部变为小写
3) indexOf()会搜索指定字符串出现的位置
4) substring()返回指定索引区间的子串
var s = 'hello, world'
s.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'
s.substring(7); // 从索引7开始到结束，返回'world'


四、数组(Array)
JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。

1. length
<1> 获取数组的长度，直接访问length属性。

<2> 直接给数组的length赋一个新的值会导致数组大小的变化。
var arr = [1, 2, 3];
arr.length; // 3
arr.length = 6;
arr; // arr变为[1, 2, 3, undefined, undefined, undefined]
arr.length = 2;
arr; // arr变为[1, 2]

2. 数组可以通过索引修改对应的元素
<1>对数组的索引进行赋值会直接修改这个数组。
var arr = ['A', 'B', 'C'];
arr[1] = 99;
arr; // arr现在变为['A', 99, 'C']

<2>如果通过索引赋值时，索引超出了范围，同样会引起Array大小的变化。
var arr = [1, 2, 3];
arr[5] = 'x';
arr; // arr变为[1, 2, 3, undefined, undefined, 'x']

<3>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。
然而，JavaScript的Array却不会有任何错误。在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。

3. indexOf
与string类似，数组也可以通过indexOf()来搜索一个指定元素的位置。
var arr = [10, 20, '30', 'xyz'];
arr.indexOf(10); // 元素10的索引为0
arr.indexOf(20); // 元素20的索引为1
arr.indexOf(30); // 元素30没有找到，返回-1
arr.indexOf('30'); // 元素'30'的索引为2

4. slice
slice()对应string的substring()，它截取数组的部分元素，然后返回一个新的数组。























































































一、函数的定义和调用

1. 定义函数
function abs(x) {
	if (x >= 0) {
		return x;
	}
	else {
		return -x;
	}
}

<1> 如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。

<2> JS中函数也是一个对象，abs()函数实际上是一个函数对象，函数名可以视为指向该函数的变量。
定义函数方式二：
var abs = function (x) {
	if (x >= 0) {
		return x;
	} else {
		return -x;
	}
};

1)在这种方式下，function (x) { ... }是一个匿名函数，它没有函数名。
但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。

2)上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个;，表示赋值语句结束。

2. 调用函数
<1>JS允许传入任意个数参数而不影响调用，因此传入的参数个数比定义的参数多也没有问题。
abs(10, 'blablabla'); // 返回10
abs(-9, 'haha', 'hehe', null); // 返回9

<2>传入的参数比定义的少也没有问题。
abs(); // 返回NaN
此时，abs()函数的参数x将收到undefined，计算结果为NaN。

<3>要避免收到undefined，可以对参数进行检查
function abs(x) {
	if (typeof x != 'number') {
		throw 'Not a number'
	}
	
	if (x >= 0) {
		return x;
	}
	else {
		return -x;
	}
}

3. arguments
JS还有一个“免费赠送”的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。

<1> arguments类似数组，但它不是一个数组。





























0、资料
https://github.com/jobbole/awesome-python-cn  //中文
https://github.com/vinta/awesome-python       //英文

----------------------------------------------------------------
python3.6 编译安装 https://my.oschina.net/tasker/blog/831092
<1>下载  https://www.python.org/downloads/release/python-360/
<2>cd /usr/local/src
(wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz)
1)tar -zxvf /usr/local/src/Python-3.6.0.tgz && cd Python-3.6.0

2)mkdir /usr/local/python3
./configure --prefix=/usr/local/python3 --with-thread
make && make altinstall  
//这里使用make altinstall安装在/usr/local/python3/bin目录下，如果使用make install，将会安装在/usr/bin/目录中。

3)# 关键一步，建立链接 
ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3          # 可直接使用 "python3"
ln -s /usr/local/python3/bin/pip3.6  /usr/bin/pip3               # 可直接使用 "pip3"

4)# 最后测试下 
python3
pip3
----------------------------------------------------------------
1、#!/usr/bin/Python 与 #!/usr/bin/env python
脚本语言的第一行，目的就是指出，文件中的代码用什么可执行程序去执行。

<1>#!/usr/bin/Python是告诉操作系统执行这个脚本的时候，调用/usr/bin下的python解释器；
<2>#!/usr/bin/env python这种用法是为了防止操作系统用户没有将python装在默认的/usr/bin路径里。
当系统看到这一行的时候，首先会到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作。
<3>#!/usr/bin/python相当于写死了python路径;#!/usr/bin/env python会去环境设置寻找python目录,推荐这种写法。

2、if __name__ == '__main__'的作用
“Make a script both importable and executable”
意思就是说让你写的脚本模块既可以导入到别的模块中用，另外该模块自己也可执行。

举例：
#module.py
def main():
  print "we are in %s"%__name__
  
if __name__ == '__main__':
  main()
这个函数定义了一个main函数，我们执行一下该py文件发现结果是打印出”we are in __main__“,
说明我们的if语句中的内容被执行了，调用了main()。

#anothermodle.py
from module import main
main()

其执行的结果是：we are in module
说明模块__name__ = '__main__' 下面的函数没有执行。
这样既可以让“模块”文件运行，也可以被其他模块引入，而且不会执行函数2次。这才是关键。

总结一下：
如果我们是直接执行某个.py文件的时候，该文件中那么”__name__ == '__main__'“是True,但是我们如果从另外一个.py文件通过import导入该文件的时候，这时__name__的值就是我们这个py文件的名字而不是__main__。
这个功能还有一个用处：调试代码的时候，在”if __name__ == '__main__'“中加入一些我们的调试代码，我们可以让外部模块调用的时候不执行我们的调试代码，但是如果我们想排查问题的时候，直接执行该模块文件，调试代码能够正常运行！

3、_showRanking()
函数名最前面的单下划线表示这是一个特殊函数，只能被本模块的代码使用，不能被其他使用本文件作为库或者工具模块的应用导入。

4、random模块
<1>randrange() //返回指定递增基数集合中的一个随机数，基数缺省值为1
random.randrange ([start,] stop [,step])
参数
start -- 指定范围内的开始值，包含在范围内。
stop -- 指定范围内的结束值，不包含在范围内。
step -- 指定递增基数。
返回值
从给定的范围返回随机项。

<2>randint()  //Return random integer in range [a, b], including both end points
def randint(self, a, b):
	return self.randrange(a, b+1)

random.randint(12, 20) #生成的随机数n: 12 <= n <= 20 
random.randint(20, 20) #结果永远是20 
random.randint(20, 10) #该语句是错误的

5、print '',这里的逗号，可以让后面要输出的内容不换行。会用空格隔开。
print 'Refilling candy...',
try:
	candytray.release()
except ValueError:
	print 'full, skipping'
else:
	print 'OK'
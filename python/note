0、资料
https://github.com/jobbole/awesome-python-cn  //中文
https://github.com/vinta/awesome-python       //英文

----------------------------------------------------------------
python3.6 编译安装 https://my.oschina.net/tasker/blog/831092
<1>下载  https://www.python.org/downloads/release/python-360/
<2>cd /usr/local/src
(wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz)
1)tar -zxvf /usr/local/src/Python-3.6.0.tgz && cd Python-3.6.0

2)mkdir /usr/local/python3
./configure --prefix=/usr/local/python3 --with-thread
make && make altinstall  
//这里使用make altinstall安装在/usr/local/python3/bin目录下，如果使用make install，将会安装在/usr/bin/目录中。

3)# 关键一步，建立链接 
ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3          # 可直接使用 "python3"
ln -s /usr/local/python3/bin/pip3.6  /usr/bin/pip3               # 可直接使用 "pip3"

4)# 最后测试下 
python3
pip3

注：
1、Python Shell 中敲击方向键显示「^[[C^[[D]
安装yum -y install readline-devel，然后再重新编译安装python。
----------------------------------------------------------------
1、#!/usr/bin/Python 与 #!/usr/bin/env python
脚本语言的第一行，目的就是指出，文件中的代码用什么可执行程序去执行。

<1>#!/usr/bin/Python是告诉操作系统执行这个脚本的时候，调用/usr/bin下的python解释器；
<2>#!/usr/bin/env python这种用法是为了防止操作系统用户没有将python装在默认的/usr/bin路径里。
当系统看到这一行的时候，首先会到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作。
<3>#!/usr/bin/python相当于写死了python路径;#!/usr/bin/env python会去环境设置寻找python目录,推荐这种写法。

2、random模块
<1>randrange() //返回指定递增基数集合中的一个随机数，基数缺省值为1
random.randrange ([start,] stop [,step])
参数
start -- 指定范围内的开始值，包含在范围内。
stop -- 指定范围内的结束值，不包含在范围内。
step -- 指定递增基数。
返回值
从给定的范围返回随机项。

<2>randint()  //Return random integer in range [a, b], including both end points
def randint(self, a, b):
	return self.randrange(a, b+1)

random.randint(12, 20) #生成的随机数n: 12 <= n <= 20 
random.randint(20, 20) #结果永远是20 
random.randint(20, 10) #该语句是错误的

3. 换行
<1>代码换行
1)  \
print "this line is toooooooooooo \
long"

结果：
this line is toooooooooooo long

//这里的long必须顶格写，否则结果中会出现多余的空格。
 
<2>字符串换行 - 换行后中间不要出现多余的空格
1) '' \
''
print "this line is toooooooooooo "      \   #\前后可以有很多空格
	"long" #可以不顶格写

结果：
this line is toooooooooooo long

2) 括号中不需要特殊的换行符 () [] {}
str = ['eeee'
            'eeee']
print '%s' % (str)

结果：
['eeeeeeee']

test3 =('Hello'
' '
'world')
输出结果：Hello world

4. 三引号('''或""")
<1>单引号和双引号是单行字符串；三引号是多行字符串，可以直接输入回车，而不需要用\n来表示。
三引号的字符串在输出时保持原样。

eg：
str = '''1
      2222222'''
print '%s' % (str)

结果：
1
     2222222

<2>也可以用来表示多行注释

<3>三引号中加上换行符\也可以将多行合并为一行。

5. 打印基础
<1>如果字符串内部既包含'又包含"，可以用转义符\来表示。
\n	换行
\t	制表符
\\	打印出\

<2>使用r''表示''内部的字符串默认不转义。
>>> print(r'\\\t\\')
\\\t\\

3、print 
<0>print '%s' % (str)

<1>print '', //这里的逗号，可以让后面要输出的内容不换行。会用空格隔开。
print 'Refilling candy...',
try:
	candytray.release()
except ValueError:
	print 'full, skipping'
else:
	print 'OK'
	
<2>print('\t', end='')  //表示输出一个制表符后不换行。

<3> %s% 字符串 (采用str()的显示)，因此输入是整数也可以
	%r% 字符串 (采用repr()的显示)
	%c% 单个字符
	%b% 二进制整数
	%d% 十进制整数
	%i% 十进制整数
	%o% 八进制整数
	%x% 十六进制整数
	%e% 指数 (基底写为e)
	%E% 指数 (基底写为E)
	%f% 浮点数
	%F% 浮点数，与上相同
	%g% 指数(e)或浮点数 (根据显示长度)
	%G% 指数(E)或浮点数 (根据显示长度)
	%% 字符"%"
	
4. repr()
http://blog.csdn.net/luckytanggu/article/details/53649156

<1>__repr__和__str__这两个方法都是用于显示的，__str__是面向用户的，而__repr__面向程序员。
打印操作会首先尝试__str__和str内置函数(print运行的内部等价形式)，它通常应该返回一个友好的显示。

<2>__repr__用于所有其他的环境中：用于交互模式下提示回应以及repr函数，如果没有使用__str__，会使用print和str。它通常应该返回一个编码字符串，可以用来重新创建对象，或者给开发者详细的显示。
当我们想所有环境下都统一显示的话，可以重构__repr__方法；当我们想在不同环境下支持不同的显示，例如终端用户显示使用__str__，而程序员在开发期间则使用底层的__repr__来显示，实际上__str__只是覆盖了__repr__以得到更友好的用户显示。
	
5. 三目运算
<1>eg：
x = x+1 if x%2==1 else x

<2>斐波那契数列
def fn(n):
    return n if n < 2 else fn(n-1)+fn(n-2)

<3>三目运算符目的是得到一个结果，未必就是将该结果return，或者进行简单的变量赋值，如下：
l = []
l.append(1 if x>=1 else 0) # 将会给形式带来巨大的简洁
	
6. is 和 ==
https://www.cnblogs.com/CheeseZH/p/5260560.html

Python中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)。
is和==都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。

<1>==是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等：

<2>is也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同

<3>eg:
>>> x = y = [4,5,6]
>>> z = [4,5,6]
>>> x == y
True
>>> x == z
True
>>> x is y
True
>>> x is z
False
>>>
>>> print id(x)	#获取对象id
3075326572
>>> print id(y)
3075326572
>>> print id(z)
3075328140

<4>eg:
>>> a = 1 #a和b为数值类型
>>> b = 1
>>> a is b
True
>>> id(a)
14318944
>>> id(b)
14318944

>>> a = 'cheesezh' #a和b为字符串类型
>>> b = 'cheesezh'
>>> a is b
True
>>> id(a)
42111872
>>> id(b)
42111872

>>> a = (1,2,3) #a和b为tuple类型
>>> b = (1,2,3)
>>> a is b
False
>>> id(a)
15001280
>>> id(b)
14790408

>>> a = [1,2,3] #a和b为list类型
>>> b = [1,2,3]
>>> a is b
False
>>> id(a)
42091624
>>> id(b)
42082016

>>> a = {'cheese':1,'zh':2} #a和b为dict类型
>>> b = {'cheese':1,'zh':2}
>>> a is b
False
>>> id(a)
42101616
>>> id(b)
42098736

>>> a = set([1,2,3])#a和b为set类型
>>> b = set([1,2,3])
>>> a is b
False
>>> id(a)
14819976
>>> id(b)
14822256

结论：只有数值型和字符串型的情况下，a is b才为True；当tuple，list，dict或set类型时，a is b为False！

7. None 
>>> s = None
>>> type(s)
<type 'NoneType'>

<1>
None是一个特殊的常量。
None和False不同。
None不是0。
None不是空字符串。
None和任何其他的数据类型比较永远返回False。
None有自己的数据类型NoneType。
你可以将None复制给任何变量，但是你不能创建其他NoneType对象。

<2>判断某个对象是否为None
if X is None：
if not X is None: # if not (X is None): 
//更好的是写作 if X is not None这样没有歧义

if not X: #此时会有歧义
当X为None, False, 空字符串"", 0, 空列表[], 空字典{}, 空元组()这些时，not X为都为真，无法分辨出是其中的哪一个。

<3>None与""(空字符串)	
1)不同的数据类型
None表示该值是一个空对象，None是Python里一个特殊的值。
None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
注：可以将None赋值给任何变量，也可以将任何变量赋值给一个None值的对象。

2)判断的时候均是False

3)属性不同:使用dir()函数返回参数的属性、方法列表。
如果参数包含方法dir()，该方法将被调用。如果参数不包含dir()，该方法将最大限度地收集参数信息。

8. not
http://blog.csdn.net/evan123mg/article/details/50174669

在python中not是逻辑判断词，用于布尔型True和False，not True为False，not False为True。
<1>not与逻辑判断句if连用，代表not后面的表达式为False的时候，执行冒号后面的语句。
>>> if 0 is not 1:
...  print 1
...
1
>>> if not 0 == 1:
...     print 1
...
1
	
<2>判断元素是否在列表或者字典中。
if a not in b: #a是元素，b是列表或字典。这句话的意思是如果a不在列表b中，那么就执行冒号后面的语句。
	
5、内置函数help()的使用
查看python所有的modules：help("modules")
单看python所有的modules中包含指定字符串的modules： help("modules yourstr")
查看python中常见的topics： help("topics")
查看python标准库中的module：import os.path + help("os.path")
查看python内置的类型：help("list")
查看python类型的成员方法：help("str.find") 
查看python内置函数：help("open")

7、signal模块
https://www.cnblogs.com/madsnotes/articles/5688681.html
signal模块有各种信号名的宏定义，与Linux保持一致。

<1>signal包的核心是使用 signal.signal()函数来预设(register)信号处理函数:
signal.signal(signalnum, handler)		//signalnum为某个信号，handler为该信号的处理函数
当handler为signal.SIG_IGN时，信号被无视(ignore)。
当handler为singal.SIG_DFL，进程采取默认操作(default)。
当handler为一个函数名时，进程采取函数中定义的操作。

信号处理函数的两个参数:一个用来识别信号(signum)，另一个用来获得信号发生时，进程栈的状况(stack frame)。
这两个参数都是由signal.singnal()函数来传递的。

9、from A import B as C  \  import A as B
给B一个C的别称

10、xml.etree.ElementTree解析XML
from xml.etree import ElementTree as ET
<1>tree = ET.parse('xmlfilepath')

12、psycopg2模块	//操作PostgreSQL

14、glob
glob模块是最简单的模块之一，内容非常少。用它可以查找符合特定规则的文件路径名。跟使用windows下的文件搜索差不多。
查找文件只用到三个匹配符：”*”, “?”, “[]”。
”*”匹配0个或多个字符；
”?”匹配单个字符；
”[]”匹配指定范围内的字符，如：[0-9]匹配数字。

<1>glob.glob
返回所有匹配的文件路径列表。它只有一个参数pathname，定义了文件路径匹配规则，这里可以是绝对路径，也可以是相对路径。

<2>glob.iglob
获取一个可编历对象，使用它可以逐个获取匹配的文件路径名。
与glob.glob()的区别是：glob.glob同时获取所有的匹配路径，而glob.iglob一次只获取一个匹配路径。


15、内置函数filter()
filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。

<1>例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：
def is_odd(x):
    return x % 2 == 1

然后，利用filter()过滤掉偶数：

>>>filter(is_odd, [1, 4, 6, 7, 9, 12, 17])
结果：

[1, 7, 9, 17]

<2> help()
Return those items of sequence for which function(item) is true.  
If function is None, return the items that are true.  
If sequence is a tuple or string, return the same type, else return a list.


16、注意点
<1> += 和 =不同
list1 = [1,2,3]
list2 = [1,2,3]

def change_list1(l):
	l += [4]
	
def change_list2(l):
	l = l + [4]

change_list1(list1)
//[1,2,3,4]

change_list2(list1)
//[1,2,3]


17. reload(sys)后设置编码
http://blog.csdn.net/daydayup_gzm/article/details/72654188

<1>python在安装时，默认的编码是ascii，当程序中出现非ascii编码时，python的处理常常会报：
UnicodeDecodeError: 'ascii' codec can't decode byte 0x?? in position 1: ordinal not in range(128)
python没办法处理非ascii编码的，此时需要自己设置python的默认编码，一般设置为utf8的编码格式。

<2>查询系统默认编码可以在解释器中输入以下命令：
sys.getdefaultencoding()

<2>设置默认编码时使用： 
sys.setdefaultencoding('utf8')
//可能会报AttributeError: 'module' object has no attribute 'setdefaultencoding'的错误，需要执行reload(sys)，再执行以上命令就可以顺利通过。再执行sys.getdefaultencoding()就会发现编码已经被设置为utf8的了。
//如果需要在运行时（就是整个解释器启动完之后）进行setdefaultencoding，就只能重新加载sys这个模块。

<3>eg:
import sys  
reload(sys)  
sys.setdefaultencoding('utf8')












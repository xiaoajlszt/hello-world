第4章 多线程编程

4.2 进程和线程
<1>线程包括开始、执行顺序和结束三部分。它有一个指令指针，用于记录当前运行的上下文。
当其他线程运行时，它可以被抢占(中断)和临时挂起(也称为睡眠)--这种做法叫做让步(yielding)。

<2>竞态条件(race condition)
如果两个或多个线程访问同一片数据，由于数据访问的顺序不同，可能导致结果不一致的情况。
幸运的是，大多数线程库都有一些同步原语，以允许线程管理器控制执行和访问。

4.3 线程和Python
4.3.1 全局解释器锁
1、Python代码执行是由Python虚拟机(解释器主循环)进行控制的。
在主循环中同时只能有一个控制线程执行，就像单核CPU系统中的多进程一样。
尽管Python解释器中可以运行多个线程，但是在任意时刻只有一个线程会被解释器执行。

2、对Python虚拟机的访问是由全局解释器锁(GIL)控制的。这个锁用于保证同时只能有一个线程运行。
I/O密集型的Python程序要比计算密集型的代码能够更好地利用多线程环境。

/**********************************************************/
python下多线程是鸡肋，推荐使用多进程。
多核下，想做并行提升效率，比较通用的方法是使用多进程，能够有效提高执行效率。
http://blog.chinaunix.net/uid-12014716-id-5691776.html
/**********************************************************/

4.3.2 退出线程
1、当一个线程完成函数的执行时，就会退出。也可以通过调用诸如thread.exit()之类的退出函数，
或者sys.exit()之类的退出Python进程的标准方法，亦或者抛出SystemExit异常，来使线程退出。
但不能直接"终止"一个线程。

2、主线程应该做一个好的管理者，负责了解每个单独线程需要执行什么，每个派生的线程需要哪些数据或参数，
这些线程执行完成后会提供什么结果。这样，主线程就可以收集每个线程的结果，然后汇总成一个有意义的最终结果。

4.3.3 在Python中使用线程
1、python虽然支持多线程编程，但还是需要取决于它所允许的操作系统。
2、python使用兼容POSIX的线程，也就是众所周知的pthread。

4.3.4 不使用线程的情况

4.3.5 Python的threading模块
1、Python提供了多个模块支持多线程编程，包括thread、threading、Queue模块等。
thread-提供了基本的线程和锁定支持
threading-提供了更高级别、功能更全面的线程管理
queue-可以创建一个队列数据结构，用于在多线程之间进行共享。

2、推荐使用更高级别的threading模块，而不使用thread模块。
其中一个重要原因是thread对进程何时退出没有控制，当主线程结束时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理；threading能确保重要的子线程在进程退出前结束。

4.4 thread模块
1、thread模块提供了基本的同步数据结构，成为锁对象（lock object，也叫原语锁、简单锁、互斥锁、互斥和二进制信号量）。

2、thread的核心函数是start_new_thread()，它的参数包括函数、函数参数以及可选的关键字参数。将专门派生新的线程来调用该函数。
<1>start_new_thread(function,args,kwargs=None)
<2>allocate_lock()  分配LockType锁对象
<3>exit()  推出线程指令

3、LockType锁对象的方法
acquire(wait=None)  尝试获取锁对象
locked()            如果获取了锁对象则返回True，否则返回False
release()           释放锁

4.5 threading模块



第6章 数据库编程













































yield 和 yield from
https://juejin.im/post/5b3af9fb51882507d4487144
http://blog.csdn.net/u010161379/article/details/51645264

1. yield from后面加上可迭代对象，它可以把可迭代对象里的每个元素一个一个的yield出来，对比yield来说代码更加简洁，结构更加清晰。
yield from 是在Python3.3才出现的语法。
yield from 后面需要加的是可迭代对象，它可以是普通的可迭代对象，也可以是迭代器，甚至是生成器。

astr='ABC'
alist=[1,2,3]
adict={"name":"wangbm","age":18}
agen=(i for i in range(4,8))

# use yield
def gen(*args, **kw):
    for item in args:
        for i in item:
            yield i

# use yield from
def gen(*args, **kw):
    for item in args:
        yield from item
			
new_list=gen(astr, alist, adict， agen)
print(list(new_list))
# ['A', 'B', 'C', 1, 2, 3, 'name', 'age', 4, 5, 6, 7]


2. yield from 实现 generator 的嵌套： yield from 后面加上一个生成器后，就实现了生成的嵌套。
当然实现生成器的嵌套，并不是一定必须要使用yield from，而是yield from可以让我们避免让我们自己处理各种料想不到的异常，而让我们专注于业务代码的实现。

<1>几个概念
- 调用方：调用委派生成器的代码
- 委托生成器：包含yield from表达式的生成器函数
- 子生成器：yield from后面加的生成器函数

<2>eg:

# 子生成器
def average_gen():
    total = 0
    count = 0
    average = 0
    while True:
        new_num = yield average
        count += 1
        total += new_num
        average = total/count

# 委托生成器
def proxy_gen():
    while True:
        yield from average_gen()

# 调用方
def main():
    calc_average = proxy_gen()
    next(calc_average)            # 预激下生成器
    print(calc_average.send(10))  # 打印：10.0
    print(calc_average.send(20))  # 打印：15.0
    print(calc_average.send(30))  # 打印：20.0

if __name__ == '__main__':
    main()
	
<3>说明
-委托生成器在调用方与子生成器之间建立一个双向通道。
调用方可以通过send()直接发送消息给子生成器，而子生成器yield的值，也是直接返回给调用方。
	
-你可能会经常看到有些代码，还可以在yield from前面看到可以赋值。你可能会以为，子生成器yield回来的值，被委托生成器给拦截了。
你可以亲自写个demo运行试验一下，并不是你想的那样。因为委托生成器只起一个桥梁作用，它建立的是一个双向通道，它并没有权利也没有办法，对子生成器yield回来的内容做拦截。

# 子生成器
def average_gen():
    total = 0
    count = 0
    average = 0
    while True:
        new_num = yield average
        if new_num is None:
            break
        count += 1
        total += new_num
        average = total/count

    # 每一次return，都意味着当前协程结束。
    return total,count,average

# 委托生成器
def proxy_gen():
    while True:
        # 只有子生成器要结束（return）了，yield from左边的变量才会被赋值，后面的代码才会执行。
        total, count, average = yield from average_gen()
        print("计算完毕！！\n总共传入 {} 个数值， 总和：{}，平均数：{}".format(count, total, average))

# 调用方
def main():
    calc_average = proxy_gen()
    next(calc_average)            # 预激协程
    print(calc_average.send(10))  # 打印：10.0
    print(calc_average.send(20))  # 打印：15.0
    print(calc_average.send(30))  # 打印：20.0
    calc_average.send(None)      # 结束协程
    # 如果此处再调用calc_average.send(10)，由于上一协程已经结束，将重开一协程

if __name__ == '__main__':
    main()
	
	
输出：
10.0
15.0
20.0
计算完毕！！
总共传入 3 个数值， 总和：60，平均数：20.0

3. yield from 可以帮我们处理异常
yield from帮我们做了很多的异常处理，而且全面，而这些如果我们要自己去实现的话，一个是编写代码难度增加，写出来的代码可读性极差。
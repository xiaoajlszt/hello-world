协程(coroutine)又称为微线程，纤程。

1、执行过程中，协程内部可以中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。
在一个协程中中断，去执行其他子程序，不是函数调用，有点类似CPU的中断。

2、协程并不是多线程，而是在一个线程中执行。
<1>协程执行效率高。子程序切换不是线程切换，而是程序自身控制。因此没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。
<2>不需要锁机制。因为只有一个线程，不存在同时写变量冲突。
协程中控制共享资源不需要加锁，只需要判断状态，执行效率比多线程高很多。

3、协程是一个线程执行，那怎么利用多核CPU？
多进程+协程 既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。

4、Python对协程的支持是通过generator实现的

def consumer():
    r = ''
    while True:
        n = yield r
        if not n:
            return

        print('[CONSUMER] Consuming %s...' % n)
        r = '200 OK'

def producer(c):
    c.send(None)
    n = 0
    while n < 5:
        n = n + 1
        print('[PRODUCER] Producing %s...' % n)
        r = c.send(n)
        print('[PRODUCER] Consumer return: %s' % r)

    c.close()


c = consumer()
producer(c)

执行结果：
[PRODUCER] Producing 1...
[CONSUMER] Consuming 1...
[PRODUCER] Consumer return: 200 OK
[PRODUCER] Producing 2...
[CONSUMER] Consuming 2...
[PRODUCER] Consumer return: 200 OK
[PRODUCER] Producing 3...
[CONSUMER] Consuming 3...
[PRODUCER] Consumer return: 200 OK
[PRODUCER] Producing 4...
[CONSUMER] Consuming 4...
[PRODUCER] Consumer return: 200 OK
[PRODUCER] Producing 5...
[CONSUMER] Consuming 5...
[PRODUCER] Consumer return: 200 OK

分析：
<1>consumer函数是一个generator，把一个consumer传给producer后：
- 首先调用c.send(None)启动generator;
- 然后，一旦生产了东西，通过c.send(n)切换到consumer执行;
- consumer通过yield拿到消息，处理，又通过yield把结果传回;
- producer拿到consumer处理的结果，继续生产下一条消息;
- producer决定不生产了，通过c.close()关闭consumer，整个过程结束。

<2>整个流程无锁，由一个线程执行，producer和consumer协作完成任务，所以称为"协程"，而非线程的抢占式多任务。

------------------------------------------------
关于generator
1. send(msg)与next()的区别在于send可以传递参数给yield表达式，这时传递的参数会作为yield表达式的值，而yield的参数是返回给调用者的值。
换句话说，就是send可以强行修改上一个yield表达式值。
比如函数中有一个yield赋值，a = yield 5，第一次迭代到这里会返回5，a还没有赋值。
第二次迭代时，使用send(10)，那么，就是强行修改yield 5表达式的值为10，那么a=10。

2. 第一次调用时必须先next()或send(None)，否则会报错，send后之所以为None是因为这时候没有上一个yield(根据第1条)。
可以认为，next()等同于send(None)。
------------------------------------------------

5、子程序就是协程的一种特例！

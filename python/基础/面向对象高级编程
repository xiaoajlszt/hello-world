一、使用__slots__
1、动态绑定允许在程序运行过程中给class加上功能(属性、方法)：
class Student(object):
    pass
	
>>> def set_score(self, score):
...     self.score = score
...
>>> Student.set_score = set_score

通常情况下set_score方法可以直接定义在class中。

2、使用__slots__
<1>Python允许在定义class时，定义一个特殊的__slots__变量，来限制该class实例能添加的属性。
class Student(object):
    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
	
<2>__slots__定义的属性仅对当前类的实例起作用，对子类的实例不起作用。
除非在子类中也定义__slots__，这样，子类实例允许定义的属性就是自身的__slots__加上父类的__slots__。

二、使用@property
调用Python内置@property装饰器，可以把一个方法变成属性。

三、多重继承
1、使用多重继承，一个子类可以同时获得多个父类的所有功能。
class Dog(Mammal, Runable):
    pass

2、MinIn
在设计类打继承关系时，通常主线都是单一继承下来的。但是，如果要加入额外的功能，可以通过多重继承实现。
<1>这种设计通常称为MixIn。MinIn的目的就是给一个类增加多个功能。
<2>只允许单一继承的语言(如Java)不能使用MixIn的设计。

四、定制类
类似__slots__这种形如__XXX__的变量或者函数名在Python中是有特殊用途的。

1、__str__
<1>初始
>>> class Student(object):
...     def __init__(self, name):
...         self.name = name
...
>>> print(Student('Michael'))
<__main__.Student object at 0x109afb190> 

<2>增加__str__()方法
>>> class Student(object):
...     def __init__(self, name):
...         self.name = name
...     def __str__(self):
...         return 'Student object (name: %s)' % self.name
...
>>> print(Student('Michael'))
Student object (name: Michael)

<3>如果不加print
>>> s = Student('Michael')
>>> s
<__main__.Student object at 0x109afb310>
这是因为直接显示变量调用的不是__str__()，而是__repr__()。
两者的区别是__str__()返回用户看到的字符串，__repr__()返回程序开发者看到的字符串。
__repr__()是为调试服务的。

<4>解决办法是再定义一个__repr__()。但是通常__str__()和__repr__()代码都是一样的，
所以，有个偷懒的写法：
class Student(object):
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return 'Student object (name=%s)' % self.name
    __repr__ = __str__

2、__iter__
如果一个类

一、使用__slots__
1、动态绑定允许在程序运行过程中给class加上功能(属性、方法)：
class Student(object):
	pass

<1>方法一：动态绑定
# 给Student类绑定func1，所有实例均可调用:
1) MethodType(func1, Student)

2) >>> def set_score(self, score):
...     self.score = score
...
>>> Student.set_score = set_score

# 给st1实例绑定func2，对其他实例是不起作用:
Student st1
MethodType(func2, st1)
	
<2>方法二：常情况下set_score方法可以直接定义在class中。

2、使用__slots__
<1>Python允许在定义class时，定义一个特殊的__slots__变量，来限制该class实例能添加的属性。
class Student(object):
    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
	
<2>__slots__定义的属性仅对当前类的实例起作用，对子类的实例不起作用。
除非在子类中也定义__slots__，这样，子类实例允许定义的属性就是自身的__slots__加上父类的__slots__。

二、使用@property
装饰器(decorator)可以给函数动态加上功能，对于类的方法，装饰器一样起作用。
- Python内置的@property装饰器就是负责把一个方法变成属性调用;
- 把一个getter方法变成属性，只需要加上@property就可以了，
此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值;
- 还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性。

class Student(object):
    __slots__ = ('__name', '__age', '__score')

    def __init__(self, name, age, score):
        self.__name = name
        self.__age = age
        self.__score = score

    @property
    def score(self):
        return self.__score

    @score.setter
    def score(self, score):
        if not isinstance(score, int):
            raise ValueError('score must be int')

        if score > 100 or score < 0:
            raise ValueError('score must between 0 and 100')
        else:
            self.__score = score


if __name__ == '__main__':
    st1 = Student('allen', 30, 80)
    st1.score = 100
    print(st1.score)

三、多重继承
1、使用多重继承，一个子类可以同时获得多个父类的所有功能。
class Dog(Mammal, Runable):
    pass

2、MixIn
在设计类打继承关系时，通常主线都是单一继承下来的。但是，如果要加入额外的功能，可以通过多重继承实现。

class RunnableMixIn(object):
	pass
	
class CarnivorousMixIn(object):
	pass

class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):
    pass

<1>这种设计通常称为MixIn。MixIn的目的就是给一个类增加多个功能。
<2>只允许单一继承的语言(如Java)不能使用MixIn的设计。
这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。

四、定制类
类似__slots__这种形如__XXX__的变量或者函数名在Python中是有特殊用途的：

0. __len__() 可以让class具有len()方法。

1、__str__() 可以让优化类实例的打印。

<1>原始
>>> class Student(object):
...     def __init__(self, name):
...         self.name = name
...
>>> print(Student('Michael'))
<__main__.Student object at 0x109afb190> 

<2>增加__str__()方法
>>> class Student(object):
...     def __init__(self, name):
...         self.name = name
...     def __str__(self):
...         return 'Student object (name: %s)' % self.name
...
>>> print(Student('Michael'))
Student object (name: Michael)

-----------------------------------------------------------
<1>但是如果不使用 print，打印结果依然没有优化：
>>> s = Student('Michael')
>>> s
<__main__.Student object at 0x109afb310>

这是因为直接显示变量调用的不是__str__()，而是__repr__()。
两者的区别是__str__()返回用户看到的字符串，__repr__()返回程序开发者看到的字符串。__repr__()是为调试服务的。

<2>解决办法是再定义一个__repr__()。通常__str__()和__repr__()代码都是一样的，
所以，有个偷懒的写法：
class Student(object):
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return 'Student object (name=%s)' % self.name
    __repr__ = __str__
-----------------------------------------------------------
	
2、__iter__()
如果一个类想被用于for...in循环，类似list或tuple，就必须实现一个__iter__()方法。
该方法返回一个迭代对象，for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。

class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1

    def __iter__(self):
        return self

    def __next__(self):
        self.a, self.b = self.b, self.a + self.b
        if self.a > 10000:
            raise StopIteration()
        return self.a


if __name__ == '__main__':
    for i in Fib():
        print(i)

3. __getitem__()
<1>2中的Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第n个元素:
Fib()[5]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'Fib' object does not support indexing

要表现得像list那样按照下标取出元素，需要实现__getitem__()方法。

class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1

    def __iter__(self):
        return self

    def __next__(self):
        self.a, self.b = self.b, self.a + self.b
        if self.a > 10000:
            raise StopIteration()
        return self.a

    def __getitem__(self, n):
        a, b = 1, 1
        for i in range(n):
            a, b = b, a + b
        return a


if __name__ == '__main__':
    f = Fib()
    for i in range(10):
        print(f[i])

4. __getattr__()
正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。为了避免报错可以写一个__getattr__()方法，动态返回一个属性或方法：

class Student(object):
    def __init__(self):
        self.name = 'Michael'

    def __getattr__(self, attr):
        if attr=='score':
            return 99
			
		if attr=='age':	# 方法
            return lambda: 25
			
		raise AttributeError('\'Student\' object has no attribute \'%s\'' % attr)
			
当调用不存在的属性时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性，这样，我们就有机会返回score的值：
>>> s = Student()
>>> s.name
'Michael'
>>> s.score
99
>>> s.age()
25

注：
<1>只有在没有找到属性的情况下，才调用__getattr__，已有的属性，比如name，不会在__getattr__中查找。
<2>任意调用如s.abc都会返回None，这是因为我们定义的__getattr__默认返回就是None。
要让class只响应特定的几个属性，我们就要按照约定，抛出AttributeError的错误。

5. __call__() # 直接对实例进行调用
class Student(object):
    def __init__(self, name):
        self.name = name

    def __call__(self):
        print('My name is %s.' % self.name)
		
>>> s = Student('Michael')
>>> s() # self参数不要传入
My name is Michael.

------------------------------------------------
__call__()还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。
如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。

那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个Callable对象，比如函数和我们上面定义的带有__call__()的类实例：
>>> callable(Student())
True
>>> callable(max)
True
>>> callable([1, 2, 3])
False
>>> callable(None)
False
>>> callable('str')
False

通过callable()函数，我们就可以判断一个对象是否是"可调用"对象。
------------------------------------------------

6. 更多的Python类定制方法，详见
https://docs.python.org/3/reference/datamodel.html#special-method-names

五、枚举类
1. Python提供了Enum类来实现这个功能, 为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。
from enum import Enum
Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))	# 这样我们就获得了Month类型的枚举类，可以直接使用Month.Jan来引用一个常量，或者枚举它的所有成员：

for name, member in Month.__members__.items():
    print(name, '=>', member, ',', member.value)	# value属性则是自动赋给成员的int常量，默认从1开始计数。

2. 如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：

from enum import Enum, unique

@unique
class Weekday(Enum):
    Sun = 0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fir = 5
    Sat = 6

# 既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量:
print(Weekday.Sun)
print(Weekday['Sun'])
print(Weekday.Sun.value)
print(Weekday(1))

Result：
Weekday.Sun
Weekday.Sun
0
Weekday.Mon

六、元类
1. type() 

动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。
当Python解释器载入hello模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个Hello的class对象。

<1> type可以查看一个类型或变量的类型

>>> h = Hello()
>>> print(type(Hello))	# Hello是一个class，它的类型就是type
<class 'type'>
>>> print(type(h))		# h是一个实例，它的类型就是class Hello (Hello class定义在hello.py中)
<class 'hello.Hello'>

<2> class的定义是运行时动态创建的，而创建class的方法就是使用type()函数。
type()函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过type()函数创建出Hello类，而无需通过class Hello(object)...的定义：

要创建一个class对象，type()函数依次传入3个参数：
- class的名称；
- 继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；
- class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。
通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。

>>> def fn(self, name='world'): # 先定义函数
...     print('Hello, %s.' % name)
...
>>> Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class

2. metaclass
除了使用type()动态创建类以外，要控制类的创建行为，还可以使用metaclass。
先定义metaclass，就可以创建类，最后创建实例。metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的"实例"。








































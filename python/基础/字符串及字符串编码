一、编码介绍
1、ASCII		
127个字符，一个字节表示一个字符。

2、Unicode		
把所有语言都统一到一套编码中，就不会出现乱码问题了。
<1>通常使用两个字节表示一个字符，某些特殊字符需要4个字节。

3、UTF-8
<1>本着节约的精神，将Unicode编码转换为可变长的编码UTF-8。根据不同的数字大小编码成1-6个字节。
通常英语1个字节，汉字3个字节。
字符		ASCII			Unicode					 UTF-8
A		  01000001		00000000 01000001		     01000001
中			  x			01001110 00101101	11100100 10111000 10101101

<2>可以看出：UTF-8还有一个好处，即ASCII编码可以看做是UTF-8的一部分。
所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。

4、计算机系统通用的字符编码工作方式：
内存中使用Unicode编码。
文件中使用UTF-8编码。

<1>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，
编辑完成后，再把Unicode转换为UTF-8保存到文件。

<2>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。
所以你看到很多网页的源码上会有类似<meta charset="UTF-8" />的信息，表示该网页正是用的UTF-8编码。

二、Python的字符串

-----------------------------------------------------------------------------

以下适用于Python3：

0、在最新的Python3版本中，字符串是以Unicode编码的，也就是说Python的字符串支持多语言。

1、单字符编码
<1>ord()函数获取字符的整数表示
>>> ord('中')	#'中'的unicode编码是01001110 00101101，转换为十进制为20013
20013
<2>chr()函数把编码转换为对应的字符
>>> chr(66)
'B'
<3>如果知道字符的整数编码，还可以用十六进制表示str：
>>> '\u4e2d\u6587'	#'中'的unicode编码是01001110 00101101，即为4e2d
'中文'

2、Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。
如果要在网络上传输，或者保存在磁盘中，就需要把str变为以字节为单位的bytes。

<1>Python对bytes类型的数据用带b前缀的单引号或双引号表示。
x = b'ABC'

1) 区分'ABC'和b'ABC'
前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占一个字节，而Unicode每个字符占两个字节。
>>> 'ABC' == b'ABC'
False

<2>以Unicode表示的str通过encode()方法可以编码为指定的bytes。
>>> 'ABC'.encode('ascii')
b'ABC'
>>> '中文'.encode('utf-8')
b'\xe4\xb8\xad\xe6\x96\x87'   //在bytes中无法显示为ASCII字符的字节，用\x##表示
>>> '中文'.encode('ascii')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)

纯英文的str可以用ASCII编码为bytes，内容是一样的。
含有中文的str可以用UTF-8编码为bytes。
含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围。

3、反之，从网络或磁盘中读取字节流，那么读到的数据就是bytes。
要把bytes转变为str，就需要用decode()方法。
>>> b'ABC'.decode('ascii')  //decode()的结果Unicode编码的字符串
'ABC'
>>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
'中文'

<1>如果bytes中包含无法解码的字节，decode()方法会报错：
>>> b'\xe4\xb8\xad\xff'.decode('utf-8')
Traceback (most recent call last):
  ...
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte

<2>如果bytes中只有一部分无效的字节，可以传入errors='ignore'忽略错误的字节：
>>> b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')
'中'

<3>要计算str包含多少多少个字符(注意是字符！！！)，可以用len()函数：
>>> len('ABC')
3
>>> len('中文')
2

如果换成bytes，len()函数就会计算字节数：
>>> len(b'ABC')
3
>>> len(b'\xe4\xb8\xad\xe6\x96\x87')
6
>>> len('中文'.encode('utf-8'))
6

4、在操作字符串时，经常会遇到str和bytes的互相转换。
为了避免乱码问题，应当坚持使用UTF-8编码对str和bytes进行转换。

-------------------------------------------------------------------------

以下适用于Python2.6：

1. 因为Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码。

普通的字符串'ABC'在Python内部都是ASCII编码的。

<1>Python提供了ord()和chr()函数，可以把字母和对应的数字相互转换：
>>> ord('A')
65
>>> chr(65)
'A'

2. Python后来添加了对Unicode的支持，以Unicode表示的字符串用u'...'表示，比如：
>>> print u'中文'
中文
>>> u'中'
u'\u4e2d'

//u'中'和u'\u4e2d'是一样的，\u后面是十六进制的Unicode码。因此，u'A'和u'\u0041'也是一样的。

3. 两种字符串如何相互转换？
字符串'xxx'虽然是ASCII编码，但也可以看成是UTF-8编码，而u'xxx'则只能是Unicode编码。

<1>把u'xxx'转换为UTF-8编码的'xxx'用encode('utf-8')方法：
>>> u'ABC'.encode('utf-8')
'ABC'
>>> u'中文'.encode('utf-8')
'\xe4\xb8\xad\xe6\x96\x87'

英文字符转换后表示的UTF-8的值和Unicode值相等（但占用的存储空间不同）;
而中文字符转换后1个Unicode字符将变为3个UTF-8字符(\xe4就是其中一个字节，因为它的值是228，没有对应的字母可以显示，所以以十六进制显示字节的数值)。

<2>把UTF-8编码表示的字符串'xxx'转换为Unicode字符串u'xxx'用decode('utf-8')方法：
>>> 'abc'.decode('utf-8')
u'abc'
>>> '\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
u'\u4e2d\u6587'
>>> print '\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
中文

4. 由于历史遗留问题，Python2.x版本虽然支持Unicode，但在语法上需要'XXX'和u'XXX'两种字符串表示方式。
在Python3.x中把'XXX'和u'XXX'统一成Unicode编码，即写不写前缀u都一样，都为Unicode编码。而以字节形式的字符串则必须加上b前缀：b'XXX'。

python 2.x
>>> 'ABC' == b'ABC'
True
>>> '中'
'\xe4\xb8\xad'
//字符串是以ASCII编码

python 3.x
>>> 'ABC' == b'ABC'
False
>>> '中'
'中'
//字符串是以Unicode编码


-------------------------------------------------------------------------

以下部分同时适合Python2.6和Python3：

5、由于Python源代码也是文本文件，当源代码中包含中文时，需要保存为UTF-8编码。
Python解释器读取源代码时，为了让它按UTF-8编码读取，通常在文件开头写上：
#!/usr/bin/env python
# -*- coding: utf-8 -*-  

//第一行是为了告诉linux/OS X系统，这是一个Python可执行程序，windows系统会忽略这个注释；
//第二行是为了告诉Python解释器，按照UTF-8编码读取源文件，否则源代码中写的中文输出可能会有乱码。

注：
1. 声明了UTF-8编码并不意味着.py文件就是UTF-8编码的，必须同时要确保文本编辑器正在使用UTF-8 without BOM编码。
关于UTF-8 without BOM和UTF-8
http://blog.csdn.net/wangnan537/article/details/45222653

eg:
#!/usr/bin/env python
# -*- coding: utf-8 -*-  
print '中文测试正常'

//在nodepad++中将该.py文件使用UTF-8 without BOM编码，执行时就可以正常显示中文。

2. 经测试python2.X必须要加# -*- coding: utf-8 -*-，3.X中不加也不会报错。

---------------------------------------------------------------------------
补充说明：
1、Python的编码注释# -*- coding:utf-8 -*-
如果要在python2的py文件里面写中文，则必须要添加一行声明文件编码的注释，否则python2会默认使用ASCII编码。
<1>必须将编码注释放在第一行或者第二行。  //必须前两行，前面有空行都不可以
<2>可选格式有
1)
# coding=<encoding name> 
2)
#!/usr/bin/python  
# -*- coding: <encoding name> -*- 
3)
#!/usr/bin/python  
# vim: set fileencoding=<encoding name> : 

2、查看文件编码方式
<1>在vim中:set fileencoding查看文件编码格式。
<2>enca命令  //需要安装
enca filename

<3>在Vim中也可以直接进行转换文件编码,比如将一个文件转换成utf-8格式。
:set fileencoding=utf-8
---------------------------------------------------------------------------

6、格式化输出
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数

<1>格式化整数和浮点数还可以指定是否补0和整数与小数的位数
>>> '%2d-%02d' % (3,1)
' 3-01'
>>> '%.2f' % 3.1415926
'3.14'

<2>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'

<3>有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
>>> 'growth rate: %d %%' % 7
'growth rate: 7 %'

7. format()
另一种格式化字符串的方法是使用format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}......
>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'

三、字符串方法
1、s.encode()
S.encode(encoding='utf-8', errors='strict') -> bytes
Encode S using the codec registered for encoding. Default encodingis 'utf-8.

2、s.decode()
bytes -> str  //str为Unicode编码

3、len(s) //计算str包含多少个字符
>>> len('ABC')
3
>>> len('中文')
2

如果转换成bytes，len()就计算字节数
>>> len(b'ABC')
3
>>> len('中文'.encode('utf-8'))
6

4、s.strip(rm) //s为字符串，rm为要删除的字符序列
删除字符串s中开头、结尾中位于rm序列的字符。

eg：
>>> a = '123abc'
>>> a.strip('21')  //结果是一样的
'3abc'   
>>> a.strip('12')  //结果是一样的
'3abc'

<1>s.lstrip(rm)
删除字符串s中开头位于rm序列的字符。

<2>s.rstrip(rm)
删除字符串s中结尾位于rm序列的字符。

当rm为空时，默认删除空白符(\n \r \t)。

5、s.title()
>>> s="abcdef"
>>> print s.title()
Abcdef
>>> s="abcdeF"      
>>> print s.title()
Abcdef

返回第一个字母大写，后续字母小写的字符串。

<1>s.istitle()
>>> ''.istitle()
False
>>> 'Love python!'.istitle()
False
>>> 'Love Python!'.istitle()
True

6、ljust()、rjust()、center()
>>> s="123456"
>>> print s.ljust(4)
123456
>>> print s.ljust(10,'*')
123456****
>>> print s.ljust(10,' ')
123456    //空格补全

7、upper()
>>> s="abce"
>>> print s.upper()
ABCE

8、split()
str.split = split(...)
    S.split([sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are removed
    from the result.

9. replace()
str.replace = replace(...)
    S.replace(old, new[, count]) -> string

    Return a copy of string S with all occurrences of substring
    old replaced by new.  If the optional argument count is
    given, only the first count occurrences are replaced.
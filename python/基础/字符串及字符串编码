一、编码介绍
1、ASCII		
127个字符，一个字节表示一个字符。

2、Unicode		
把所有语言都统一到一套编码中，就不会出现乱码问题了。
<1>通常使用两个字节表示一个字符，某些特殊字符需要4个字节。

3、UTF-8
<1>本着节约的精神，将Unicode编码转换为可变长的编码UTF-8。根据不同的数字大小编码成1-6个字节。
通常英语1个字节，汉字3个字节。
字符		ASCII			Unicode					 UTF-8
A		  01000001		00000000 01000001		     01000001
中			  x			01001110 00101101	11100100 10111000 10101101

<2>可以看出：UTF-8还有一个好处，即ASCII编码可以看做是UTF-8的一部分。
所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。

4、计算机系统通用的字符编码工作方式：
内存中使用Unicode编码。
文件中使用UTF-8编码。

<1>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，
编辑完成后，再把Unicode转换为UTF-8保存到文件。

<2>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。
所以你看到很多网页的源码上会有类似<meta charset="UTF-8" />的信息，表示该网页正是用的UTF-8编码。

二、Python的字符串
Python字符串类型是str，在内存中以Unicode表示，一个字符对应若干字节，支持多种语言。

0、基础
<1>如果字符串内部既包含'又包含"，可以用转义符\来表示。
\n	换行
\t	制表符
\\	打印出\

<2>使用r''表示''内部的字符串默认不转义。
>>> print(r'\\\t\\')
\\\t\\

<3>'''三引号表示换行
>>> print('''123
	456''')
123
456

1、单字符处理
<1>ord()函数获取字符的整数表示
>>> ord('中')
20013
<2>chr()函数把编码转换为对应的字符
>>> chr(66)
'B'

2、如果要在网络上传输，或者保存在磁盘中，就需要把str变为以字节为单位的bytes。
Python对bytes类型的数据用带b前缀的单引号或双引号表示。

<1>区分'ABC'和b'ABC'
前者是str，后者虽然显示和前者一样，但bytes的每个字符都只占一个字节。
>>> 'ABC' == b'ABC'
False

<2>以Unicode表示的str通过encode()方法可以编码为指定的bytes。
>>> 'ABC'.encode('ascii')
b'ABC'
>>> '中文'.encode('utf-8')
b'\xe4\xb8\xad\xe6\x96\x87'   //在bytes中无法显示为ASCII字符的字节，用\x##表示
>>> '中文'.encode('ascii')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)

纯英文的str可以用ASCII编码为bytes，内容是一样的。
含有中文的str可以用UTF-8编码为bytes。
含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围。

3、反之，从网络或磁盘中读取字节流，那么读到的数据就是bytes。
要把bytes转变为str，就需要用decode()方法。
>>> b'ABC'.decode('ascii')
'ABC'
>>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
'中文'

4、在操作字符串时，经常会遇到str和bytes的互相转换。
为了避免乱码问题，应当坚持使用UTF-8编码对str和bytes进行转换。

5、由于Python源代码也是文本文件，当源代码中包含中文时，需要保存为UTF-8编码。
Python解释器读取源代码时，为了让它按UTF-8编码读取，通常在文件开头写上：
#!/usr/bin/env python
# -*- coding: utf-8 -*-  //声明utf-8编码

注：经测试python2.X必须要加# -*- coding: utf-8 -*-，3.X中不加也不会报错。

------------------------------------------------------------------
补充说明：
1、Python的编码注释# -*- coding:utf-8 -*-
如果要在python2的py文件里面写中文，则必须要添加一行声明文件编码的注释，否则python2会默认使用ASCII编码。
<1>必须将编码注释放在第一行或者第二行。  //必须前两行，前面有空行都不可以
<2>可选格式有
1)
# coding=<encoding name> 
2)
#!/usr/bin/python  
# -*- coding: <encoding name> -*- 
3)
#!/usr/bin/python  
# vim: set fileencoding=<encoding name> : 

2、查看文件编码方式
<1>在vim中:set fileencoding查看文件编码格式。
<2>enca命令  //需要安装
enca filename

<3>在Vim中也可以直接进行转换文件编码,比如将一个文件转换成utf-8格式。
:set fileencoding=utf-8
------------------------------------------------------------------

6、格式化输出
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数

<1>格式化整数和浮点数还可以指定是否补0和整数与小数的位数
>>> '%2d-%02d' % (3,1)
' 3-01'
>>> '%.2f' % 3.1415926
'3.14'

<2>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'

<3>有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
>>> 'growth rate: %d %%' % 7
'growth rate: 7 %'


三、字符串方法
1、s.encode()
S.encode(encoding='utf-8', errors='strict') -> bytes
Encode S using the codec registered for encoding. Default encodingis 'utf-8.

2、s.decode()
bytes -> str  //str为Unicode编码

3、len(s) //计算str包含多少个字符
>>> len('ABC')
3
>>> len('中文')
2

如果转换成bytes，len()就计算字节数
>>> len(b'ABC')
3
>>> len('中文'.encode('utf-8'))
6

4、s.strip(rm) //s为字符串，rm为要删除的字符序列
删除字符串s中开头、结尾中位于rm序列的字符。

eg：
>>> a = '123abc'
>>> a.strip('21')  //结果是一样的
'3abc'   
>>> a.strip('12')  //结果是一样的
'3abc'

<1>s.lstrip(rm)
删除字符串s中开头位于rm序列的字符。

<2>s.rstrip(rm)
删除字符串s中结尾位于rm序列的字符。

当rm为空时，默认删除空白符(\n \r \t)。

5、s.title()
>>> s="abcdef"
>>> print s.title()
Abcdef
>>> s="abcdeF"      
>>> print s.title()
Abcdef

返回第一个字母大写，后续字母小写的字符串。

<1>s.istitle()
>>> ''.istitle()
False
>>> 'Love python!'.istitle()
False
>>> 'Love Python!'.istitle()
True

6、ljust()、rjust()、center()
>>> s="123456"
>>> print s.ljust(4)
123456
>>> print s.ljust(10,'*')
123456****
>>> print s.ljust(10,' ')
123456    //空格补全

7、upper()
>>> s="abce"
>>> print s.upper()
ABCE

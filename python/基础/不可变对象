一、基本介绍
1、字符串、整数是不可变对象，list是可变对象。
不可变（immutable）：int、字符串string、float、数值型number、元组tuple
可变（mutable）：字典型dictionary、列表型list

2、对于可变对象进行操作，内部内容是会变化的：
>>> a = ['c', 'b', 'a']
>>> a.sort()
>>> a
['a', 'b', 'c']

3、对于不可变对象进行操作，内部内容是不会变化的：
>>> s="abc"
>>> s.replace('a','A')
'Abc'
>>> s
'abc'

解释：
<1>当我们调用a.replace('a', 'A')时，实际上调用方法replace是作用在字符串对象'abc'上的，而这个方法虽然名字叫replace，但却没有改变字符串'abc'的内容。
相反，replace方法创建了一个新字符串'Abc'并返回，如果我们用变量b指向该新字符串，就容易理解了，变量a仍指向原有的字符串'abc'，但变量b却指向新字符串'Abc'了。

<2>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。
相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。

不可变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。
此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。
我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。

4、使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。

5、函数的默认参数必须指向不可变的对象。
eg:  二中4<1>

二、Python函数参数的传值和传指
https://www.cnblogs.com/shizhengwen/p/6972183.html

1. eg
def change(val):
    val.append(100)
    val = ['T', 'Z', 'Y']
nums = [0, 1]
change(nums)
print(nums)

按照C++语言的思维，如果Python函数参数的传递是传值的话，结果应该是[0, 1]，如果是传引用的话，结果应该是[‘T’, ‘Z’, ‘Y’]。 可是实际结果是：[0, 1, 100]。所以，Python函数参数的传递既不是所谓的传值也不是传引用。

2. 结论
python不允许程序员选择采用传值还是传引用。
Python参数传递采用的肯定是"传对象引用"的方式。这种方式相当于传值和传引用的一种综合。
如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过"传引用"来传递对象。如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过"传值"来传递对象。

3. 个人理解
其实对于可变对象，也与C中的传指针方式不同。如三中的l = l + [4]。
正确的理解应该是：
<1>变量与对象
Python中一切皆为对象，数字是对象，列表是对象，函数也是对象，任何东西都是对象。
而变量是对象的一个引用（又称为名字或者标签），对象的操作都是通过引用来完成的。
eg: a = []	//[]是一个空列表对象，变量 a 是该对象的一个引用

<2>在Python中，「变量」更准确叫法是「名字」，赋值操作 = 就是把一个名字绑定到一个对象上。就像给对象添加一个标签。
eg：a = 1   //整数 1 赋值给变量 a 就相当于是在整数1上绑定了一个 a 标签。
	a = 2	//整数 2 赋值给变量 a，相当于把原来整数 1 身上的 a 标签撕掉，贴到整数 2 身上。
	b = a	//把变量 a 赋值给另外一个变量 b，相当于在对象 2 上贴了 a，b 两个标签，通过这两个变量都可以对对象 2 进行操作。
?			  变量本身没有类型信息，类型信息存储在对象中，这和C/C++中的变量有非常大的出入（C中的变量是一段内存区域）

<3>Python 函数中，参数的传递本质上是一种赋值操作，而赋值操作是一种名字到对象的绑定过程，清楚了赋值和参数传递的本质之后，现在再来分析前面两段代码。
eg 1:
def foo(arg):
????arg = 2
????print(arg)
?
a = 1
foo(a)?  # 输出：2
print(a) # 输出：1

变量a绑定了 1，调用函数 foo(a) 时，相当于给参数 arg 赋值 arg=1，这时两个变量都绑定了 1。
在函数里面 arg 重新赋值为 2 之后，相当于把 1 上的 arg 标签撕掉，贴到 2 身上，而 1 上的另外一个标签 a 一直存在。因此 print(a) 还是 1。

eg 2：
def bar(args):
????args.append(1)
?
b = []
print(b)	 # 输出：[]
print(id(b)) # 输出：4324106952
bar(b)
print(b)	 # 输出：[1]
print(id(b))?# 输出：4324106952
执行 append 方法前 b 和 arg 都指向（绑定）同一个对象，执行 append 方法时，并没有重新赋值操作，也就没有新的绑定过程，append 方法只是对列表对象插入一个元素，对象还是那个对象，只是对象里面的内容变了。
因为 b 和 arg 都是绑定在同一个对象上，执行 b.append 或者 arg.append 方法本质上都是对同一个对象进行操作，因此 b 的内容在调用函数后发生了变化（但id没有变，还是原来那个对象）。

4. 其他
<1>默认参数的陷阱
>>> def add_end(L=[]):		//[]是一个可变对象，对象的值会发生变化
...     L.append('END')
...     return L
... 
>>> add_end()
['END']
>>> add_end()
['END', 'END']
>>> add_end()
['END', 'END', 'END']

解释：Python在定义函数时，默认参数L的值就被计算出来了。
默认参数也是一个变量，它指向[]，每次调用该函数，如果改变了L的内容，就会影响下次调用(不再是[]了)。

因此，定义默认参数一定要牢记：默认参数必须指向不可变的对象！！！

可以修改上面的列子：
def add_end(L=None):
	if L is None:
		L = []
	L.append('END')
	return L

三、+ 和 +=
https://www.zhihu.com/question/20114936

1. eg1:
def main():
	l1 = [1,2,3]
	test1(l1)
	print '%s' % id(l1)
	print '%s' % str(l1)
 
def test1(l):
    #l = l + [4]			# 结果为 [1,2,3]; id与main()中id不相等
    l += [4]				# 结果为 [1,2,3,4]; id与main()中id相等
	print '%s' % id(l)

if __name__ == '__main__':
    main()
	
2. eg2
def main():
    str1 = '123'
    test1(str1)
    print '%s' % id(str1)
    print '%s' % str(str1)

def test1(str1):
    #str1 = str1 + '4'		# 结果为 '123'; id与main()中不相等
    str1 += '4'				# 结果为 '123'; id与main()中不相等
    print '%s' % id(str1)

if __name__ == '__main__':
    main()
	
3. eg3
a1 = range(3)
a2 = a1
a2 += [3]
a1
[0,1,2,3]
a2
[0,1,2,3]

a1 = range(3)
a2 = a1
a2 = a2 + [3]
a1
[0,1,2]
a2
[0,1,2,3]

3. 解释
显然两者是有区别的，而这种区别只出现在可变对象上。

<1> += 操作调用__iadd__方法，没有该方法时，再尝试调用__add__方法。
__iadd__方法直接在原对象a1上进行更新，该方法的返回值为None。
__add__方法返回一个新的对象，原对象不修改。

<2>对于不可变对象，根本没有__iadd__方法，所以+=和+的效果一样，都是调用__add__方法。

四、is 和 ==
https://www.cnblogs.com/CheeseZH/p/5260560.html

Python中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)。
is和==都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。

<1>==是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等：

<2>is也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同

<3>eg:
>>> x = y = [4,5,6]
>>> z = [4,5,6]
>>> x == y
True
>>> x == z
True
>>> x is y
True
>>> x is z
False
>>>
>>> print id(x)	#获取对象id
3075326572
>>> print id(y)
3075326572
>>> print id(z)
3075328140

<4>eg:
>>> a = 1 #a和b为数值类型
>>> b = 1
>>> a is b
True
>>> id(a)
14318944
>>> id(b)
14318944

>>> a = 'cheesezh' #a和b为字符串类型
>>> b = 'cheesezh'
>>> a is b
True
>>> id(a)
42111872
>>> id(b)
42111872

>>> a = (1,2,3) #a和b为tuple类型
>>> b = (1,2,3)
>>> a is b
False
>>> id(a)
15001280
>>> id(b)
14790408

>>> a = [1,2,3] #a和b为list类型
>>> b = [1,2,3]
>>> a is b
False
>>> id(a)
42091624
>>> id(b)
42082016

>>> a = {'cheese':1,'zh':2} #a和b为dict类型
>>> b = {'cheese':1,'zh':2}
>>> a is b
False
>>> id(a)
42101616
>>> id(b)
42098736

>>> a = set([1,2,3])#a和b为set类型
>>> b = set([1,2,3])
>>> a is b
False
>>> id(a)
14819976
>>> id(b)
14822256

结论：只有数值型和字符串型的情况下，a is b才为True；当tuple，list，dict或set类型时，a is b为False！






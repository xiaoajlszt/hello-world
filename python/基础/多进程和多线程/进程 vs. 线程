1、多进程模式最大的优点就是稳定性高;但创建进程的代价很大。
<1>UNIX系统下fork调用还行，在windows下创建进程开销很大。
<2>操作系统的进程数是有限的。

2、多线程模式不够稳定。

3、计算密集型和IO密集型
<1>要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。
<2>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。
Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。
对于计算密集型任务，最好用C语言编写。

<3>涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成。
对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。

IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。
对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。

4、异步IO
<1>如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。
Nginx就是支持异步IO的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。

<2>在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。
由于系统总的进程数量十分有限，因此操作系统调度非常高效。
用异步IO编程模型来实现多任务是一个主要的趋势。

<3>对应到Python语言，单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。
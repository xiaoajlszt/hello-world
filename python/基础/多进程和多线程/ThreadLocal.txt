1、在多线程环境下，每个线程都有自己的数据。
<1>一个线程使用自己的局部变量比使用全局变量要好，因为局部变量只有线程自己能访问，不会影响其他线程;而全局变量的修改必须加锁。
<2>但局部变量也有问题，就是在函数调用时传递起来很麻烦。

因此出现了ThreadLocal：

#!/usr/bin/env python
# -*- coding: utf-8 -*-


import threading, time

local_school = threading.local()

def process_student():
    std = local_school.student
    print('Hello, %s (in %s)' % (std, threading.current_thread().name))

def process_thread_A(name):
    local_school.student = name
    time.sleep(2)
    process_student()

def process_thread_B(name):
    local_school.student = name
    process_student()

t1 = threading.Thread(target=process_thread_A, args=('Alice',), name='Thread-A')
t2 = threading.Thread(target=process_thread_B, args=('Bob',), name='Thread-B')
t1.start()
t2.start()
t1.join()
t2.join()

输出：
Hello, Bob (in Thread-B)
Hello, Alice (in Thread-A)

<3>全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。
可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。
//一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。

<4>local_school不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher等等。

<5>ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。

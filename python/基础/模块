一、简介 
1、在Python中一个py文件就称为一个模块(Module)。
abc.py文件就是一个名叫abc的模块。

2、模块的好处
<1>大大提高代码的可维护性。
<2>编写代码不必从零开始。
<3>避免函数名和变量名冲突。
相同的函数名和变量名可以分别存在不同的模块中。不过要尽量不与内置函数名冲突。
https://docs.python.org/3/library/functions.html  //python内置函数

3、为了避免模块名冲突，引入按目录来组织模块的方法，称为包(Package)。
mycompany
	__init__.py
	abc.py
	xyz.py
<1>引入包以后，只要顶层的包名不冲突，那么所有的模块都不会冲突。
<2>abc.py模块名变为mycompany.abc
<3>每个包目录下都有一个__init__.py文件，该文件必须存在。否则，Python就会把这个目录当成普通目录，而不是一个包。
__init__.py可以是空文件，也可以有Python代码。因为__init__.py本身就是一个模块，模块名为mycompany。
<4>可以有多级目录，组成多级层次的包结构。

<5>自己创建的模块不能和Python自带的模块名冲突。否则将无法导入系统自带的模块。

二、使用模块
1、Python内置了很多模块


三、安装第三方模块
1、通过包管理工具pip安装第三方模块。

2、通常第三方库都会在Python官方的 pypi.python.org 网站注册。

3、模块搜索路径
<1>当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件。
默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中：
>>> import sys
>>> sys.path

<2>如果我们要添加自己的搜索目录，有两种方法：
1)一是直接修改sys.path，添加要搜索的目录：
>>> import sys
>>> sys.path.append('/Users/michael/my_py_scripts')
这种方法是在运行时修改，运行结束后失效。

2)第二种方法是设置环境变量PYTHONPATH，该环境变量的内容会被自动添加到模块搜索路径中。
设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响。

















一、简介
1、随着PC机的兴起，软件开始主要运行在桌面上，而数据库这样的软件运行在服务器端。这种Client/Server模式称为CS架构。
2、随着互联网的兴起，CS架构不适合Web，最大的原因是Web应用程序修改和升级非常迅速，而CS架构需要每个客户端升级桌面APP。
因此Browser/Server模式开始流行，简称BS架构。
在BS架构下，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Web页面，并把页面展示给用户。

3、Web开发的几个阶段
<1>静态Web页面：文本编辑器直接编辑生成静态的HTML页面。无法与用户交互。
<2>CGI：要处理用户发送的动态数据，出现了Common Gateway Interface（通用网关接口），用C/C++编写。
<3>ASP/JSP/PHP：脚本语言开发效率高，与HTML结合紧密，迅速取代了CGI。
<4>MVC：为了解决直接用脚本语言嵌入HTML导致的可维护性差的问题，引入Model-View-Controller（模型-视图-控制器）来简化Web开发。
ASP发展为ASP.net，JSP和PHP也有一堆MVC框架。

二、HTTP协议简介
HTTP(HyperText Transfer Protocol，超文本传输协议)协议是一种文本协议，所以，它的格式非常简单。

1、在Web应用中，服务器把网页传递给浏览器，实际上是把网页的HTML代码发送给浏览器。之间的传输协议是HTTP协议。
HTML(HyperText Markup Language，超文本标记语言)是一种定义网页的文本。

2、当浏览器读取到HTML源码后，它会解析HTML，显示页面。
然后根据HTML中的各种链接，再发送HTTP请求到服务器，获取相应的图片、Flash、JS脚本、CSS等各种资源，最终显示出一个完整的页面。

3、HTTP请求与响应
<1>浏览器向服务器发送HTTP请求，包括：
1)方法：GET：仅请求资源
		POST：要附带用户数据
2)域名：由HOST指定
3)Header中的其他项
4)如果是POST，请求还包括一个Body，包含用户数据。

<2>服务器向浏览器返回HTTP响应，包含：
1)响应代码：200-成功 3XX-重定向 4XX-客户端发送请求错误 5XX-服务器处理发生错误
2)响应类型：由Content-Type指定
3)Header中的其他选项
4)通常响应会携带内容，也就是有一个body，网页的HTML源码就在Body中。

<3>如果浏览器还需要继续向服务器请求其他资源，重复<1><2>。

4、HTTP协议同时具备极强的扩展性
虽然浏览器请求的是http://www.sina.com.cn/的首页，但是新浪在HTML中可以链入其他服务器的资源，
比如<img src="http://i1.sinaimg.cn/home/2013/1008/U8455P30DT20131008135420.png">，从而将请求压力分散到各个服务器上。
并且，一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称WWW。

5、HTTP格式
<1>GET请求格式：
GET /path HTTP/1.1
Header1: Value1
Header2: Value2
Header3: Value3
每个Header一行，换行符是\r\n

<2>POST请求格式：
POST /path HTTP/1.1
Header1: Value1
Header2: Value2
Header3: Value3

body data goes here...
当遇到连续两个\r\n时，Header部分结束，后面的数据是Body。

<3>HTTP响应格式：
200 OK
Header1: Value1
Header2: Value2
Header3: Value3

body data goes here...
1)Body的数据类型由Content-Type头来确定，如果是网页，Body就是文本；如果是图片，Body就是图片的二进制数据。
2)当存在Content-Encoding时，Body数据是被压缩的，最常见的压缩方式是gzip，所以，看到Content-Encoding: gzip时，
需要将Body数据先解压缩，才能得到真正的数据。压缩的目的在于减少Body的大小，加快网络传输。

6、要详细了解HTTP协议，推荐“HTTP: The Definitive Guide”一书，非常不错，有中文译本：HTTP权威指南


三、HTML简介
1、HTML文档就是一系列的Tag组成，最外层的Tag是<html>。
规范的HTML也包含<head>...</head>和<body>...</body>（注意不要和HTTP的Header、Body搞混了）。
由于HTML是富文档模型，所以，还有一系列的Tag用来表示链接、图片、表格、表单等等。

<html>
<head>
  <title>Hello</title>
</head>
<body>
  <h1>Hello, world!</h1>
</body>
</html>

保存为hello.html，双击或者把文件拖到浏览器中。

2、CSS(Cascading Style Sheets，层叠样式表)
CSS用来控制HTML里的所有元素如何展现，比如，给标题元素<h1>加一个样式，变成48号字体，灰色，带阴影：
<html>
<head>
  <title>Hello</title>
  <style>
    h1 {
      color: #333333;
      font-size: 48px;
      text-shadow: 3px 3px 3px #666666;
    }
  </style>
</head>
<body>
  <h1>Hello, world!</h1>
</body>
</html>

3、JavaScript
与Java没有一点关系。JavaScript是为了让HTML具有交互性而作为脚本语言添加的。
JavaScript既可以内嵌到HTML中，也可以从外部链接到HTML中。
<html>
<head>
  <title>Hello</title>
  <style>
    h1 {
      color: #333333;
      font-size: 48px;
      text-shadow: 3px 3px 3px #666666;
    }
  </style>
  <script>
    function change() {
      document.getElementsByTagName('h1')[0].style.color = '#ff0000';
    }
  </script>
</head>
<body>
  <h1 onclick="change()">Hello, world!</h1>
</body>
</html>

4、HTML定义了页面的内容，CSS来控制页面元素的样式，而JavaScript负责页面的交互逻辑。

这里推荐一个在线学习网站w3schools：
http://www.w3schools.com/
以及一个对应的中文版本：
http://www.w3school.com.cn/

我们用Python或者其他语言开发Web应用时，我们就是要在服务器端动态创建出HTML，这样，浏览器就会向不同的用户显示出不同的Web页面。

四、WSGI(Web Server Gateway Interface)
1、Web应用的本质：
<1>浏览器发送一个HTTP请求；
<2>服务器收到请求，生成一个HTML文档；
<3>服务器把HTML文档作为HTTP响应的Body发送给浏览器；
<4>浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。

最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。
Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。

2、如果要动态生成HTML，就需要自己实现上述步骤。
正确的做法是底层代码(接受HTTP请求、解析HTTP请求、发送HTTP响应等)由专门的服务器软件实现。我们用Python专注于生成HTML文档。

3、WSGI就是这样一个接口，能让我们专心用Python编写Web业务。
<1>Web开发者只要实现一个函数，就可以响应HTTP请求。
def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    return [b'<h1>Hello, web!</h1>']
	
参数：
environ：一个包含所有HTTP请求信息的dict对象
start_response：一个发送HTTP响应的函数


返回值:
b'<h1>Hello, web!</h1>'将作为HTTP响应的Body发送给浏览器

解释：
Header只能发送一次，也就是只能调用一次start_response()函数。
该函数接收两个参数，一个是HTTP响应码；另一个是list表示HTTP Header，每个Header用一个包含两个str的tuple表示。

<2>有了WSGI，我们关心的就是如何从environ这个dict对象中获取HTTP的请求信息，然后构造HTML，再通过start_response()发送给Header，最后返回Body。
application()函数由WSGI服务器来调用。

4、wsgiref
Python内置了wsgiref模块，它是用纯Python编写打WSGI服务器的参考实现。仅供开发和测试使用，不考虑任何运行效率。

5、无论多么复杂的Web应用程序，入口都是WSGI处理函数。
复杂的Web应用程序，光靠一个WSGI函数来处理还是太底层了，我们需要在WSGI之上再抽象出Web框架，进一步简化Web开发。


五、使用web框架
WSGI提供的接口虽然比HTTP接口高级不少，但和Web App的处理逻辑相比，还是比较低级。
我们需要在WSGI接口之上进一步抽象，让我们专注于用一个函数处理一个URL。
Web框架实现URL到函数的映射。

1、Flask框架
<1>pip install flask
<2>Flask通过Python的装饰器在内部自动地把URL和函数给关联起来。
<3>Flask通过request.form['name']获取表单的内容(从HTTP请求获取用户数据)。
Web框架都提供了自己的API来实现这些功能。

2、除了Flask，常见的Python Web框架还有：
<1>Django:全能型web框架
<2>web.py:小巧的web框架
<3>Bottle:和Flask类似的web框架
<4>Tornado:Facebook的开源异步web框架

有了Web框架，我们在编写Web应用时，注意力就从WSGI处理函数转移到URL+对应的处理函数。


六、使用模板
Web App不仅仅是处理逻辑，展示给用户的页面也非常重要。生成复杂的HTML页面难度很大，所以，模板技术出现了。

1、使用模板，我们需要预先准备一个HTML文档。
这个文档不是普通HTML文档，它嵌入了一些变量和指令。根据我们传入的数据，替换得到最终的HTML发送给用户。

这就是MVC:Model-View-Controller,模型-视图-控制器：
<1>Controller：即Python处理URL的函数，它负责业务逻辑，比如检查用户名是否存在，取出用户信息等。
<2>View：即包含变量的模板，它负责显示逻辑，通过简单地替换一些变量，输出最终的HTML。
<3>Model：Model用于传给View，View在替换变量时，就可以从Model中取出相应的数据。
因为Python支持关键字参数，很多Web框架允许传入关键字参数，在框架内部组装出一个dict作为Model。

2、Flask通过render_template()函数实现模板的渲染。Python有多种模板，Flask默认支持的jinja2。
<1>pip install jinja2

3、模板的优势
<1>通过MVC，我们在Python代码中处理M：Model和C：Controller，而V：View是通过模板处理的。
这样，我们就成功地把Python代码和HTML代码最大限度地分离了。
<2>使用模板的另一大好处是，模板改起来很方便，而且，改完保存后，刷新浏览器就能看到最新的效果。

4、除了Jinja2，常见的模板还有：
Mako：用<% ... %>和${xxx}的一个模板；
Cheetah：也是用<% ... %>和${xxx}的一个模板；
Django：Django是一站式框架，内置一个用{% ... %}和{{ xxx }}的模板。















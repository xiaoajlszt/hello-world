一、错误处理
用错误码表示出错十分不便，调用者必须使用大量代码来判断是否出错，一旦出错还要层层上报，直到某个函数可以处理该错误。
所以高级语言通常都内置了一套try...except...finally...的错误处理机制。

1、try
当我们认为某段代码可能出错时，就可以使用try来运行这段代码。
<1>如果执行出错，则不继续执行try后续代码，而是直接跳转至错误处理代码，即except语句块。
如果有finally语句块，则执行完except后会执行finally。

<2>如果未出错，except语句块不会被执行，但是如果有finally语句块，则会执行finally。

try:
    print('try...')
    r = 10 / 0
    print('result:', r)
except ZeroDivisionError as e:
    print('except:', e)
finally:
    print('finally...')
print('END')

结果：
try...
except: division by zero
finally...
END

<3>针对不同类型的错误，应该设置不同的except语句块处理。

<4>可以在except语句块后面增加else语句块，当没有错误发生时，会执行else。

<5>python的错误也是class，所有错误类型都继承自BaseException。
所以使用except时，不仅捕获该类型的错误，还把其子类也"一网打尽"。

常见的错误类型和继承关系：
https://docs.python.org/3/library/exceptions.html#exception-hierarchy

try:
    ...
except ValueError as e:
    print('ValueError')
except UnicodeError as e:
    print('UnicodeError')
因为UnicodeError是ValueError的子类，第二个except永远也捕获不到UnicodeError。

<6>try...except可以跨越多层调用
eg：main函数调用foo函数，foo函数调用bar函数，bar函数出错。这时只要main捕获到错误，main就可以处理。

也就是说，不需要在每个可能出错的地方去捕获错误，只要在合适的层次捕获就可以了。

2、调用堆栈
如果错误没有被捕获，就会一直上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出。

3、记录错误
既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因。同时让程序继续执行下去。

<1>内置的logging模块可以记录错误信息：
通过配置，logging还可以把错误记录到日志文件里面。

4、抛出错误
因为错误是class，捕获错误就是捕获到该class的一个实例。
Python内置函数会抛出很多类型的错误，我们自己写函数也可以抛出错误。

<1>使用raise语句抛出一个错误。
<2>只有在必要的时候才自己定义错误类型。尽量选择Python已有的内置错误类型。

<3> 另一种错误处理方式：
def foo(s):
    n = int(s)
    if n==0:
        raise ValueError('invalid value: %s' % s)
    return 10 / n

def bar():
    try:
        foo('0')
    except ValueError as e:
        print('ValueError!')
        raise
bar函数中明明已经捕获了错误，但是打印ValueError后，又把错误通过raise语句抛出去。
这种写法很常见，这里捕获的目的只是记录便于后续跟踪。由于当前函数不知道如何处理错误，因此需要上抛，让顶层调用者处理。

<4>raise语法
1)如果不带参数，就会把当前错误原样抛出；
2)如果携带一个Error，就会把一种错误类型转换为另一种错误类型。
try:
    10 / 0
except ZeroDivisionError:
    raise ValueError('input error!')


二、调试
1、print()打印中间信息

2、断言
凡是用print()来辅助查看的地方，都可以用断言(assert)替代。

<1>assert紧跟的表达式必须为True
如果断言失败，assert语句本身就会抛出AssertionError。
eg：
>>> assert 0 != 0 , 'error!'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AssertionError: error!

<2>Python解释器可以用-0参数关闭assert。此时可以把assert语句当做pass。

3、logging
logging不会抛出错误，而且可以输出到文件。

<1>eg
import logging
logging.basicConfig(level=logging.INFO)

s = '0'
n = int(s)
logging.info('n = %d' % n)
print(10 / n)

输出：
INFO:root:n = 0
Traceback (most recent call last):
  File "try4.py", line 18, in <module>
    main()
  File "try4.py", line 14, in main
    print(10 / n)
ZeroDivisionError: division by zero

<2>logging允许指定记录信息的级别：debug、info、warning、error。(打印级别越来越高)
指定较高的打印级别会让较低的打印失效。

<3>logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方。

4、pdb
启动Python调试器pdb，可以让程序单步运行。
python3 -m pdb XXX.py //以参数-m pdb启动

l - 查看代码
n - 单步执行
p - 打印信息
c - 继续运行
q - 结束调试

<1>pdb.set_trace()
import pdb，然后在需要的地方通过pdb.set_trace()，设置一个断点。

5、IDE
如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。

<1>目前比较好的Python IDE有:
1)PyCharm：
http://www.jetbrains.com/pycharm/

2)Eclipse加上pydev插件也可以调试Python程序


三、单元测试
单元测试是对一个模块、一个函数或者一个类进行正确性检查的测试工作。


四、文档测试
很多官方文档都有实例代码。可不可以自动执行这些写在注释中的实例代码呢？

1、Python内置的文档测试模块(doctest)可以直接提取注释中的代码并执行测试。







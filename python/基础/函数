一、调用函数
1、Python内置了很多有用的函数
<1>help()
查看python所有的modules：help("modules")
单看python所有的modules中包含指定字符串的modules： help("modules yourstr")
查看python中常见的topics： help("topics")
查看python标准库中的module：import os.path + help("os.path")
查看python内置的类型：help("list")
查看python类型的成员方法：help("str.find") 
查看python内置函数：help("open")

<2>abs() 取绝对值

<3>max() 取最大值

<4>数据类型转换
1)int('123') //123
  int(12.34) //12
2)float('12.34')  //12.34
3)str(1.23)	 //'1.23'
4)bool('')	 //False
  bool(1)	 //True
  
2、函数名其实就是指向一个函数对象的引用。
完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：
>>> a = abs # 变量a指向abs函数
>>> a(-1)   # 所以也可以通过a调用abs函数
1


二、定义函数
1、空函数
如果想定义一个什么事也不做的空函数，可以使用pass语句：
def nop():
    pass
<1>pass语句什么都不做，那有什么用？
实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。

<2>pass还可以用在其他语句里，比如：
if age >= 18:
    pass
缺少了pass，代码运行就会有语法错误。

2、参数检查
<1>参数个数检查，Python解释器会抛出TypeError
<2>参数类型检查，可用内置函数isinstance()
eg	isinstance(x, (int, float))

3、返回多个值
import math
def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny
	
解释：Python函数起始返回的是一个tuple。在语法上tuple可以省略括号，按位置赋给对应的值。

4、函数执行完毕也没有return语句时，自动return None

三、函数的参数
Python函数定义非常灵活，除了必选参数(位置参数)外，还可以使用默认参数、可变参数和关键字参数。

1、默认参数
def power(x,n=2):
	s=1
	while n>0:
		n=n-1
		s=s*x
	return s
	
//n即为默认参数，默认为2

<1>必选参数在前，默认参数在后；否则Python解释器报错。
<2>当有多个参数时，将变化大的参数放在前面，变化小的参数放在后面。变化小的参数可以作为默认参数。

def enroll(name, gender, age=6, city='Beijing')
<3>默认参数可以降低函数调用的难度。只有与默认参数不符时，才需要提供额外的信息。
<4>有多个默认参数时，默认按顺序提供默认参数，如调用enroll('Bob', 'M', 7)，
意思是，除了name，gender这两个参数外，最后1个参数应用在参数age上，city参数由于没有提供，仍然使用默认值。
<5>有多个默认参数时，也可以指定参数，比如调用enroll('Adam', 'M', city='Tianjin')，
意思是，city参数用传进去的值，其他默认参数继续使用默认值。

<6>默认参数的陷阱
>>> def add_end(L=[]):
...     L.append('END')
...     return L
... 
>>> add_end()
['END']
>>> add_end()
['END', 'END']
>>> add_end()
['END', 'END', 'END']

解释：Python在定义函数时，默认参数L的值就被计算出来了。
默认参数也是一个变量，它指向[]，每次调用该函数，如果改变了L的内容，就会影响下次调用(不再是[]了)。

因此，定义默认参数一定要牢记：默认参数必须指向不可变的对象！！！

可以修改上面的列子：
def add_end(L=None):
	if L is None:
		L = []
	L.append('END')
	return L

2、可变参数
定义可变参数仅仅在参数前面加了*。
def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
	
>>> calc(1, 2)
5
>>> calc()
0
可变参数，函数内部接收到的是一个tuple，因此代码完全不变。调用该函数时，可以传入任意个数参数，包括0个。

<1>Python允许在list或tuple前面加*，把它们的元素变成可变参数。
>>> nums = [1, 2, 3]
>>> calc(*nums)
14
*nums表示把nums这个list的所有元素作为可变参数传进去。

3、关键字参数
关键字参数允许传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。
def person(name, age, **kw):  //除了参数name、age外，还接受关键字参数kw。
    print('name:', name, 'age:', age, 'other:', kw)

>>> person('Michael', 30)  	  //调用函数时，可以之传入必选参数。
name: Michael age: 30 other: {}

>>> person('Adam', 45, gender='M', job='Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}

<1>关键字参数可以扩展函数的功能。
例如，做一个用户注册系统，除了用户名和年龄是必填的，其他都是可选的。就可以利用关键字参数来实现。

<2>和可变参数类似，也可以先组装出一个dict，再把该dict作为关键字参数传入。
>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, **extra)
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict。
注意：kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。

4、命名关键字参数
函数调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kw检查。

eg 检查是否有city和job参数
def person(name, age, **kw):
    if 'city' in kw:
        # 有city参数
        pass
    if 'job' in kw:
        # 有job参数
        pass
    print('name:', name, 'age:', age, 'other:', kw)
	
<1>如果要限制关键字参数的名字，可以使用命名关键字参数。
1)命名关键字参数必须传入参数名，否则将报错。
2)使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。
如果缺少*，Python解释器将无法识别位置参数和命名关键字参数。

eg 只接受city和job作为关键字参数  //必须传入city和job，一个都不能少
def person(name, age, *, city, job):
    print(name, age, city, job)

>>> person('bob',12,city='Hongkong',job='engineer')
bob 12 Hongkong engineer

>>> person('bob',12,city='Hongkong')                              
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: person() missing 1 required keyword-only argument: 'job'

>>> person('bob',12,city='Hongkong',job='engineer',zipcode=123456)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: person() got an unexpected keyword argument 'zipcode'

<2>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要特殊分隔符*了。
def person(name, age, *args, city, job):
    print(name, age, args, city, job)
	
>>> person1('bob',12,'1','2',city='HongKong',job='engineer')
bob 12 ('1', '2') HongKong engineer

<3>命名关键字参数可以有缺省值，从而简化调用
def person(name, age, *, city='Beijing', job):
    print(name, age, city, job)
	
>>> person('Jack', 24, job='Engineer')
Jack 24 Beijing Engineer
	
5、参数组合
在Python中定义函数，可以用必选参数(位置参数)、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。

<1>但是要注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
def f1(a, b, c=0, *args, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

def f2(a, b, c=0, *, d, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)
	
调用函数时，Python解释器自动按照参数位置和参数名把对应的参数传进去。

>>> f1(1, 2)
a = 1 b = 2 c = 0 args = () kw = {}
>>> f1(1, 2, c=3)
a = 1 b = 2 c = 3 args = () kw = {}
>>> f1(1, 2, 3, 'a', 'b')
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
>>> f1(1, 2, 3, 'a', 'b', x=99)
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}
>>> f2(1, 2, d=99, ext=None)
a = 1 b = 2 c = 0 d = 99 kw = {'ext': None}
	
<2>通过tulip和dict也可以调用上述函数
>>> args = (1, 2, 3, 4)
>>> kw = {'d': 99, 'x': '#'}
>>> f1(*args, **kw)
a = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}
>>> args = (1, 2, 3)
>>> kw = {'d': 88, 'x': '#'}
>>> f2(*args, **kw)
a = 1 b = 2 c = 3 d = 88 kw = {'x': '#'}

所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。
使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
	
四、递归函数
如果一个函数在内部调用自身本身，这个函数就是递归函数。
def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)
	
1、使用递归函数需要注意防止栈溢出。
在计算机中，函数调用是通过栈（stack）这种数据结构实现的，
每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。
由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试fact(1000)：

2、解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，
所以，把循环看成是一种特殊的尾递归函数也是可以的。

尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。
这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，
不会出现栈溢出的情况。
def fact(n):
    return fact_iter(n, 1)

def fact_iter(num, product):
    if num == 1:
        return product
    return fact_iter(num - 1, num * product)
	
注：
尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。
遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化。
所以，即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。





















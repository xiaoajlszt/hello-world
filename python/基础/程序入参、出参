一、sys模块
import sys

1. 参数
python test1.py argv1 argv2  or  ./test1.py argv1 argv2
 
<1>len(sys.argv)	//3
<2>argv[0]	   test1.py  or  ./test1.py 
<3>argv[1]		argv1
<4>argv[2]		argv2

2. 如何写main函数：
http://www.360doc.com/content/16/0424/16/31913486_553405472.shtml


二、argparse模块
https://docs.python.org/2.7/library/argparse.html
https://www.jianshu.com/p/fef2d215b91d

argparse 是 Python 标准库中用来解析命令行参数和选项的模块，其是为替代已经过时的 optparse 模块而生的，该模块在 Python2.7 中被引入。

1. 首先需要创建一个解析器
argparse.ArgumentParser(
prog=None, 								#程序的名字(默认为sys.argv[0])，用于在help信息中描述程序名称
usage=None, 							#描述程序的用途(默认从参数中生成)
description=None, 						#程序描述信息，help 信息前的文字
epilog=None, 							#help 信息之后的信息
parents=[], 							#由ArgumentParser对象组成的列表，它们的arguments选项会被包含到新ArgumentParser对象中
formatter_class=argparse.HelpFormatter, #重置 help 信息输出的格式
prefix_chars='-', 						#参数前缀
fromfile_prefix_chars=None, 
argument_default=None, 
conflict_handler='error', 
add_help=True
)

2. 添加参数选项
ArgumentParser.add_argument(
name or flags...		#参数名。参数有两种形式，即可选参数和位置参数。位置参数没有前缀，而可选参数需要加前缀。
[, action]
[, nargs]				#参数的数量。可以为整数N(N个)  或  *(任意多个)  或  +(一个或更多)  或   ？(此时，首先从命令行获得参数，若没有则从const获得，然后从default获得)
[, const]				#保存一个常量
[, default]				#默认值
[, type]				#参数类型
[, choices]
[, required]			#是否必选，只针对可选参数，对位置参数无效。
[, help]
[, metavar]
[, dest]
)

3. 解析参数
ArgumentParser.parse_args(
args=None, 
namespace=None
)

该方法运行会用'-'来认证可选参数，剩下的即为位置参数。该方法返回一个 Namespace 对象，参数值通过属性的方式访问，也可以用内建的 vars() 函数转换为字典。




三、getopt模块
getopt模块用于抽出命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活，支持短选项模式和长选项模式。

1. 说明
<1>getopt函数的格式是getopt.getopt([命令行参数列表], "短选项", [长选项列表])
- 短选项名后的冒号(:)表示该选项必须有附加的参数。
- 长选项名后的等号(=)表示该选项必须有附加的参数。

<2>返回opts和args
- opts是一个参数选项及其value的元组( ( '-f', 'hello'), ( '-t', '' ), ( '--format', '' ), ( '--directory-prefix', '/home' ) )
- args是一个除去有用参数外其他的命令行输入 ( 'a', 'b' )

2. eg:	python scriptname.py -f 'hello' --directory-prefix=/home -t --format 'a' 'b'

import getopt
shortargs = 'f:t'
longargs = ['directory-prefix=', 'format', '--f_long=']
opts, args = getopt.getopt( sys.argv[1:], shortargs, longargs )

然后遍历opts便可以获取所有的命令行选项及其对应参数了。

for opt, val in opts:
	if opt in ( '-f', '--f_long' ):
		pass
	if ....
使用字典接受命令行的输入，然后再传送字典，可以使得命令行参数的接口更加健壮。



一、sys模块
import sys

1. 参数
python test1.py argv1 argv2  or  ./test1.py argv1 argv2
 
<1>len(sys.argv)	//3
<2>argv[0]	   test1.py  or  ./test1.py 
<3>argv[1]		argv1
<4>argv[2]		argv2

2. 如何写main函数：
http://www.360doc.com/content/16/0424/16/31913486_553405472.shtml


二、argparse模块
https://docs.python.org/2.7/library/argparse.html
https://www.jianshu.com/p/fef2d215b91d

argparse 是 Python 标准库中用来解析命令行参数和选项的模块，其是为替代已经过时的 optparse 模块而生的，该模块在 Python2.7 中被引入。

1. The first step is create a new ArgumentParser object, the ArgumentParser object will hold all the information necessary to parse the command line into Python data types.

argparse.ArgumentParser(
prog=None, 								# The name of the program (default: sys.argv[0])
usage=None, 							# The string describing the program usage (default: generated from arguments added to parser)
description=None, 						# Text to display before the argument help (default: none)
epilog=None, 							# Text to display after the argument help (default: none)
parents=[], 							# A list of ArgumentParser objects whose arguments should also be included
formatter_class=argparse.HelpFormatter, # A class for customizing the help output
prefix_chars='-', 						# The set of characters that prefix optional arguments (default: ‘-‘)
fromfile_prefix_chars=None, 			# The set of characters that prefix files from which additional arguments should be read (default: None)
argument_default=None, 					# The global default value for arguments (default: None)
conflict_handler='error', 				# The strategy for resolving conflicting optionals (usually unnecessary)
add_help=True							# Add a -h/--help option to the parser (default: True)
)

2. The second step is filling an ArgumentParser with information about program arguments is done by making calls to the add_argument() method.
Generally, these calls tell the ArgumentParser how to take the strings on the command line and turn them into objects. This information is stored and used when parse_args() is called.

ArgumentParser.add_argument(
name or flags...		# 参数名。参数有两种形式，即可选参数和位置参数。位置参数没有前缀，而可选参数需要加前缀。
[, action]
[, nargs]				# 参数的数量。可以为整数N(N个)  或  *(任意多个)  或  +(一个或更多)  或   ?(此时，首先从命令行获得参数，若没有则从const获得，然后从default获得)
[, const]				# 保存一个常量
[, default]				# 默认值
[, type]				# The type to which the command-line argument should be converted.
[, choices]				# A container of the allowable values for the argument.
[, required]			# 是否必选，只针对可选参数，对位置参数无效。
[, help]				# A brief description of what the argument does
[, metavar]				# A name for the argument in usage messages
[, dest]				# The name of the attribute to be added to the object returned by parse_args().
)

注: 
nargs为1(N)时, parse_args解析出的结果是： c=['["{\\"queueId\\":\\"46A29C1FCC\\",\\"queueType\\":\\"deferred\\"}","{\\"queueId\\":\\"C3ED7C1FCC\\",\\"ququeType\\":\\"deferred\\"}"]']
nargs为?时, parse_args解析出的结果是： c='["{\\"queueId\\":\\"46A29C1FCC\\",\\"queueType\\":\\"deferred\\"}","{\\"queueId\\":\\"C3ED7C1FCC\\",\\"ququeType\\":\\"deferred\\"}"]'
前者可以用下标([0])调用。

3. The last step is parsing arguments through the parse_args() method.
This will inspect the command line, convert each argument to the appropriate type and then invoke the appropriate action.
In a script, parse_args() will typically be called with no arguments, and the ArgumentParser will automatically determine the command-line arguments from sys.argv.

ArgumentParser.parse_args(
args=None, 				# List of strings to parse. The default is taken from sys.argv
namespace=None			# An object to take the attributes. The default is a new empty Namespace object.
)

该方法运行会用'-'来认证可选参数，剩下的即为位置参数。该方法返回一个 Namespace 对象，参数值通过属性的方式访问，也可以用内建的 vars() 函数转换为字典。




三、getopt模块
getopt模块用于抽出命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活，支持短选项模式和长选项模式。

1. 说明
<1>getopt函数的格式是getopt.getopt([命令行参数列表], "短选项", [长选项列表])
- 短选项名后的冒号(:)表示该选项必须有附加的参数。
- 长选项名后的等号(=)表示该选项必须有附加的参数。

<2>返回opts和args
- opts是一个参数选项及其value的元组( ( '-f', 'hello'), ( '-t', '' ), ( '--format', '' ), ( '--directory-prefix', '/home' ) )
- args是一个除去有用参数外其他的命令行输入 ( 'a', 'b' )

2. eg:	python scriptname.py -f 'hello' --directory-prefix=/home -t --format 'a' 'b'

import getopt
shortargs = 'f:t'
longargs = ['directory-prefix=', 'format', '--f_long=']
opts, args = getopt.getopt( sys.argv[1:], shortargs, longargs )

然后遍历opts便可以获取所有的命令行选项及其对应参数了。

for opt, val in opts:
	if opt in ( '-f', '--f_long' ):
		pass
	if ....
使用字典接受命令行的输入，然后再传送字典，可以使得命令行参数的接口更加健壮。



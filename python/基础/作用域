1. locals()和globals()	//(locals是只读的，globals不是)
http://blog.csdn.net/scelong/article/details/6977867

Python的两个内置函数，基于字典的访问局部和全局变量的方式。

<1>首先需要理解python中的名字空间概念。
Python使用叫做名字空间的东西来记录变量的轨迹。
名字空间只是一个字典，它的键字就是变量名，字典的值就是那些变量的值。实际上，名字空间可以象Python的字典一样进行访问。
1)每个函数都有着自已的名字空间，叫做局部名字空间，它记录了函数的变量，包括函数的参数和局部定义的变量。
2)每个模块拥有它自已的名字空间，叫做全局名字空间，它记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。
3)还有就是内置名字空间，任何模块均可访问它，它存放着内置的函数和异常。

<2>当一行代码要使用变量 x 的值时，Python会到所有可用的名字空间去查找变量，按照如下顺序：
1)局部名字空间 - 特指当前函数或类的方法。如果函数定义了一个局部变量 x，Python将使用这个变量，然后停止搜索。
2)全局名字空间 - 特指当前的模块。如果模块定义了一个名为 x 的变量，函数或类，Python将使用这个变量然后停止搜索。
3)内置名字空间 - 对每个模块都是全局的。作为最后的尝试，Python将假设 x 是内置函数或变量。

<3>from module import 和 import module之间的不同。
使用 import module，模块自身被导入，但是它保持着自已的名字空间，这就是为什么你需要使用模块名来访问它的函数或属性（module.function）的原因。
但是使用 from module import，实际上是从另一个模块中将指定的函数和属性导入到你自己的名字空间，这就是为什么你可以直接访问它们却不需要引用它们所来源的模块的原因。

2. global与nonlocal关键字
http://blog.csdn.net/cn_wk/article/details/52723269

<1>Python引用一个变量时，对变量的搜索顺序：本地作用域local - 嵌套作用域Enclosing function local - 全局作用域global - 内置作用域builtins。即所谓的LEGB规则。

<2>然而在函数内部为变量赋值时，并不是按照LEGB规则来首先找到变量，再为该变量赋值： 
当在函数中给一个变量名赋值时(而不是在一个表达式中对其进行引用)，Python总是创建或改变本地作用域的变量名，除非它已经在那个函数中被声明为全局变量。

1)eg
x = 99
def func():
    x = 88
func()
print(x)     #输出99

上面的程序在func函数中为x赋值为88，按照上述规则，因为func函数中并没有变量x，
因此Python会在func函数的本地作用域创建一个变量x，也就是说此x并非x = 99中的x，这样也就能够理解为什么最后程序输出依然为99了。 

2)若想要在函数中修改全局变量x，而不是在函数中新建一个变量，此时便要用到关键字global。
x = 99
def func()
    global x
    x = 88
func()
print(x)    #输出88

上述程序中的global x语句告诉Python在func的本地作用域内，要使用全局作用域中的变量x，
因此在下面的x = 88语句中，Python不会再在本地作用域中新建一个变量x，而是直接引用全局作用域中的变量x，这样程序最后输出88也就不难理解了。 

<3>关键字nonlocal的作用与关键字global类似，使用nonlocal关键字可以在一个嵌套的函数中修改嵌套作用域中的变量
1)eg
def func():
    count = 1
    def foo():
        count = 12
    foo()
    print(count)
func()    #输出1

在嵌套的foo函数中，对变量count赋值，同样会创建一个新的变量，而非使用count = 1语句中的count。如果要修改嵌套作用域中的count，就要使用nonlocal关键字了

2)如果要修改嵌套作用域中的count，就要使用nonlocal关键字
def func():
    count = 1
    def foo():
        nonlocal count
        count = 12
    foo()
    print(count)
func()     #输出12

上面的程序中，在foo函数中使用了nonlocal关键字，就会告诉Python在foo函数中使用嵌套作用域中的变量count，
因此对变量count进行修改时，会直接影响到嵌套作用域中的count变量，程序最后也就输出12了。

<4>注意: 
使用global关键字修饰的变量之前可以并不存在，而使用nonlocal关键字修饰的变量在嵌套作用域中必须已经存在！

1)eg
def main():
    test()
    print AAA			#输出结果10

def test():
    global AAA			#如果删除该行，程序报错"NameError: global name 'AAA' is not defined"
    AAA = 10

if __name__ == '__main__':
    main()

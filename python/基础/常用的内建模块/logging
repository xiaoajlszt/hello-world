http://python.jobbole.com/86887/

import logging

1. logging.getLogger(Name=None)
Return a logger with the specified name, creating it if necessary.
If no name is specified, return the root logger.

这是最基本的入口，该方法参数可以为空，默认的logger名称是root。
如果在同一个程序中一直都使用同名的logger，其实会拿到同一个实例，使用这个技巧就可以跨模块调用同样的logger来记录日志。
也可以通过日志名称来区分同一程序的不同模块。

2. Formatter日志格式
Formatter对象定义了log信息的结构和内容，构造时需要带两个参数：
- 一个是格式化的模板fmt，默认会包含最基本的level和message信息。
- 一个是格式化的时间样式datefmt，默认为 2003-07-08 16:49:45,896 (%Y-%m-%d %H:%M:%S)。

3. SetLevel 日志级别
Logging有如下级别: DEBUG，INFO，WARNING，ERROR，CRITICAL。默认级别是WARNING，logging模块只会输出指定level以上的log。

4. Handler 日志处理器
Handler用于向不同的输出端打log。最常用的是StreamHandler和FileHandler，Logging包含很多handler, 可能用到的有下面几种：
StreamHandler: 	instances send error messages to streams (file-like objects).
FileHandler:	instances send error messages to disk files.
RotatingFileHandler:	instances send error messages to disk files, with support for maximum log file sizes and log file rotation.
TimedRotatingFileHandler:	instances send error messages to disk files, rotating the log file at certain timed intervals.
SocketHandler:	instances send error messages to TCP/IP sockets.
DatagramHandler:	instances send error messages to UDP sockets.
SMTPHandler:	instances send error messages to a designated email address.

5. Configuration配置方法
<1>通过代码进行完整配置:
# -*- coding: utf-8 -*-

import logging
import sys

# 获取logger实例，如果参数为空则返回root logger
logger = logging.getLogger("AppName")

# 指定logger输出格式
formatter = logging.Formatter('%(asctime)s %(levelname)-8s: %(message)s')

# 文件日志
file_handler = logging.FileHandler("test.log")
file_handler.setFormatter(formatter)  # 可以通过setFormatter指定输出格式

# 控制台日志
console_handler = logging.StreamHandler(sys.stdout)
console_handler.formatter = formatter  # 也可以直接给formatter赋值

# 为logger添加的日志处理器
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# 指定日志的最低输出级别，默认为WARN级别
logger.setLevel(logging.INFO)

# 输出不同级别的log
logger.debug('this is debug info')
logger.info('this is information')
logger.warn('this is warning message')
logger.error('this is error message')
logger.fatal('this is fatal message, it is same as logger.critical')
logger.critical('this is critical message')

# 2016-10-08 21:59:19,493 INFO    : this is information
# 2016-10-08 21:59:19,493 WARNING : this is warning message
# 2016-10-08 21:59:19,493 ERROR   : this is error message
# 2016-10-08 21:59:19,493 CRITICAL: this is fatal message, it is same as logger.critical
# 2016-10-08 21:59:19,493 CRITICAL: this is critical message

# 移除一些日志处理器
logger.removeHandler(file_handler)

<2>通过代码进行简单配置，下面有例子，主要是通过basicConfig方法实现。

<3>通过配置文件，下面有例子，主要是通过 logging.config.fileConfig(filepath)
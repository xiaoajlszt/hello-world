一、字符串与URL编码转换
http://blog.csdn.net/tangzongyu123/article/details/75224468

1. 字符串转URL编码
import urllib
poet_name = "李白"
url_code_name = urllib.quote(poet_name)
print url_code_name

输出：
%E6%9D%8E%E7%99%BD

2. URL编码转字符串
import urllib
url_code_name = "%E6%9D%8E%E7%99%BD"
name = urllib.unquote(url_code_name)
print name

输出：
李白

3. URL编码
http://www.w3school.com.cn/tags/html_ref_urlencode.html

与十六进制的区别是：\x <--> %

--------------------------------------------------------------------------------------------------------------

urlib\urlib2\http\httplib

一、Python 2.X与Python 3.X的区别
1. python3.x中没有urllib2
The urllib2 module has been split across several modules in Python 3.0 named urllib.request and urllib.error. 
The 2to3 tool will automatically adapt imports when converting your sources to 3.0. 

eg:
from urllib.request import urlopen

2. Python2.x的urllib2中有Request类(注意是大写!)。


二、python 3.x
urllib

1. GET
urllib的request模块可以方便地抓取URL的内容，也就是发送一个GET请求到指定页面，然后返回HTTP响应。

<1> eg,对豆瓣的一个URL进行抓取并返回响应：
from urllib import request

with request.urlopen('https://api.douban.com/v2/book/2129650') as f:
    data = f.read()
    print('Status:', f.status, f.reason)
    for k, v in f.getheaders():
        print('%s: %s' % (k, v))
    print('Data:', data.decode('utf-8'))
	
//返回结果：
Status: 200 OK
Server: nginx
Date: Tue, 26 May 2015 10:02:27 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2049
Connection: close
Expires: Sun, 1 Jan 2006 01:00:00 GMT
Pragma: no-cache
Cache-Control: must-revalidate, no-cache, private
X-DAE-Node: pidl1
Data: {"rating":{"max":10,"numRaters":16,"average":"7.4","min":0},"subtitle":"","author":["廖雪峰编著"],"pubdate":"2007-6",...}

<2> eg,模拟浏览器发送GET请求，模拟iphone6请求豆瓣首页：
需要使用Request对象，通过往Request对象添加HTTP头，就可以把请求伪装成浏览器。
from urllib import request

req = request.Request('http://www.douban.com/')
req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')
with request.urlopen(req) as f:
    print('Status:', f.status, f.reason)
    for k, v in f.getheaders():
        print('%s: %s' % (k, v))
    print('Data:', f.read().decode('utf-8'))

//返回适合iphone的移动版网页
...
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0">
    <meta name="format-detection" content="telephone=no">
    <link rel="apple-touch-icon" sizes="57x57" href="http://img4.douban.com/pics/cardkit/launcher/57.png" />
...

2. POST
如果要以POST发送一个请求，只需要把参数data以bytes形式传入。

<1> eg,模拟微博登录，先读取登录的邮箱和口令，然后按照weibo.cn的登录页格式以username=xxx&password=xxx的编码传入：
from urllib import request, parse

print('Login to weibo.cn...')
email = input('Email: ')
passwd = input('Password: ')
login_data = parse.urlencode([
    ('username', email),
    ('password', passwd),
    ('entry', 'mweibo'),
    ('client_id', ''),
    ('savestate', '1'),
    ('ec', ''),
    ('pagerefer', 'https://passport.weibo.cn/signin/welcome?entry=mweibo&r=http%3A%2F%2Fm.weibo.cn%2F')
])

req = request.Request('https://passport.weibo.cn/sso/login')
req.add_header('Origin', 'https://passport.weibo.cn')
req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')
req.add_header('Referer', 'https://passport.weibo.cn/signin/login?entry=mweibo&res=wel&wm=3349&r=http%3A%2F%2Fm.weibo.cn%2F')

with request.urlopen(req, data=login_data.encode('utf-8')) as f:
    print('Status:', f.status, f.reason)
    for k, v in f.getheaders():
        print('%s: %s' % (k, v))
    print('Data:', f.read().decode('utf-8'))

//成功返回
Status: 200 OK
Server: nginx/1.2.0
...
Set-Cookie: SSOLoginState=1432620126; path=/; domain=weibo.cn
...
Data: {"retcode":20000000,"msg":"","data":{...,"uid":"1658384301"}}

//失败返回
...
Data: {"retcode":50011015,"msg":"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef","data":{"username":"example@python.org","errline":536}}

3. Handler
如果还需要更复杂的控制，比如通过proxy访问网站，需要利用ProxyHandler来处理。

eg:
proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')
opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)
with opener.open('http://www.example.com/login.html') as f:
    pass

4. 总结
urllib提供的功能就是利用程序去执行各种HTTP请求。
如果要模拟浏览器完成特定功能，需要把请求伪装成浏览器。伪装的方法是先监控浏览器发出的请求，再根据浏览器的请求头来伪装，User-Agent头就是用来标识浏览器的。


三、Python 2.x
1. urllib和urllib2
urllib2可以接受一个Request对象，并以此可以来设置一个URL的headers。但是urllib只接收一个URL，这意味着，不能伪装用户代理字符串等。 
urllib模块可以提供进行urlencode的方法，该方法用于GET查询字符串的生成，urllib2的不具有这样的功能。这就是urllib与urllib2经常在一起使用的原因。 

2. urllib
urllib提供了一系列操作URL的功能。

(1)方法：
<1> urllib.urlencode(query, doseq=0)
>>> s = urllib.urlencode({'smsuser': '123', 'smspass': 'abc'})
>>> s
'smsuser=123&smspass=abc'

3. urllib2
资料：
https://www.cnblogs.com/wly923/archive/2013/05/07/3057122.html
https://blog.csdn.net/qq_32252917/article/details/79074252
https://docs.python.org/2/library/urllib2.html

(1)方法：
<1>urllib2.urlopen = urlopen(url, data=None, timeout=<object object>, cafile=None, capath=None, cadefault=False, context=None)
1)说明：用于打开url网址。

2)参数：
- url：可以是一个字符串url，也可以是一个Request对象。
- data：字符串用于指定发送给server的附加data；None表示不需要发送附加data。
		目前，HTTP request是唯一使用data的。当提供data时，HTTP request是POST请求而不是GET请求。
		data应该是标准application/x-www-form-urlencoded格式的buffer。urllib.urlencode()函数输入一个2元元组的映射或序列，并返回这样格式的一个string。
- timeout：为阻塞操作(如：尝试连接)指定timeout。如果不指定，将会使用global默认timeout。(只用于HTTP\HTTPS\FTP连接)
- context：它必须是ssl.SSLContext实例，用于描述多个SSL选项。详见HTTPSConnection。
- cafile & capath：为HTTPS请求指定一系列信任的CA证书。
					cafile需要指向单个包含一束CA证书的文件。capath应该指向hashed证书文件的目录。
					详见ssl.SSLContext.load_verify_locations()。
- cadefault:	忽略该参数。
					
3)返回值：
函数返回一个file-like对象(response对象)，该对象具有三个附加方法：
- geturl() 	返回检索资源的URL，通常用于判断是否需要后续的重定向。
- info()	以mimetools.message实例的格式返回页面的meta-information，比如：headers。
- getcode() 返回response的HTTP状态码。

注：如果没有handler处理请求(尽管默认安装的全局OpenerDirector使用UnknowHandler来确保该情况永远不会发生)，将会返回None。
此外，如果检查到proxy设置(如：设置了例如http_proxy的*_proxy环境变量)，ProxyHandler是默认安装的，并且确保通过proxy执行请求。

4)会抛出错误引发的URLError。

<2>urllib2.build_opener([handler, ...])
1)说明：返回一个OpenerDirector实例。该实例按给定的顺序链接handler。

2)参数：
handler：可以是BaseHandler实例，或者是BaseHandler子类的实例(此时，必须可以不带任何参数调用构造函数)。

<3>urllib2.install_opener(opener)
1)说明：安装一个OpenerDirector实例作为默认的global opener。

如果希望urlopen()使用某个opener，才需要安装该opener。否则，可以直接使用OpenerDirector.open()替代urlopen()。
注：代码并不会检查入参是否是一个OpenerDirector实例，具有适当接口的类都可以工作。



(2)类：
<1> class urllib2.Request(url[, data][, headers][, origin_req_host][, unverifiable])
1)说明：该类是URL请求的抽象。

2)参数：
url：是包含正确URL的字符串。
data：是指定要发送到server的附加数据的字符串。None表示没有需要的data。
		目前，HTTP request是唯一使用data的。当提供data时，HTTP request是POST请求而不是GET请求。
		data应该是标准application/x-www-form-urlencoded格式的buffer。urllib.urlencode()函数输入一个2元元组的映射或序列，并返回这样格式的一个string。
headers：是一个字典。并且被视为通过每个(key,value)作为参数调用add_header()。
			通常用于欺骗User-Agent header(浏览器使用它来认证自身，一些HTTP servers仅允许来自普通浏览器而不是脚本的请求)的值。
			例如，Mozilla Firefox使用"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11"来认证自己。Python2.6的urllib2的默认用户代理是"Python-urllib/2.6"。

最后两个参数只对正确处理第三方HTTP cookies感兴趣：
origin_req_host：
unverifiable：

<2>class urllib2.HTTPPasswordMgrWithDefaultRealm
1)说明：保持(realm, uri)到(user, password)的映射。realm为None表示一个catch-all realm，如果其他realm适合，将会搜索该realm。
构建一个密码管理对象，用来保存需要处理的用户名和密码。

<3>class urllib2.HTTPBasicAuthHandler([password_mgr])
1)说明：处理远程主机的身份认证。
访问某些Web服务器需要进行用户身份认证，否则会报访问身份未经授权"urllib2.HTTPError: HTTP Error 401: Unauthorized"。

构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象。

2)参数：
password_mgr：如果给出该参数，应当是与HTTPPasswordMgr一致。

<3>HTTPPasswordMgr Objects的方法：
这些方法适用于HTTPPasswordMgr和HTTPPasswordMgrWithDefaultRealm对象。

1) HTTPPasswordMgr.add_password(realm, uri, user, passwd)
uri可以是单个URI或一系列的URI。realm\user\passwd必须是字符串。当对realm和给定的URI进行认证时，(user, passwd)被用作认证tokens。

添加账户信息。

2) HTTPPasswordMgr.find_user_password(realm, authuri)
为给定的realm和URI获取user/password(如果有的话)。如果没有匹配的use/password，将反回(None,None)。









-----------------------------
注：
1. 类似ssl._create_default_https_context = create_default_context(purpose=_ASN1Object(nid=129, shortname='serverAuth', lon... Server Authentication', oid='1.3.6.1.5.5.7.3.1'), cafile=None, capath=None, cadata=None)
//ssl._create_default_https_context即表示后面的函数。
eg:
>>> print ssl._create_default_https_context
<function create_default_context at 0x7f4742d9f0c8>













一、相关函数
1、字符打印
#include <stdio.h>
 int printf(const char *format, ...); //输出到标准输出
 int fprintf(FILE *stream, const char *format, ...); //输出到文件
 int sprintf(char *str, const char *format, ...); //输出到字符串str中
 int snprintf(char *str, size_t size, const char *format, ...); //按size大小输出到字符串str中
  
以下函数功能与上面的一一对应相同，只是在函数调用时，把上面的...对应的一个个变量用va_list调用所替代。
在函数调用前ap要通过va_start()宏来动态获取。
#include <stdarg.h>
 int vprintf(const char *format, va_list ap);
 int vfprintf(FILE *stream, const char *format, va_list ap);
 int vsprintf(char *str, const char *format, va_list ap);
 int vsnprintf(char *str, size_t size, const char *format, va_list ap);

2、vsnprintf  //将可变参数格式化输出到一个字符数组。
<1>头文件
#include <stdarg.h>
<2>函数声明
int _vsnprintf(char* str, size_t size, const char* format, va_list ap);
<3>参数：
char *str [out],把生成的格式化的字符串存放在这里。
size_t size [in], str可接受的最大字符数[1]  (非字节数，UNICODE一个字符两个字节),防止产生数组越界。
const char *format [in], 指定输出格式的字符串，它决定了你需要提供的可变参数的类型、个数和顺序。
va_list ap [in], va_list变量. va:variable-argument:可变参数。
<4>备注
linux环境下是:vsnprintf，VC6环境下是:_vsnprintf。

3、printf、sprintf对齐
%-20s //左对齐，若实际小于20位，按实际输出
%+20d //右对齐

4、gettimeofday、localtime
<1>gettimeofday()头文件/usr/include/sys/time.h
   localtime()/usr/include/time.h

<2>time()和gettimeofday()
两个都是glibc获取时间的函数,gettimeofday支持返回微妙的精度,time返回秒的精度,在性能上有差别吗???
基本上没有性能差别, 因为time其实就是把gettimeofday包装了一层。
但是测试过程中发现 time比gettimeofday性能好了一点点, 可能是time函数的接口形式简单吧, 堆栈处理的快。

5、basename  //返回路径中的文件名部分
头文件：#include <libgen.h>   
函数声明：char *basename(char *path);
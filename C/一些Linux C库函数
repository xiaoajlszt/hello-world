1、stat、fstat、lstat 它们都是用来返回“相关文件状态信息”的，三者的不同之处在于设定源文件的方式不同。
int stat(const char *path, struct stat *buf);
int fstat(int fd, struct stat *buf);
int lstat(const char *path, struct stat *buf);
<1>fstat接受的是“文件描述符”，而另外两个则直接接受“文件全路径”。文件描述符是需要调用open系统调用后才能得到。
<2>stat和lstat的区别：当文件是一个符号链接时，lstat返回的是该符号链接本身的信息；而stat返回的是该链接指向的文件的信息。

2、mkdir、opendir	 //判断文件夹是否存在，创建文件夹
http://www.cnblogs.com/aizaifengyu/archive/2012/12/06/2805232.html

<1>umask //默认权限
http://www.cnblogs.com/ezhengnan/p/3670045.html
预设权限（权限掩码），创建一个目录或档案时，都会带一个默认的权限，umask就与这个默认权限有关。

函数说明：
umask()会将系统umask值设成参数mask&0777后的值，然后将先前的umask值返回。
在使用open()建立新文件时，该参数mode并非真正建立文件的权限，而是(mode&~umask)的权限值。
例如，在建立文件时指定文件权限为0666，通常umask值默认为022，则该文件的真正权限则为0666&～022＝0644，也就是rw-r--r--。
因此mkdir之前需要先调用umask(0)

返回值：umask用不会有错误值返回。返回值为原先系统的umask值。

<2>mkdir只能创建一层目录，创建多层目录会报错；如果需要创建的目录已经存在也会报错，需要使用opendir来判断。

<3>eg
#include <sys/stat.h>
#include <sys/types.h>
#include <stdio.h>
#include <dirent.h>

#define PATH "/dir/1"

int main()
{
    if(NULL == opendir(PATH))
    {
        umask(0);
        if(0 == mkdir(PATH, S_IRWXU | S_IRWXG | S_IRWXO))
        {
            printf("create dir success!\n");
            return 0;
        }

        printf("create dir fail!\n");
        return 1;
    }

    printf("dir:%s is exists!\n", PATH);
    return 0;
}
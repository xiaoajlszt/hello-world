一、传输模式：(ASCII模式 和 Binary模式)
1、只有文本文件(例如html文件)可以使用ASCII传输模式，其他文件通通使用Binary传输模式(图像、压缩、可执行文件等)。
<1>文本文件也称为ASCII文件，其文件内容遵循ASCII的定义，其主要特征是文件内容由若干行组成，
可以使用操作系统的显示、编辑命令来显示和编辑ASCII文件的内容，它使用的传输模式是asc；

<2>二进制文件是指除ASCII文件以外的所有文件格式，它使用的传输模式是bin；

<3>需要注意的是，可以将ASCII文件按二进制模式传输，但决不能将二进制文件按ASCII模式传输，
否则二进制文件的内容会遭到破坏而无法使用。

2、ASCII传输方式：假定用户正在拷贝的文件包含的简单ASCII码文本，如果在远程机器上运行的不是UNIX，
当文件传输时ftp通常会自动地调整文件的内容以便于把文件解释成另外那台计算机存储文本文件的格式。 

但是常常有这样的情况，用户正在传输的文件包含的不是文本文件，它们可能是程序，数据库，字处理文件或者压缩文件
（尽管字处理文件包含的大部分是文本，其中也包含有指示页尺寸，字库等信息的非打印字符）。
在拷贝任何非文本文件之前，用binary命令告诉ftp逐字拷贝，不要对这些文件进行处理。
 
3、二进制传输模式：在二进制传输中，保存文件的位序，以便原始和拷贝的是逐位一一对应的。即使目的地机器上包含位序列的文件是没意义的。
例如，macintosh以二进制方式传送可执行文件到Windows系统，在对方系统上，此文件不能执行。 
　　
如果你ASCII方式下传输二进制文件，即使不需要也仍会转译。这会使传输稍微变慢，也会损坏数据，使文件变得不能使用。
（在大多数计算机上，ASCII方式一般假设每一字符的第一有效位无意义，因为ASCII字符组合不使用它。如果你传输二进制文件，所有的位都是重要的。）

4、如果两台机器是同样的，则二进制方式对文本文件和数据文件都是有效的。

二、文本文件 和 二进制文件
http://blog.csdn.net/sxhelijian/article/details/29594687

0、文件都是二进制的，所谓的“二进制文件”应该是指本意不是用来当文本文件存储的文件。

1、Python中的不同操作方式
<1>StringIO内存中操作字符串
<2>BytesIO内存中操作二进制数据
<3>f = open('/Users/michael/test.txt', 'r')  读文本文件
<4>f = open('/Users/michael/test.txt', 'rb') 读二进制文件

2、Linux不区分文本文件和二进制文件
<1>linux fopen等分析
http://blog.csdn.net/pingnanlee/article/details/9671365
w、r等形态字符串都可以再加一个b字符，如rb、w+b或ab+等组合。加入b字符用来告诉函数库打开的文件为二进制文件，而非纯文字文件。
不过在POSIX系统，包含Linux都会忽略该字符。

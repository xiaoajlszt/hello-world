" YCM
"let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'

let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'

" 自动补全配置
set completeopt=longest,menu    "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
" "上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
"
" "youcompleteme  默认tab  s-tab 和自动补全冲突
" "let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
" "let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
"
let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0  " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
nnoremap <F6> :YcmForceCompileAndDiagnostics<CR>
" "nnoremap <leader>lo :lopen<CR> "open locationlist
" "nnoremap <leader>lc :lclose<CR>    "close locationlist
inoremap <leader><leader> <C-x><C-o>
"
" "在注释输入中也能补全
let g:ycm_complete_in_comments = 1
" "在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
" "注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"
nnoremap <leader>jj :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nmap <F4> :YcmDiags<CR>

"cscope
:set cscopequickfix=s-,c-,d-,i-,t-,e-
"
nmap <leader>ss :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>gg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>tt :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ee :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>ii :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>dd :cs find d <C-R>=expand("<cword>")<CR><CR>


" molokai
set t_Co=256
set background=dark
colorscheme molokai

" WinManager
let g:winManagerWindowLayout = "FileExplorer,BufExplorer"
let g:winManagerWidth = 30
nmap <Leader><F7> :WMToggle<cr>

" bufExplorer{{{
let g:bufExplorerDefaultHelp=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerFindActive=1
let g:bufExplorerSortBy='name'
"}}}

" NERD_tree {{{
let NERDTreeDirArrows=0
let NERDTreeHighlightCursorline=0
" let NERDTreeQuitOnOpen=1
let NERDTreeMapJumpNextSibling=""
let NERDTreeMapJumpPrevSibling=""
" }}}

" CtrlP {{{
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_reuse_window = 'netrw\|help\|quickfix\|NERD\|BufExplorer'
let g:ctrlp_custom_ignore = '^\.git\'
let g:ctrlp_regexp = 1
let g:ctrlp_max_height = 12
" }}}

" pclint&pyrun  {{{
if has('win32')
    autocmd Filetype c  :comp! flint
endif
autocmd Filetype python let &l:makeprg="python " .  fnameescape(expand("%"))
autocmd Filetype go     let &l:makeprg="go run " .  fnameescape(expand("%"))
nnoremap <F11> :make<CR>
" }}}

" Taglist/Tagbar {{{
"nnoremap <silent> <F8> :TlistToggle<CR>
"nnoremap <silent> <F7> :TlistUpdate<CR>
"let Tlist_Auto_Highlight_Tag = 1
"let Tlist_Show_One_File = 1
"let Tlist_Exit_OnlyWindow = 1
"let Tlist_WinWidth = 40
"let Tlist_Auto_Update = 1
"" let Tlist_Enable_Fold_Column = 0
"if 0 == has('win32')
"    let Tlist_Ctags_Cmd = '~/.vim/tools/ctags'
"endif
if 0 == has('win32')
    let g:tagbar_ctags_bin='~/.vim/tools/ctags'
endif
nmap <Leader><F6> :TagbarToggle<CR>
let g:tagbar_sort = 0
let g:tagbar_width=30
"let g:tagbar_left = 1
"let g:tagbar_width=40
" }}}

" signature {{{
let g:SignatureIncludeMarks='abcdefghijk'
let g:SignatureMap = {
            \ 'Leader'             :  "m",
            \ 'PlaceNextMark'      :  "m,",
            \ 'ToggleMarkAtLine'   :  "m.",
            \ 'PurgeMarksAtLine'   :  "m-",
            \ 'DeleteMark'         :  "dm",
            \ 'PurgeMarks'         :  "m<Space>",
            \ 'PurgeMarkers'       :  "m<BS>",
            \ 'GotoNextLineAlpha'  :  "']",
            \ 'GotoPrevLineAlpha'  :  "'[",
            \ 'GotoNextSpotAlpha'  :  "`]",
            \ 'GotoPrevSpotAlpha'  :  "`[",
            \ 'GotoNextLineByPos'  :  "]'",
            \ 'GotoPrevLineByPos'  :  "['",
            \ 'GotoNextSpotByPos'  :  "]`",
            \ 'GotoPrevSpotByPos'  :  "[`",
            \ 'GotoNextMarker'     :  "[+",
            \ 'GotoPrevMarker'     :  "[-",
            \ 'GotoNextMarkerAny'  :  "]=",
            \ 'GotoPrevMarkerAny'  :  "[=",
            \ 'ListLocalMarks'     :  "mm",
            \ 'ListLocalMarkers'   :  "m?"
            \ }
" }}}

" plantUML {{{
if has("win32")
let g:plantuml_executable_script='java -jar "'.$VIM.'/vimfiles/bundle/vim-plantuml/plantuml.jar" -charset UTF-8 -graphvizdot d:/tools/plantUML/graphviz-2.38/release/bin/dot.exe"'
else
let g:plantuml_executable_script='java -jar ~/.vim/bundle/vim-plantuml/plantuml.jar'
endif
nnoremap <F5> :silent make<CR>
" }}}

"lightline {{{
"let lightline = {
"            \ 'colorscheme': 'wombat',
"			\ 'active': {
"			\   'left': [ [ 'mode', 'paste' ],
"			\			  [ 'fugitive' ],
"			\             [ 'readonly', 'filename' ] ],
"			\  'right': [ [ 'lineinfo' ],
"			\             [ 'percent' ],
"            \             [ 'filetype', 'fileformat', 'fileencoding' ] ]
"            \ },
"            \ 'component': {
"            \   'fugitive': '%{exists("*fugitive#head")?" ".fugitive#head():""}',
"            \   'readonly': '%{&readonly?"RO":""}',
"            \   'filename': '%f'.'%{tagbar#currenttag(" | %s","")}',
"            \ },
"            \ 'component_visible_condition': {
"            \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
"            \ }
"			\ }

let g:lightline = {
            \ 'mode_map': { 'c': 'NORMAL' },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \			  [ 'fugitive' ],
            \             [ 'readonly', 'filename' ] ],
            \  'right': [ [ 'lineinfo' ],
            \             [ 'percent' ],
            \             [ 'filetype', 'fileformat', 'fileencoding' ] ]
            \ },
            \ 'component': {
            \   'filename': '%f'
            \ },
            \ 'component_function': {
            \   'modified': 'LightLineModified',
            \   'readonly': 'LightLineReadonly',
            \   'fugitive': 'LightLineFugitive',
            \   'fileformat': 'LightLineFileformat',
            \   'filetype': 'LightLineFiletype',
            \   'fileencoding': 'LightLineFileencoding',
            \   'mode': 'LightLineMode',
            \ }
            \ }

function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'RO' : ''
endfunction

function! LightLineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
        let branch = fugitive#head()
        return branch !=# '' ? ' '.branch : ''
    endif
    return ''
endfunction

function! LightLineFileformat()
    return winwidth(0) > 120 ? &fileformat : ''
endfunction

function! LightLineFiletype()
    return winwidth(0) > 120 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
    return winwidth(0) > 120 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

"}}}

"markdown {{{
let g:vim_markdown_folding_disabled = 1
"}}}

"Ag{{{
if 0 == has("win32")
    let g:ag_prg="~/.vim/tools/ag --vimgrep"
endif
"}}}


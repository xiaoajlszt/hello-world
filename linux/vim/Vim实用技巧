0. 基础命令
<0>总结：
- 数字加在动作之前。

<1>普通模式
1)移动光标的方法

<ctrl + f>	//向下移动一页，相当于Page Down
<ctrl + b>	//向上移动一页，相当于Page Up
<ctrl + d>	//向下移动半页
<ctrl + u>	//向上移动半页
0/^			//移动到该行最前面字符处
$			//移动到该行最后面字符处
G			//移动到文档的最后一行
nG			//n为数字。移动到文档的第n行。
gg			//移动到文档的第一行(相当于1G)
n<Enter>	//n为数字。光标向下移动n行。nj

f{char}		//在当前行上查找下一个字符x(向右方向)，可以带一个命令计数。"F"命令向左方向搜索。
			"tx"命令形同"fx"命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。该命令的反方向版是"Tx"。
			这4个命令都可以用";"来重复。以","也是重复同样的命令，但是方向与原命令的方向相反。
			
*			//查找当前光标下的单词

2)搜索与取代
/word		//向光标之下寻找名为word的字符串
?word		//向光标之上寻找名为word的字符串
n			//重复前一个寻找的动作。/word则继续往下寻找；?/则继续往上寻找
N			//反向寻找。与n相反。
:n1,n2s/word1/word2/g		//在n1和n2行之间寻找word1，并用word2取代word1。
:1,$s/word1/word2/g			//从第一行到最后一行寻找word1，并用word2取代word1。
:1,$s/word1/word2/gc		//从第一行到最后一行寻找word1，并用word2取代word1。且在取代前提示用户进行确认。

3)删除、赋值与粘贴
x			//向后删除一个字符，相当于del
X			//向前删除一个字符
nx			//n为数字。连续向后删除n个字符。
dd			//删除整行
ndd			//n为数字。向后删除n行。
d1G			//删除光标所在到第一行的所有数据。
dG			//删除光标所在到最后一行的所有数据。
d$			//删除光标所在到行末的所有数据。
d0			//删除光标所在到行首的所有数据。

yy			//复制光标所在的行。
nyy			//n为数字。复制光标所在的向下n行。
y1G
yG
y$
y0

p			//将已复制的数据粘贴到光标下一行。
P			//将已复制的数据粘贴到光标上一行。
J			//将光标所在行与下一行的数据合并为一行。

u			//撤销前一个动作。

c			//重复删除多个数据。eg：向下删除10行：10cj。(执行之后，会进入编辑模式)
cw			//删除从光标位置到单词结尾的字符

<2>进入编辑模式
i			//在光标所在处插入
I			//在光标所在行第一个非空格字符处插入
a			//在光标所在处的下一个字符处插入
A			//在光标所在行的最后一个字符处插入
o			//在光标所在处的下一行处插入新行
O			//在光标所在处的上一行处插入新行
r			//取代光标所在的那个字符
R			//一直取代光标所在的文字，直到按下ESC。

<3>命令模式
:w			
:w!
:q
:q!
:wq
:e!			//将文档还原到最原始的状态。		
ZZ			//若文档没有更改，则不存储离开；若文档已经更改，则存储后离开。
:w [filename]	//将编辑的文档存储成filename文档(另存为)
:r [filename]	//在编辑的文档中，读入filename文档的数据。
:n1,n2 w [filename]	//将n1到n2的内容存储成filename文档。
:! command		//暂时离开Vim到指令模式下执行command的显示结果。
:set nu
:set nonu		//取消行号

:h vimtutor		//vim内置文档


第一章 Vim解决问题的方式

1. .命令		
<1>作用：重复上次修改

<2>何为"上次修改"
>G	//增加从当前列到文档末尾处的缩进层级

x/dd/>都是在普通模式中的命令；
每次进入插入模式，也会形成一次修改。从进入插入模式那一刻起，直到返回普通模式为止(<Esc>)，Vim会记录每一个按键操作。 
做出这样一个修改后，再用.命令的话，它将会重复执行所有的这些按键操作。

<3>.命令是一个微型的宏

2. 不要自我重复
<1>一箭双雕
以下命令都会从普通模式切换到插入模式。

复合命令		等效的长命令
A				$a
C				c$		//删除到本行结尾
s				cl		//删除当前字符
S				^C		//删除本行
I				^i
A				$a
o				A<CR>	//小写
O				ko		//大写

3. 以退为进
f{char}   ;.

4. 执行、重复、回退
<1>可重复操作及如何回退
目的							操作					重复		回退
做出一个修改					{edit}					.			u
在行内查找下一个指定字符		f{char}/t{char}			;			,
在行内查找上一个指定字符		F{char}/T{char}			;			,
在文档中查找下一处匹配项		/pattern<CR>			n			N
在文档中查找上一处匹配项		?pattern<CR>			n			N
执行替换						:s/target/replacement	&			u
执行一系列修改					qx{changes}q			@X			u

5. 查找并手动替换

6. 认识.范式
用一键移动，另一键执行。


第16章 通过ctags建立索引，并用其浏览源代码
1. 认识ctags
<1>ctags软件包：exuberant-ctags

<2>检测系统是否安装ctags
ctags --version

<3>扩展ctags

2. 配置Vim使用ctags
<1>ctags -R

3. 使用Vim的标签跳转命令，浏览关键字的定义
<1>跳转到关键字的定义处 	<C-]>

<2>后退						<C-t>
Vim会为访问过的标签维护一个历史列表。<C-t>充当后退按钮的角色。

<3>当关键字存在多处匹配时，可以指定跳转的位置

<4>g<C-]>
如果关键字只有一处匹配，g<C-]>与<C-]>完全一致；
如果关键字有多处匹配，g<C-]>会从标签匹配列表中挑出可选项供我们选择。

4. 使用Ex命令
<1>不必非得将光标移到关键字上，才能进行标签跳转，也可以用Ex命令达到同样的目的。
:tag {keyword}		<C-]>
:tjump {keyword}	g<c-]>

<2>Ex命令也可以使用正则表达式:
:tjump /{pattern}

eg:浏览所有以phone为结尾的关键字定义
:tjump /phone$

5. 标签浏览代码时可用的命令：
<C-]>
g<C-]>
:tag {keyword}		//<C-]>
:tjump {keyword}	//g<C-]>
:pop 或 <C-t>		//反向遍历标签历史
:tag				//正向遍历标签历史
:tnext				//跳转到下一处匹配的标签
:tprev				//跳转到上一处匹配的标签
:tfirst				//跳转到第一处匹配的标签
:tlast				//跳转到最后一处匹配的标签
:tselect			//提示用户从标签列表中选择一项进行跳转

注: 目前使用的Vim版本中，没有<C-]>和:tag {keyword}命令。<C-]>即为g<C-]>。








































0. 基础命令
<0>总结：
1)数字加在动作之前。
2)快捷键说明：
<C-n>		表示同时按下ctrl和n
<C-r>0  	表示同时按下ctrl和r，然后按0
<C-w><C-=>	表示同时按下ctrl和w，然后同时按下ctrl和=

<1>普通模式
1)移动光标的方法

<ctrl + f>	//向下移动一页，相当于Page Down
<ctrl + b>	//向上移动一页，相当于Page Up
<ctrl + d>	//向下移动半页
<ctrl + u>	//向上移动半页
0/^			//移动到该行最前面字符处
$			//移动到该行最后面字符处
G			//移动到文档的最后一行
nG			//n为数字。移动到文档的第n行。
gg			//移动到文档的第一行(相当于1G)
n<Enter>	//n为数字。光标向下移动n行。nj

f{char}		//在当前行上查找下一个字符x(向右方向)，可以带一个命令计数。"F"命令向左方向搜索。
			"tx"命令形同"fx"命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。该命令的反方向版是"Tx"。
			这4个命令都可以用";"来重复。以","也是重复同样的命令，但是方向与原命令的方向相反。
			
*			//查找当前光标下的单词

%			//光标在结对字符间跳转

基于单词的移动：
w			//正向移动到下个单词的开头
b			//反向移动到当前单词/上一单词的开头
e			//正向移动到当前单词/下一单词的结尾
ge			//反向移动到上一单词的结尾

2)搜索与取代
/word		//向光标之下寻找名为word的字符串
?word		//向光标之上寻找名为word的字符串
n			//重复前一个寻找的动作。/word则继续往下寻找；?/则继续往上寻找
N			//反向寻找。与n相反。
:n1,n2s/word1/word2/g		//在n1和n2行之间寻找word1，并用word2取代word1。
:1,$s/word1/word2/g			//从第一行到最后一行寻找word1，并用word2取代word1。
:1,$s/word1/word2/gc		//从第一行到最后一行寻找word1，并用word2取代word1。且在取代前提示用户进行确认。

3)删除、赋值与粘贴
x			//向后删除一个字符，相当于del
X			//向前删除一个字符
nx			//n为数字。连续向后删除n个字符。
dd			//删除整行
ndd			//n为数字。向后删除n行。
d1G			//删除光标所在到第一行的所有数据。
dG			//删除光标所在到最后一行的所有数据。
d$			//删除光标所在到行末的所有数据。
d0			//删除光标所在到行首的所有数据。
db 			//删除光标所在到单词开头的内容。(光标所在的字符会保留)
dw          //删除光标所在到单词结尾的内容。(光标所在的字符不会保留)
daw			//删除光标所在的单词
dl			//删除光标所在的字符
dap			//删除整个段落

yy			//复制光标所在的行。
nyy			//n为数字。复制光标所在的向下n行。
y1G
yG
y$
y0

p			//将已复制的数据粘贴到光标下一行。
P			//将已复制的数据粘贴到光标上一行。
J			//将光标所在行与下一行的数据合并为一行。

u			//撤销前一个动作。

c			//重复删除多个数据。eg：向下删除10行：10cj。(执行之后，会进入编辑模式)
cw			//删除从光标位置到单词结尾的字符。(光标所在的字符不会保留)(执行之后，会进入编辑模式)

4)
<C-a>		//对当前光标之上或光标所在行之后的那个数字+1
<C-x>		//对当前光标之上或光标所在行之后的那个数字-1

5)
zz			//重绘屏幕，并把当前行显示在窗口中央。

<2>进入编辑模式
i			//在光标所在处插入
I			//在光标所在行第一个非空格字符处插入
a			//在光标所在处的下一个字符处插入
A			//在光标所在行的最后一个字符处插入
o			//在光标所在处的下一行处插入新行
O			//在光标所在处的上一行处插入新行
r			//取代光标所在的那个字符
R			//一直取代光标所在的文字，直到按下ESC。

插入模式下的快捷键：
<C-h>		//删除前一个字符(同退格键)
<C-w>		//删除前一个单词
<C-u>		//删除至行首

返回普通模式:
<Esc>		//切换到普通模式
<C-[>		//切换到普通模式
<C-o>		//切换到插入-普通模式


<3>命令模式
:w			
:w!
:q
:q!
:wq
:e!			//将文档还原到最原始的状态。		
ZZ			//若文档没有更改，则不存储离开；若文档已经更改，则存储后离开。
:w [filename]	//将编辑的文档存储成filename文档(另存为)
:r [filename]	//在编辑的文档中，读入filename文档的数据。
:n1,n2 w [filename]	//将n1到n2的内容存储成filename文档。
:! command		//暂时离开Vim到指令模式下执行command的显示结果。
:set nu
:set nonu		//取消行号

:h vimtutor		//vim内置文档
:h command		//关于command的帮助


第一章 Vim解决问题的方式

1. .命令		
<1>作用：重复上次修改

<2>何为"上次修改"
>G	//增加从当前列到文档末尾处的缩进层级

x/dd/>都是在普通模式中的命令；
每次进入插入模式，也会形成一次修改。从进入插入模式那一刻起，直到返回普通模式为止(<Esc>)，Vim会记录每一个按键操作。 
做出这样一个修改后，再用.命令的话，它将会重复执行所有的这些按键操作。

<3>.命令是一个微型的宏

2. 不要自我重复
<1>一箭双雕
以下命令都会从普通模式切换到插入模式。

复合命令		等效的长命令
A				$a
C				c$		//删除到本行结尾
s				cl		//删除当前字符
S				^C		//删除本行
I				^i
A				$a
o				A<CR>	//小写
O				ko		//大写

3. 以退为进
f{char}   ;.

4. 执行、重复、回退
<1>可重复操作及如何回退
目的							操作					重复		回退
做出一个修改					{edit}					.			u
在行内查找下一个指定字符		f{char}/t{char}			;			,
在行内查找上一个指定字符		F{char}/T{char}			;			,
在文档中查找下一处匹配项		/pattern<CR>			n			N
在文档中查找上一处匹配项		?pattern<CR>			n			N
执行替换						:s/target/replacement	&			u
执行一系列修改					qx{changes}q			@X			u

5. 查找并手动替换

6. 认识.范式
用一键移动，另一键执行。


第2章 普通模式
1. 停顿时请移开画笔

2. 把撤销单元切成块
<1>Vim中可以自己控制撤销的粒度。
u会撤销最新的修改。一次修改可以是改变文档内文本的任意操作，其中包括在普通模式、可视模式以及命令模式中所触发的命令。
在进入插入模式开始，直到返回普通模式为止，在此期间输入或删除的任何内容都被当成一次修改。

注：
在插入模式中移动光标会重置修改状态。这也会对.命令的操作产生影响。

3. 构造可重复的修改
让它们能够被.命令重复执行。

4. 用次数做简单的算术运算
<1>很多普通模式命令都可以带一个次数前缀，这样Vim就会尝试把该命令执行指定的次数。

<2>数字格式
Vim把以0开头的数字解释为八进制。可以将"set nrformats="加入到vimrc中，这会让Vim把所有数字都当成十进制。

5. 能够重复，就别用次数

6. 双剑合璧，天下无敌
<1>操作符 + 动作命令 = 操作
一个操作由一个操作符后面接动作命令组成。
学习新的动作命令及操作符，就像在学习Vim的词汇一样。如果掌握了这一简单的语法规则，在词汇量增长时，就能表达更多的想法。
eg:
daw 删除光标所在的单词
gU  转换为大写

则:
gUaw 将光标所在的单词转换为大写

<2>当一个操作符命令被连续调用两次时，它会作用于当前行。
eg:
dd 删除当前行
>> 缩进当前行
gUgU / gUU 将当前行转换为大写

<2>Vim中的操作符命令
c 		修改
d       删除
y       复制到寄存器
g~      反转大小写
gu      转为小写
gU      转为大写
>       增加缩进
<       减小缩进
=       自动缩进
!       使用外部程序过滤动作命令所跨越的行

<3>扩展命令组合的威力
1)自定义操作符和已有动作命令协同工作

2)自定义动作命令与已有操作符协同工作


第3章 插入模式
1.在插入模式中可即时更正错误

2.返回普通模式
<1>插入-普通模式：
它能让我们执行一次普通模式命令，执行完之后，马上又返回到插入模式。

eg:
<C-o>zz

3.不离开插入模式，粘贴寄存器中的文本


第16章 通过ctags建立索引，并用其浏览源代码
1. 认识ctags
<1>ctags软件包：exuberant-ctags

<2>检测系统是否安装ctags
ctags --version

<3>扩展ctags

2. 配置Vim使用ctags
<1>ctags -R

3. 使用Vim的标签跳转命令，浏览关键字的定义
<1>跳转到关键字的定义处 	<C-]>

<2>后退						<C-t>
Vim会为访问过的标签维护一个历史列表。<C-t>充当后退按钮的角色。

<3>当关键字存在多处匹配时，可以指定跳转的位置

<4>g<C-]>
如果关键字只有一处匹配，g<C-]>与<C-]>完全一致；
如果关键字有多处匹配，g<C-]>会从标签匹配列表中挑出可选项供我们选择。

4. 使用Ex命令
<1>不必非得将光标移到关键字上，才能进行标签跳转，也可以用Ex命令达到同样的目的。
:tag {keyword}		<C-]>
:tjump {keyword}	g<c-]>

<2>Ex命令也可以使用正则表达式:
:tjump /{pattern}

eg:浏览所有以phone为结尾的关键字定义
:tjump /phone$

5. 标签浏览代码时可用的命令：
<C-]>
g<C-]>
:tag {keyword}		//<C-]>
:tjump {keyword}	//g<C-]>
:pop 或 <C-t>		//反向遍历标签历史
:tag				//正向遍历标签历史
:tnext				//跳转到下一处匹配的标签
:tprev				//跳转到上一处匹配的标签
:tfirst				//跳转到第一处匹配的标签
:tlast				//跳转到最后一处匹配的标签
:tselect			//提示用户从标签列表中选择一项进行跳转

注: 某些Vim版本中，没有<C-]>和:tag {keyword}命令。<C-]>即为g<C-]>。


第17章 编译代码，并通过Quickfix列表浏览错误信息
1. 不离开Vim也能编译代码
<1>可以在Vim中调用外部编译器，如果编译器有任何错误信息的话，Vim还提供了快速跳转到出错位置的方法。
:make

2. 浏览Quickfix列表
<1>相关命令
:cnext		//跳转到下一项
:cprev		//跳转到上一项
:cfirst		//跳转到第一项
:clast		//跳转到最后一项
:cnfile		//跳转到下一个文件中的第一项
:pfile		//跳转到上一个文件中的最后一项
:cc N		//跳转到第n项
:copen		//打开quickfix窗口
:cclose		//关闭quickfix窗口
:cdo {cmd}	//在quickfix列表中的每一行上执行{cmd}
:cfdo {cmd} //在quickfix列表中的每一文件上执行{cmd}

3. 回溯之前的Quickfix列表
<1>更新quickfix列表时，Vim并不会覆盖之前的内容，而是将使用过的quickfix列表结果保存起来，方便回溯。
Vim会保存最近的10个列表。

:[n]colder		//回退到上一个列表
:[n]cnewer		//进入到下一个列表

4. 定制外部编译器
Vim的:make命令不仅仅限于调用外部的make程序，也可以调用任何安装在机器上的编译器。


第18章 通过grep、vimgrep以及其他工具对整个工程进行查找
1. 不必离开Vim也能调用grep
<1>Vim的:grep命令给外部grep程序(或类似grep的程序)提供了一层封装。凭借此命令，可以在不离开Vim的情况下，通过grep在多个文件中查找某个模式，然后就可以使用quickfix列表浏览这些查找结果了。
:grep命令默认调用grep，不过它也可以被方便地进行定制，从而将查找任务外包给其他专用程序，如ack。

2. 定制grep程序

3. 使用Vim内置的正则表达式引擎的Grep
:vimgrep命令允许使用Vim内置的正则表达式引擎在多个文件中查找。


第19章 自动补全
1. 认识Vim的关键字自动补全
<1>触发自动补全
通过<C-p>与<C-n>这两个组合键，不仅可以在插入模式下触发Vim的自动补全，而且可以用它们在补全列表中反向或者正向选择。

<C-n> / <C-p>		//普通关键字
<C-x><C-n>			//当前缓冲关键字
<C-x><C-j>			//包含文件关键字
<C-x><C-]>			//标签文件关键字
<C-x><C-k>			//字典查找
<C-x><C-l>			//整行补全
<C-x><C-f>			//文件名补全
<C-x><C-o>			//全能补全

2. 与自动补全的弹出式菜单进行交互

3. 掌握关键字的来龙去脉


第20章 利用Vim的拼写检查器，查找并更正拼写错误
1. 对你的工作进行拼写检查
当拼写检查器启动后，Vim将对所有未在拼写文件中出现过的单词进行标记。可以在这些拼写错误之间快速跳转，并让Vim提供更改意见。
:set spell


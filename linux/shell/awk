awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。
简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。

awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。
awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。
实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。

awk '{[pattern] action}' {filenames}
尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号{}不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。
awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。
通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。

0. 网上资料：
https://www.cnblogs.com/kingstarer/p/6059978.html

1. 基础符号
  -F 定义列分隔符

  NF    字段数量
  NR    每行的记录号，多文件记录递增
  FNR   与NR类似，不过多文件记录不递增，每个文件都从1开始

  FS    指定列分隔符
  RS    每条记录的分隔符，默认为\n

  $0 一整行
  $i 某行第i个字段

2. if语句：
if(表达式) {语句;语句;...} else {语句;语句;...}
if(表达式) {语句;语句;...} else if(表达式) {语句;语句;...} ... else {语句;语句;...}

-------------------------------------
四、awk  //处理每一行的字段内的数据，字段默认用空格或tab分隔

awk '条件类型1{动作1}  条件类型2{动作2} ...' filename
$0 //代表一整列资料
$1\$2\$3... //第一/二/三列
eg：last | awk '{print $1 "\t" $3}'      //打印出last显示内容的第一和第三列(所有行都要处理，因此没有条件类型)
//awk后续的所有动作在单引号内，所以，内容如果想以print打印时，非变量的文字部分，要用双引号。

<1>awk处理过程
1)读入第一行，并将第一行资料填入$0\$1\$2...等变量中;
2)依据"条件类型"的限制，判断是否需要进行后面的"动作";
3)做完所有的动作与条件类型;
4)读入下一行，重复1-3，直到所有数据都读完为止。

<2>内建变量
NF  每一行$0拥有的字段总数
NR  目前awk所处理的是第几行数据
FS  目前的分隔字符，预设是空格

<3>awk逻辑运算字符
既然需要用到“条件”的类别，自然就需要一些逻辑运算
> < >= <= == !=
eg: 列出/etc/passwd中所有第三栏小于10的行的第一栏和第三栏数据。(注意/etc/passwd中是以冒号为字段分隔的，要用FS=":")  
1)cat /etc/passwd | awk '{FS=":"} $3 < 10 {print $1 "\t" $3}'
root:x:0:0:root:/root:/bin/bash
bin     1
daemon  2
adm     3
lp      4
sync    5
shutdown        6
halt    7
mail    8
//第一行没有正确显示？这是因为读入第一行时，$1\$2\$3这些变量预设还是以空格键为分隔的，虽然我们定义了FS=":"，但却尽在第二行后才开始生效。因此需要使用BEGIN关键字预设awk变量！！！

awk中的两个特殊的 表达式(条件) : BEGIN/END
任何在BEGIN之后列出的动作，将在awk开始扫描输入之前执行
任何在END之后列出的动作，将在扫描完全部输入之后执行。
通常使用BEGIN来显示变量和初始化变量；使用END来输出最终结果。

2)cat /etc/passwd | awk 'BEGIN {FS=":"} $3 < 10 {print $1 "\t" $3}'
root    0
bin     1
daemon  2
adm     3
lp      4
sync    5
shutdown        6
halt    7
mail    8

注意：<1>使用awk时要先确认数据，如果是连续性的数据，中间不能出现空格或[tab]，否则会出现如下情况：
   reboot  boot
   wtmp    Wed

其他
<1>awk用 /字符/ 来匹配字符串  
<2>awk -v 参数   awk -v port=$1 '{if (index($0, port)) print $1}')
<3>awk的index //比较字符串  awk -v port=$1 '{if (index($0, port)) print $1}')
http://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html


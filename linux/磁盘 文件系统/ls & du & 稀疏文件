0. 稀疏文件
指文件中有"洞"(hole)的文件。

<1>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
    int fd = open("sparse.file", O_RDWR|O_CREAT);
    lseek(fd, 1024, SEEK_CUR);
    write(fd, "\0", 1);

    return 0;
}
创建一个有“洞”的文件主要是用lseek移动文件指针超过文件末尾，然后write，这样就形成了一个“洞”。


用Shell也可以创建稀疏文件：
$ dd if=/dev/zero of=sparse_file.img bs=1M seek=1024 count=0
0+0 records in
0+0 records out

<2>使用稀疏文件的优点
The advantage of sparse files is that storage is only allocated when actually needed: disk space is saved, and large files can be created even if there is insufficient free space on the file system.
即稀疏文件中的“洞”可以不占存储空间。

eg：
ls -l fs.img
-rw-r--r-- 1 bl bl 1073741824 2012-02-17 05:09 fs.img

du -sh fs.img
0       fs.img
稀疏文件fs.img，ls显示出fs.img的大小是1073741824字节（1GB），而du显示出fs.img的大小是0。

<3>此外，对于拷贝稀疏文件，cp缺省情况下会做一些优化，以加快拷贝的速度。例如：
strace cp fs.img fs.img.copy >log 2>&1
打开log文件，我们发现cp命令只是read和lseek，并没有write。

这和cp的关于sparse的选项有关，看cp的manpage：
By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file whenever the SOURCE file contains a long enough sequence of  zero bytes.  Use --sparse=never to inhibit creation of sparse files.
看了一下cp的源代码，发现每次read之后，cp会判断读到的内容是不是都是0，如果是就只lseek而不write。


1. du 和 ls
https://www.cnblogs.com/coldplayerest/archive/2012/02/19/2358098.html

<1>查看block size大小
tune2fs -l /dev/sda1 |grep "Block size"	#tune2fs是调整和查看ext2/ext3文件系统的文件系统参数
dumpe2fs /dev/sda1 | grep "Block size"	#dumpe2fs指令的作用是导出ext2/ext3/ext4文件信息的
(mkfs指认不仅仅指mkfs.ext2(ext3、ext4) 三个指令，还包括mke2fs命令 。)

<2>du
-s: --summarize, display only a total for each argument.
-m: like --block-size=1M
-k: like --block-size=1K
-h, --human-readable, print sizes in human readable format (e.g., 1K 234M 2G)

eg: du -sm 显示的结果是在block size为1M时的块数，因此要通过--block-size=4k传入真实block size才能得到准确的块数。
//-m,即block size为1M时

<3>ls
-s, --size, print the allocated size of each file, in blocks.
-k, --kibibytes, default to 1024-byte blocks for disk usage.
--block-size=SIZE, scale sizes by SIZE before printing them; e.g., '--block-size=M' prints sizes in units of 1,048,576 bytes; see SIZE format below
-d, --directory, list directories themselves, not their contents
-R, --recursive, list subdirectories recursively
-S     sort by file size
-r, --reverse, reverse order while sorting

# 查看当前目录下的文件数量（不包含子目录中的文件）
ls -l|grep "^-"| wc -l
# 查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录
ls -lR|grep "^-"| wc -l
# 查看当前目录下的文件夹目录个数（不包含子目录中的目录），同上述理，如果需要查看子目录的，加上R
ls -l|grep "^d"| wc -l

<4>du 和 ls的区别
1) The du command which prints the occupied space, while ls print the apparent size.
ls显示文件的"逻辑上"的size，而du显示文件"物理上"的size，du显示的size是文件在硬盘上占据了多少个block计算出来的。

eg：
echo -n 1 > 1B.txt		# 创建一个文件1B.txt，大小是一个字节

ls -l 1B.txt
-rw-r--r-- 1 bl bl 1 2012-02-19 05:17 1B.txt	# ls显示出的size就是1Byte

du -h 1B.txt
4.0K 1B.txt				# 1B.txt在硬盘上会占用N个block，然后根据每个block的大小计算出来的
//这里之所以用了N，而不是一个具体的数字，是因为隐藏在幕后的细节还很多，例如Fragment size。

2)当然上述这些都是ls和du的缺省行为，ls和du分别提供了不同参数来改变这些行为。
比如:
ls的-s选项(print the allocated size of each file, in blocks)
du的--apparent-size选项(print apparent sizes, rather than disk usage; although the apparent size is usually smaller, it may be larger due to holes in ('sparse') files, internal fragmentation, indirect blocks, and the like)。

2. statvfs


3. 测试
/opt/trend/ddei/queue/quarantine
[root@allen-ddei-test1 quarantine]# ls -hlR|grep "^-"
-rw-r--r-- 1 ddei ddei 3.8K Aug  3 07:29 A5382EC4-7282-E305-8A92-8CEB7BA5E4C5.AF
-rw-r--r-- 1 ddei ddei 4.5K Aug  3 07:29 A5382EC4-7282-E305-8A92-8CEB7BA5E4C5.DF
-rw-r--r-- 1 ddei ddei  13K Aug 10 09:59 B40726C8-7311-CA05-98D9-1B559A57E07C.AF
-rw-r--r-- 1 ddei ddei 103K Aug 10 09:59 B40726C8-7311-CA05-98D9-1B559A57E07C.DF
//文件共占用33block

[root@allen-ddei-test1 quarantine]# ls -lR|grep "^d"| wc -l
272
//文件夹共占用272block

[root@allen-ddei-test1 quarantine]# du -s --block-size=4k
306     .
//du显示共占用306block
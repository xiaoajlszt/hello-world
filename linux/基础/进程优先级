一、普通进程和实时进程
1、linux的进程分为普通进程和实时进程。
<1>实时进程的优先级(实时优先级,[0,99])都比普通进程的优先级([100,139])高。
当系统中有实时进程运行时，普通进程几乎无法分到时间片。

2、普通进程调度策略：
SCHED_NORMAL  0  --  CFS

3、实时进程调度策略：
<1>SCHED_FIFO    1  先入先出的调度算法
1)它不使用时间片，处于可运行状态的SCHED_FIFO级的进程会比任何SCHED_NORMAL级的进程都先得到调度。
2)一旦一个SCHED_FIFO级进程处于可执行状态，就会一直执行，直到它自己受阻塞或显式地释放处理器为止。
3)只有更高优先级的SCHED_FIFO或者SCHED_RR任务才能抢占SCHED_FIFO任务。
4)如果有两个或多个同优先级的SCHED_FIFO级进程，它们会轮流执行，但依然只有在它们愿意让出处理器时才会退出。
                     
<2>SCHED_RR      2
1)SCHED_RR与SCHED_FIFO大体相同，只是SCHED_RR级的进程在耗尽实现分配给它的时间后就不能再继续执行了。
也就是说SCHED_RR是带有时间片的SCHED_FIFO,这是一种实时轮流调度算法。
2)当SCHED_RR任务耗尽它的时间片时，在同一优先级的其他实时进程会被轮流调度。
3)时间片只是用来重新调度同一优先级的进程。对于SCHED_FIFO进程，高优先级总是立即抢占低优先级，
但低优先级进程决不能抢占SCHED_RR任务，即使它的时间片耗尽。

这两种实时算法实现的都是静态优先级。内核部位实时进程计算动态优先级。这能保证给定优先级别的实时进程总能抢占优先级比它低的进程。

二、NICE、RTPRIO(实时优先级) //详见LKD
linux采用两种优先级范围：nice、实时优先级。
1、nice
<1>默认范围[-20,19]，默认值为0，越大的nice值意味着更低的优先级。
<2>linux系统中，nice值代表时间片的比例。
<3>nice值可以通过nice和renice命令修改。
1)nice命令设置一个要执行进程的nice值；renice命令设置一个已经执行进程的nice值。
2)非root用户，只能将进程的nice值变大，不能变小。
3)如果设置的nice值超过了nice的边界，系统就取边界值作为进程的nice值。

2、实时优先级
<1>默认范围[0,99]，越大的数值，意味着进程优先级越高。
1)实时优先级的范围[0,MAX_PT_PRIO-1]，默认情况下MAX_PT_PRIO为100。
2)SCHED_NORMAL级进程的nice值共享了这个取值空间，它的取值范围是[MAX_PT_PRIO,MAX_PT_PRIO+40)。
也就是说[-20,19]直接对应的是[100,139]范围内的实时优先级。

<2>任何实时进程的优先级都高于普通进程。实时优先级和nice优先级处于互不相交的两个范畴。
<3>ps -eo state,uid,pid,ppid,ni,pri,rtprio,time,comm | more
查看系统进程列表，rtprio列对应实时优先级。如果有进程rtprio列显示"-"，说明它不是实时进程。

三、内核代码中有 
1、static_prio 范围：[100,139]
<1>静态优先级数值越大，进程的优先级越小。
<2>一个进程通常会继承其父进程的static priority。也可以通过系统调用nice()或者setpriority()指定。
<3>内核2.6中的静态优先级相当于内核2.4中的nice值，

2、rt_priority 范围[0,99]
其大小可以通过sched_setscheduler()和__setscheduler_params()来改变。
实时进程被一个进程替换，可能的情况有：
<1>进程被拥有更高优先级的进程抢占。
<2>进程发生阻塞进入睡眠状态。
<3>进程被终止（状态为TASK_STOPPED OR TASK_TRACED）或者被杀死（EXIT_DEAD OR EXIT_ZOMBIE）。
<4>进程通过调用sched_yield()自愿放弃处理器。
<5>进程是轮回实时（SCHED_RR）且其时间片执行完毕。
<6>当在SCHED_RR时调用nice()和set_priority()函数并不影响实时优先级，只会影响静态优先级（从而影响基时间片）。

3、prio

4、normal_prio

--------------------------------------------------------------------------------------------
一、PRI、nice、%nice   http://blog.csdn.net/longdel/article/details/7317511
1、用top或者ps命令会输出PRI/PR、NI、%ni/%nice三种指标：
<1>PRI：进程优先级，代表这个进程可被执行的优先级。值越小，优先级越高，越早被执行。
<2>NI：进程nice值。进程优先级的修正数值。PRI(new)=PRI(old)+nice。nice越小PRI越小。
<3>%ni：改变过优先级的进程占用CPU的百分比。

2、进程在创建时被赋予不同的优先级值，nice值是表示进程优先级值的修正值。
通常，子进程会继承父进程的nice值。比如，init进程nice值为0，其他所有进程继承了nice值。
--------------------------------------------------------------------------------------------


































































四、awk  //处理每一行的字段内的数据，字段默认用空格或tab分隔
awk ‘条件类型1{动作1}  条件类型2{动作2} ...’ filename
$0 //代表一整列资料
$1\$2\$3... //第一/二/三列
eg：last | awk '{print $1 "\t" $3}'      //打印出last显示内容的第一和第三列(所有行都要处理，因此没有条件类型)
//awk后续的所有动作在单引号内，所以，内容如果想以print打印时，非变量的文字部分，要用双引号。

<1>awk处理过程
1)读入第一行，并将第一行资料填入$0\$1\$2...等变量中;
2)依据"条件类型"的限制，判断是否需要进行后面的"动作";
3)做完所有的动作与条件类型;
4)读入下一行，重复1-3，直到所有数据都读完为止。

<2>内建变量
NF  每一行$0拥有的字段总数
NR  目前awk所处理的是第几行数据
FS  目前的分隔字符，预设是空格

<3>awk逻辑运算字符
既然需要用到“条件”的类别，自然就需要一些逻辑运算
> < >= <= == !=
eg: 列出/etc/passwd中所有第三栏小于10的行的第一栏和第三栏数据。(注意/etc/passwd中是以冒号为字段分隔的，要用FS=":")  
1)cat /etc/passwd | awk '{FS=":"} $3 < 10 {print $1 "\t" $3}'
root:x:0:0:root:/root:/bin/bash
bin     1
daemon  2
adm     3
lp      4
sync    5
shutdown        6
halt    7
mail    8
//第一行没有正确显示？这是因为读入第一行时，$1\$2\$3这些变量预设还是以空格键为分隔的，虽然我们定义了FS=":"，但却尽在第二行后才开始生效。因此需要使用BEGIN关键字预设awk变量！！！

awk中的两个特殊的 表达式(条件) : BEGIN/END
任何在BEGIN之后列出的动作，将在awk开始扫描输入之前执行
任何在END之后列出的动作，将在扫描完全部输入之后执行。
通常使用BEGIN来显示变量和初始化变量；使用END来输出最终结果。

2)cat /etc/passwd | awk 'BEGIN {FS=":"} $3 < 10 {print $1 "\t" $3}'
root    0
bin     1
daemon  2
adm     3
lp      4
sync    5
shutdown        6
halt    7
mail    8

注意：<1>使用awk时要先确认数据，如果是连续性的数据，中间不能出现空格或[tab]，否则会出现如下情况：
   reboot  boot
   wtmp    Wed

其他
<1>awk用 /字符/ 来匹配字符串  
<2>awk -v 参数   awk -v port=$1 '{if (index($0, port)) print $1}')
<3>awk的index //比较字符串  awk -v port=$1 '{if (index($0, port)) print $1}')
http://www.cnblogs.com/chengmo/archive/2010/10/08/1845913.html
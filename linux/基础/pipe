管道命令(pipe)
1、管道命令与连续下达命令不一样。
2、管道命令智能处理经由前一个命令传递来的正确信息(标准输出STDOUT的信息)，对于错误信息(STDERR)没有直接处理的能力。

一、截取命令：cut、grep
将一段数据经过分析后，取出我们想要的。或者说，通过分析关键字，取得我们所要的那一行。
通常截取命令是针对一行一行来分析的。
	
1、cut  //将一段信息的某一段切出来，以行为单位处理
<1>参数
-d：后面接分隔符，通过分隔字符将一段讯息分割成为多段。与-f一起使用。
-f：依据-d的分隔字符将一段讯息分割成为多段。用-f指明取出第几段的意思。
-c：以字符为单位取出固定字符区间。

eg：
[root@xiaopeng ~]# echo $PATH
/usr/lib64/qt-3.3/bin:/root/perl5/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/go/bin:/root/bin
[root@xiaopeng ~]# echo $PATH | cut -d ':' -f 1
/usr/lib64/qt-3.3/bin
[root@xiaopeng ~]# echo $PATH | cut -d ':' -f 1,2
/usr/lib64/qt-3.3/bin:/root/perl5/bin

[root@xiaopeng ~]# export | cut -c 12-  //取出12之后的所有字符
GOROOT="/usr/local/go"
HISTCONTROL="ignoredups"
HISTSIZE="1000"
HOME="/root"

<2>cut需要有固定的分隔符，比如空格、分号等，如果有多个空格连在一起，可能会不太好处理。

2、grep  //分析以行信息
grep [OPTIONS] PATTERN [FILE ...]
grep [OPTIONS] [-e PATTERN | -f FILE] [FILE ...]
  
<1> OPTIONS
-r, --recursive	//文件参数是目录，该选项将递归搜索该目录下的所有子目录和文件。symbolic links文件与-R有差异。
    Read all files under each directory, recursively, following symbolic links only if they are on the command line.  This is equivalent to the -d recurse option.

-R, --dereference-recursive
    Read all files under each directory, recursively. Follow all symbolic links, unlike -r.
	
-h, --no-filename
    Suppress the prefixing of file names on output.  This is the default when there is only one file (or only standard input) to search.

-H, --with-filename
    Print the file name for each match.  This is the default when there is more than one file to search.

-i, --ignore-case	//忽略大小写
    Ignore case distinctions in both the PATTERN and the input files.  (-i is specified by POSIX.)

-I  //
	Process a binary file as if it did not contain matching data; this is equivalent to the --binary-files=without-match option.

-n, --line-number
    Prefix each line of output with the 1-based line number within its input file.  (-n is specified by POSIX.)


-a：将binary档案以text档案方式搜索数据
-c：计算找到"搜索字符串"的次数
-i：忽略大小写
-n：顺便输出行号
-v：反向选择，即显示出没有"搜索字符串"的那些行

<2> PATTERN
^ 锚定行的开始 如：'^grep'匹配所有以grep开头的行。 
$ 锚定行的结束 如：'grep$'匹配所有以grep结尾的行。 
. 匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。 
* 匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。 .*一起用代表任意字符。
?[] 匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。 
[^] 匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。 
\(..\) 标记匹配字符，如'\(love\)'，love被标记为1。 
\ 锚定单词的开始，如:'\匹配包含以grep开头的单词的行。 
\> 锚定单词的结束，如'grep\>'匹配包含以grep结尾的单词的行。 
x\{m\} 重复字符x，m次，如：'0\{5\}'匹配包含5个o的行。 
x\{m,\} 重复字符x,至少m次，如：'o\{5,\}'匹配至少有5个o的行。 
x\{m,n\}重复字符x，至少m次，不多于n次，如：'o\{5,10\}'匹配5--10个o的行。
?\w 匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。
?\b 单词锁定符，如: '\bgrep\b'只匹配grep。
?常用的 grep 选项有：
?-c 只输出匹配行的个数。
?-i 不区分大小写（只适用于单字符）。
?-h 查询多文件时不显示文件名。
?-l 查询多文件时只输出包含匹配字符的文件名。
?-n 显示匹配行及行号。
?-s 不显示不存在或无匹配文本的错误信息。
?-v 显示不包含匹配文本的所有行。
?-V 显示软件版本信息
?使用grep匹配时最好用双引号引起来，防止被系统误认为参数或者特殊命令，也可以匹配多个单词

二、排序命令：sort、wc、uniq
1、sort
<1>参数
-f：忽略大小写
-b：忽略最前面的空格符部分
-r：反向排序
-u：就是uniq，相同的数据仅出现一行
-n：使用"纯数字"进行排序(预设是以文字形态来排序的)

eg：
[root@xiaopeng ~]# last | cut -d ' ' -f 1 | sort -u

rcp001
reboot
root
(unknown
wtmp

2、uniq //排序完了，将重复的资料仅列出一个显示
<1>uniq [-ic]
-i：忽略大小写字符的不同
-c：进行计数

eg：
[root@xiaopeng ~]# last | cut -d ' ' -f 1 | sort | uniq -c
      1 
      1 rcp001
     32 reboot
    133 root
     32 (unknown
      1 wtmp

3、wc //查询档案中有多少行、字、字符
<1>wc [-lwm]
-l：仅列出行
-w：仅列出多少字(因为单字)
-m：多少字符

三、字符转换命令：tr、col、join、paste、expand
1、tr //删除一段信息当中的文字，或者进行文件信息的转换
<1>tr [-ds] SET1 ...
-d：删除信息中的字符串SET1
-s：取代掉重复的字符

eg：
last | tr '[a-z]' '[A-Z]'  //将last输出信息中的所有小写变为大写
cat /etc/passwd | tr -d ':' //将/etc/passwd输出信息中的冒号删除
cat /home/test/dostxt | tar -d '\r' > dostxt-noM //将DOS档案的换行符删除

2、col
<1>col [-x]
-x：将tab转换成对等的空格键

3、join/paste

4、explan //将tab转换成空格键

四、分割命令split

五、参数代换xargs
1、xargs可以读入stdin的数据，并且以空格符或换行符作为分辩，将stdin的资料分隔成arguments。

2、xargs [-0epn] command
参数
-0：如果输入的stdin含有特殊字符(` \ 空格等)，该参数可以将它还原成一般字符。
-e：EOF的意思。后面可以接一个字符串，当xargs分析到这个字符串时，就会停止工作。
-p：在执行每个指令的argument时，都会询问使用者的意思。
-n：后面接次数，每次command指令执行时，要使用几个参数的意思。

当xargs后面没有接任何指令时，默认是以echo输出。

3、eg
<1> passwd的前三行
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin

1)[root@xiaopeng hello-world]# cat < /etc/passwd | head -n 3 | xargs 
root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin

2)[root@xiaopeng hello-world]# cat < /etc/passwd | head -n 3 | xargs -0   //显示出换行
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin

<2>由于很多命令不支持|管道来传递参数，此时可以使用xargs命令：
[root@xiaopeng hello-world]# find -name 'book*' | echo

[root@xiaopeng hello-world]# find -name 'book*' | xargs echo
./books ./book_note

六、关于减号-的用途
管道命令中，某些指令需要用到文件名称来进行处理时，此时该stdin和stdout可以利用减号来替代：
eg：tar -cvf - /home | tar -xvf -
后一个指令的-取用前一个指令的stdout，因此，就不需要使用file了。


















一、阻塞、非阻塞，同步、异步
https://www.zhihu.com/question/19732473

“阻塞”与"非阻塞"与"同步"与“异步"不能简单的从字面理解，提供一个从分布式系统角度的回答。
1、同步与异步
同步和异步关注的是消息通信机制(synchronous communication/asynchronous communication)。
<1>所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。
换句话说，就是由调用者主动等待这个调用的结果。

<2>而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。
换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，
被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。

<3>典型的异步编程模型比如Node.js举个通俗的例子：你打电话问书店老板有没有《分布式系统》这本书，
如果是同步通信机制，书店老板会说，你稍等，”我查一下"，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。
而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。
在这里老板通过“回电”这种方式来回调。

2. 阻塞与非阻塞
阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。
<1>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。
<2>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。

<3>还是上面的例子，你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，
如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。
在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。

3、典型例子
老张爱喝茶，废话不说，煮开水。
出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。
<1>老张把水壶放到火上，立等水开。（同步阻塞）
老张觉得自己有点傻
<2>老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）
老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。
<3>老张把响水壶放到火上，立等水开。（异步阻塞）
老张觉得这样傻等意义不大
<4>老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）
老张觉得自己聪明了。

所谓同步异步，只是对于水壶而言。普通水壶，同步；响水壶，异步。
虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。
同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。

所谓阻塞非阻塞，仅仅对于老张而言。立等的老张，阻塞；看电视的老张，非阻塞。
情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。
所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。

----------------------------------------------------------------------------------------------------------------------------

二、五种I/O模式
1、阻塞I/O(Linux下的I/O操作默认是阻塞I/O，即open和socket创建的I/O都是阻塞I/O)
进程处于阻塞模式时，让出CPU，进入休眠状态。
阻塞I/O模式是最普遍使用的I/O模式。是Linux系统下缺省的I/O模式。大部分程序使用的都是阻塞模式的I/O。
一个套接字建立后所处于的模式就是阻塞I/O模式。（因为Linux系统默认的IO模式是阻塞模式）

2、非阻塞I/O(可以通过fcntl或者open时使用O_NONBLOCK参数，将fd设置为非阻塞的I/O)
当一个应用程序使用了非阻塞模式的套接字，它需要使用一个循环来不听的测试是否一个文件描述符有数据可读(称做 polling(轮询))。
应用程序不停的polling内核来检查是否I/O操作已经就绪。这将是一个极浪费CPU资源的操作。这种模式使用中不是很普遍。
非阻塞模式的使用并不普遍，因为非阻塞模式会浪费大量的CPU资源。

当我们将一个套接字设置为非阻塞模式，我们相当于告诉了系统内核：“当我请求的I/O 操作不能够马上完成，你想让我的进程进行休眠等待的时候，
不要这么做，请马上返回一个错误给我。”

对管道的操作，最好使用非阻塞方式！

3、I/O多路复用(I/O多路复用，通常需要非阻塞I/O配合使用)
它能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。

IO 多路技术一般在下面这些情况中被使用：
<1>当一个客户端需要同时处理多个文件描述符的输入输出操作的时候（一般来说是标准的输入输出和网络套接字)，I/O多路复用技术将会有机会得到使用。
<2>当程序需要同时进行多个套接字的操作的时候。
<3>如果一个 TCP 服务器程序同时处理正在侦听网络连接的套接字和已经连接好的套接字。
<4>如果一个服务器程序同时使用 TCP 和 UDP 协议。
<5>如果一个服务器同时使用多种服务并且每种服务可能使用不同的协议（比如inetd就是这样的）。

4、信号驱动 I/O (SIGIO)
我们可以使用信号，让内核在文件描述符就绪的时候使用 SIGIO 信号来通知我们。我们将这种模式称为信号驱动 I/O 模式。

5、异步 I/O
当我们运行在异步 I/O 模式下时，我们如果想进行 I/O 操作，只需要告诉内核我们要进行 I/O 操作，然后内核会马上返回。
具体的 I/O 和数据的拷贝全部由内核来完成，我们的程序可以继续向下执行。当内核完成所有的 I/O 操作和数据拷贝后，内核将通知我们的程序。

异步I/O和信号驱动I/O的区别是：
<1>信号驱动 I/O 模式下，内核在操作可以被操作的时候通知给我们的应用程序发送SIGIO消息。
<2>异步 I/O 模式下，内核在所有的操作都已经被内核操作结束之后才会通知我们的应用程序。
